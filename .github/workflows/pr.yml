name: pr

on: [pull_request]

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [10.x, 12.x]
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - run: yarn --frozen-lockfile
      - run: yarn build
      - run: yarn -s test:fw:unit
  schema-tests:
    runs-on: macos-latest
    strategy:
      matrix:
        node-version: [10.x, 12.x]
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - run: yarn --frozen-lockfile
      - run: yarn build
      - run: yarn -s test:lib
  publish:
    needs: [unit-tests, schema-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Get all git commits and tags
        run: git fetch --prune --unshallow --tags
      - uses: actions/setup-node@v1
      - name: Install deps
        run: yarn --frozen-lockfile
      - name: Make release
        run: |
          yarn -s dripip pr --json > result.json
          jq '.' < result.json
        env:
          NPM_TOKEN: ${{secrets.NPM_TOKEN}}
      - name: Save publish result
        uses: actions/upload-artifact@v1
        with:
          name: published
          path: result.json
  e2e-tests:
    needs: [publish]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [10.x, 12.x]
        database: [sqlite, postgres, mysql]
        nexus-version: [next]
    services:
      postgres:
        image: postgres:10.8
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      mysql:
        image: mysql:5.7
        ports:
          - 4567:3306
        env:
          MYSQL_ROOT_PASSWORD: mysql
        options: --health-cmd="mysqladmin ping" --health-interval=5s --health-timeout=2s --health-retries=3
    steps:
      - uses: actions/checkout@v2
      - run: cat published/result.json | jq -r '.data.release.version'
      - name: Load publish result
        uses: actions/download-artifact@v1
        with:
          name: published
      - name: Analyze publish result
        id: release
        run: |
          jq -r '.data.release.version' < published/result.json
          jq -r '.' < published/result.json
          echo ::set-output name=result::$(jq -r '.type' < published/result.json)
      - name: Use Node.js ${{ matrix.node-version }}
        if: steps.release.outputs.result == 'did_publish'
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install deps
        if: steps.release.outputs.result == 'did_publish'
        run: yarn --frozen-lockfile
      - run: yarn -s build:ci
        if: steps.release.outputs.result == 'did_publish'
      - name: Setup global git user
        if: steps.release.outputs.result == 'did_publish'
        run: |
          # For nexus create app flow which will make an init commit 
          git config --global user.name prisma-labs
          git config --global user.email labs@prisma.io
      - name: e2e test
        if: steps.release.outputs.result == 'did_publish'
        env:
          LOG_LEVEL: trace
        run: |
          export NEXUS_PLUGIN_PRISMA_VERSION=$(cat published/result.json | jq -r '.data.release.version')
          if [ $NEXUS_PLUGIN_PRISMA_VERSION == '' ]; then
            echo "Failed to extract version"
            exit 1
          fi
          export NEXUS_VERSION=${{ matrix.nexus-version }}

          yarn test:fw:e2e:${{ matrix.database }}
