// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`it exposes filtering only if filtering: true 1`] = `
"input IntFilter {
  equals: Int
  not: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
}

type Post {
  id: Int!
}

type Query {
  ok: Boolean!
}

type User {
  id: Int!
  posts(where: UserPostsWhereInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
}

input UserPostsWhereInput {
  id: IntFilter
  AND: [UserPostsWhereInput!]
  OR: [UserPostsWhereInput!]
  NOT: [UserPostsWhereInput!]
  user: UserPostsWhereInput
}
"
`;

exports[`it exposes findOne and findMany 1`] = `
"type Query {
  user(where: UserWhereUniqueInput!): User
  users(skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type User {
  id: Int!
}

input UserWhereUniqueInput {
  id: Int
}
"
`;

exports[`it exposes id ordering 1`] = `
"enum OrderByArg {
  asc
  desc
}

type Post {
  id: Int!
  name: String!
}

type Query {
  ok: Boolean!
}

type User {
  id: Int!
  posts(orderBy: UserPostsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
}

input UserPostsOrderByInput {
  id: OrderByArg
}
"
`;

exports[`it exposes only id filters 1`] = `
"input IntFilter {
  equals: Int
  not: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
}

type Post {
  id: Int!
  name: String!
}

type Query {
  ok: Boolean!
}

type User {
  id: Int!
  posts(where: UserPostsWhereInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
}

input UserPostsWhereInput {
  id: IntFilter
}
"
`;

exports[`it exposes only pagination on relations by default 1`] = `
"type Post {
  id: Int!
}

type Query {
  ok: Boolean!
}

type User {
  id: Int!
  posts(skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
}
"
`;

exports[`it exposes ordering only if ordering: true 1`] = `
"enum OrderByArg {
  asc
  desc
}

type Post {
  id: Int!
  name: String!
}

type Query {
  ok: Boolean!
}

type User {
  id: Int!
  posts(orderBy: UserPostsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
}

input UserPostsOrderByInput {
  id: OrderByArg
  name: OrderByArg
}
"
`;

exports[`simple schema 1`] = `
"type Query {
  ok: Boolean!
}

type User {
  id: Int!
  name: String!
}
"
`;
