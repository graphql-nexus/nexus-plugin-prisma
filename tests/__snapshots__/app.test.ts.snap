// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`integrates together: graphql schema 1`] = `
"

type AffectedRowsOutput {
  count: Int!
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

type Bubble {
  createdAt: DateTime!
  id: String!
  members(after: UserWhereUniqueInput, orderBy: [BubbleMembersOrderByInput!], where: BubbleMembersWhereInput): [User!]!
}

input BubbleCreateNestedOneWithoutMembersInput {
  connect: BubbleWhereUniqueInput
  connectOrCreate: BubbleCreateOrConnectWithoutMembersInput
  create: BubbleCreateWithoutMembersInput
}

input BubbleCreateOrConnectWithoutMembersInput {
  create: BubbleCreateWithoutMembersInput!
  where: BubbleWhereUniqueInput!
}

input BubbleCreateWithoutMembersInput {
  createdAt: DateTime
  id: String
  private: Boolean!
}

input BubbleMembersOrderByInput {
  firstName: SortOrder
  locationId: SortOrder
}

input BubbleMembersWhereInput {
  id: StringFilter
  location: LocationWhereInput
}

input BubbleWhereInput {
  AND: [BubbleWhereInput!]
  NOT: [BubbleWhereInput!]
  OR: [BubbleWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  members: UserListRelationFilter
  private: BoolFilter
}

input BubbleWhereUniqueInput {
  id: String
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input EnumPostStatusFieldUpdateOperationsInput {
  set: PostStatus
}

input EnumPostStatusFilter {
  equals: PostStatus
  in: [PostStatus!]
  not: NestedEnumPostStatusFilter
  notIn: [PostStatus!]
}

input FloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

type Location {
  city: String!
  country: String!
  id: Int!
}

input LocationCreateNestedOneWithoutUserInput {
  connect: LocationWhereUniqueInput
  connectOrCreate: LocationCreateOrConnectWithoutUserInput
  create: LocationCreateWithoutUserInput
}

input LocationCreateOrConnectWithoutUserInput {
  create: LocationCreateWithoutUserInput!
  where: LocationWhereUniqueInput!
}

input LocationCreateWithoutUserInput {
  city: String!
  country: String!
}

input LocationWhereInput {
  AND: [LocationWhereInput!]
  NOT: [LocationWhereInput!]
  OR: [LocationWhereInput!]
  User: UserListRelationFilter
  city: StringFilter
  country: StringFilter
  id: IntFilter
}

input LocationWhereUniqueInput {
  id: Int
}

type Mutation {
  createOnePost(data: PostCreateInput!): Post!
  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): AffectedRowsOutput!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedEnumPostStatusFilter {
  equals: PostStatus
  in: [PostStatus!]
  not: NestedEnumPostStatusFilter
  notIn: [PostStatus!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Post {
  authors: [User!]!
  id: Int!
  status: PostStatus!
}

input PostCreateInput {
  authors: UserCreateNestedManyWithoutPostsInput
  likes: Int!
  rating: Float!
  status: PostStatus!
}

input PostListRelationFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

input PostOrderByWithRelationInput {
  authors: UserOrderByRelationAggregateInput
  id: SortOrder
  likes: SortOrder
  rating: SortOrder
  status: SortOrder
}

enum PostStatus {
  DRAFT
  PUBLISHED
}

input PostUpdateManyMutationInput {
  likes: IntFieldUpdateOperationsInput
  rating: FloatFieldUpdateOperationsInput
  status: EnumPostStatusFieldUpdateOperationsInput
}

input PostWhereInput {
  AND: [PostWhereInput!]
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  authors: UserListRelationFilter
  id: IntFilter
  likes: IntFilter
  rating: FloatFilter
  status: EnumPostStatusFilter
}

input PostWhereUniqueInput {
  id: Int
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type User {
  firstName: String!
  id: String!
  location: Location!
  posts(after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int, last: Int, orderBy: [PostOrderByWithRelationInput!], where: PostWhereInput): [Post!]!
}

input UserCreateNestedManyWithoutPostsInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutPostsInput!]
  create: [UserCreateWithoutPostsInput!]
}

input UserCreateOrConnectWithoutPostsInput {
  create: UserCreateWithoutPostsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutPostsInput {
  Bubble: BubbleCreateNestedOneWithoutMembersInput
  firstName: String!
  id: String
  lastName: String!
  location: LocationCreateNestedOneWithoutUserInput!
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserWhereInput {
  AND: [UserWhereInput!]
  Bubble: BubbleWhereInput
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  bubbleId: StringNullableFilter
  firstName: StringFilter
  id: StringFilter
  lastName: StringFilter
  location: LocationWhereInput
  locationId: IntFilter
  posts: PostListRelationFilter
}

input UserWhereUniqueInput {
  id: String
}"
`;

exports[`integrates together: nexus prisma typegen 1`] = `
"import * as Typegen from '../../../src/typegen/static'
import * as Prisma from '@prisma/client';

// Pagination type
type Pagination = {
    first?: boolean
    last?: boolean
    before?: boolean
    after?: boolean
}

// Prisma custom scalar names
type CustomScalars = 'DateTime'

// Prisma model type definitions
interface PrismaModels {
  Bubble: Prisma.Bubble
  User: Prisma.User
  Location: Prisma.Location
  Post: Prisma.Post
}

// Prisma input types metadata
interface NexusPrismaInputs {
  Query: {
    bubbles: {
      filtering: 'AND' | 'OR' | 'NOT' | 'id' | 'createdAt' | 'members' | 'private'
      ordering: 'id' | 'createdAt' | 'members' | 'private'
    }
    groupByBubble: {
      filtering: 'AND' | 'OR' | 'NOT' | 'id' | 'createdAt' | 'members' | 'private'
      ordering: 'id' | 'createdAt' | 'private' | '_count' | '_max' | '_min'
    }
    users: {
      filtering: 'AND' | 'OR' | 'NOT' | 'id' | 'posts' | 'firstName' | 'lastName' | 'location' | 'Bubble' | 'bubbleId' | 'locationId'
      ordering: 'id' | 'posts' | 'firstName' | 'lastName' | 'location' | 'Bubble' | 'bubbleId' | 'locationId'
    }
    groupByUser: {
      filtering: 'AND' | 'OR' | 'NOT' | 'id' | 'posts' | 'firstName' | 'lastName' | 'location' | 'Bubble' | 'bubbleId' | 'locationId'
      ordering: 'id' | 'firstName' | 'lastName' | 'bubbleId' | 'locationId' | '_count' | '_avg' | '_max' | '_min' | '_sum'
    }
    locations: {
      filtering: 'AND' | 'OR' | 'NOT' | 'id' | 'country' | 'city' | 'User'
      ordering: 'id' | 'country' | 'city' | 'User'
    }
    groupByLocation: {
      filtering: 'AND' | 'OR' | 'NOT' | 'id' | 'country' | 'city' | 'User'
      ordering: 'id' | 'country' | 'city' | '_count' | '_avg' | '_max' | '_min' | '_sum'
    }
    posts: {
      filtering: 'AND' | 'OR' | 'NOT' | 'id' | 'authors' | 'rating' | 'likes' | 'status'
      ordering: 'id' | 'authors' | 'rating' | 'likes' | 'status'
    }
    groupByPost: {
      filtering: 'AND' | 'OR' | 'NOT' | 'id' | 'authors' | 'rating' | 'likes' | 'status'
      ordering: 'id' | 'rating' | 'likes' | 'status' | '_count' | '_avg' | '_max' | '_min' | '_sum'
    }
  },
  Bubble: {
    members: {
      filtering: 'AND' | 'OR' | 'NOT' | 'id' | 'posts' | 'firstName' | 'lastName' | 'location' | 'Bubble' | 'bubbleId' | 'locationId'
      ordering: 'id' | 'posts' | 'firstName' | 'lastName' | 'location' | 'Bubble' | 'bubbleId' | 'locationId'
    }
  }
  User: {
    posts: {
      filtering: 'AND' | 'OR' | 'NOT' | 'id' | 'authors' | 'rating' | 'likes' | 'status'
      ordering: 'id' | 'authors' | 'rating' | 'likes' | 'status'
    }
  }
  Location: {
    User: {
      filtering: 'AND' | 'OR' | 'NOT' | 'id' | 'posts' | 'firstName' | 'lastName' | 'location' | 'Bubble' | 'bubbleId' | 'locationId'
      ordering: 'id' | 'posts' | 'firstName' | 'lastName' | 'location' | 'Bubble' | 'bubbleId' | 'locationId'
    }
  }
  Post: {
    authors: {
      filtering: 'AND' | 'OR' | 'NOT' | 'id' | 'posts' | 'firstName' | 'lastName' | 'location' | 'Bubble' | 'bubbleId' | 'locationId'
      ordering: 'id' | 'posts' | 'firstName' | 'lastName' | 'location' | 'Bubble' | 'bubbleId' | 'locationId'
    }
  }
}

// Prisma output types metadata
interface NexusPrismaOutputs {
  Query: {
    aggregateBubble: 'AggregateBubble'
    bubbles: 'Bubble'
    bubble: 'Bubble'
    groupByBubble: 'BubbleGroupByOutputType'
    aggregateUser: 'AggregateUser'
    users: 'User'
    user: 'User'
    groupByUser: 'UserGroupByOutputType'
    aggregateLocation: 'AggregateLocation'
    locations: 'Location'
    location: 'Location'
    groupByLocation: 'LocationGroupByOutputType'
    aggregatePost: 'AggregatePost'
    posts: 'Post'
    post: 'Post'
    groupByPost: 'PostGroupByOutputType'
  },
  Mutation: {
    createOneBubble: 'Bubble'
    createManyBubble: 'AffectedRowsOutput'
    deleteOneBubble: 'Bubble'
    deleteManyBubble: 'AffectedRowsOutput'
    updateOneBubble: 'Bubble'
    updateManyBubble: 'AffectedRowsOutput'
    upsertOneBubble: 'Bubble'
    createOneUser: 'User'
    createManyUser: 'AffectedRowsOutput'
    deleteOneUser: 'User'
    deleteManyUser: 'AffectedRowsOutput'
    updateOneUser: 'User'
    updateManyUser: 'AffectedRowsOutput'
    upsertOneUser: 'User'
    createOneLocation: 'Location'
    createManyLocation: 'AffectedRowsOutput'
    deleteOneLocation: 'Location'
    deleteManyLocation: 'AffectedRowsOutput'
    updateOneLocation: 'Location'
    updateManyLocation: 'AffectedRowsOutput'
    upsertOneLocation: 'Location'
    createOnePost: 'Post'
    createManyPost: 'AffectedRowsOutput'
    deleteOnePost: 'Post'
    deleteManyPost: 'AffectedRowsOutput'
    updateOnePost: 'Post'
    updateManyPost: 'AffectedRowsOutput'
    upsertOnePost: 'Post'
  },
  Bubble: {
    id: 'String'
    createdAt: 'DateTime'
    members: 'User'
    private: 'Boolean'
  }
  User: {
    id: 'String'
    posts: 'Post'
    firstName: 'String'
    lastName: 'String'
    location: 'Location'
    Bubble: 'Bubble'
    bubbleId: 'String'
    locationId: 'Int'
  }
  Location: {
    id: 'Int'
    country: 'String'
    city: 'String'
    User: 'User'
  }
  Post: {
    id: 'Int'
    authors: 'User'
    rating: 'Float'
    likes: 'Int'
    status: 'PostStatus'
  }
}

// Helper to gather all methods relative to a model
interface NexusPrismaMethods {
  Bubble: Typegen.NexusPrismaFields<'Bubble'>
  User: Typegen.NexusPrismaFields<'User'>
  Location: Typegen.NexusPrismaFields<'Location'>
  Post: Typegen.NexusPrismaFields<'Post'>
  Query: Typegen.NexusPrismaFields<'Query'>
  Mutation: Typegen.NexusPrismaFields<'Mutation'>
}

interface NexusPrismaGenTypes {
  inputs: NexusPrismaInputs
  outputs: NexusPrismaOutputs
  methods: NexusPrismaMethods
  models: PrismaModels
  pagination: Pagination
  scalars: CustomScalars
}

declare global {
  interface NexusPrismaGen extends NexusPrismaGenTypes {}

  type NexusPrisma<
    TypeName extends string,
    ModelOrCrud extends 'model' | 'crud'
  > = Typegen.GetNexusPrisma<TypeName, ModelOrCrud>;
}
  "
`;

exports[`integrates together: prisma client dmmf 1`] = `
{
  "datamodel": {
    "enums": [
      {
        "dbName": null,
        "name": "PostStatus",
        "values": [
          {
            "dbName": null,
            "name": "DRAFT",
          },
          {
            "dbName": null,
            "name": "PUBLISHED",
          },
        ],
      },
    ],
    "models": [
      {
        "dbName": null,
        "fields": [
          {
            "default": {
              "args": [],
              "name": "uuid",
            },
            "hasDefaultValue": true,
            "isGenerated": false,
            "isId": true,
            "isList": false,
            "isReadOnly": false,
            "isRequired": true,
            "isUnique": false,
            "isUpdatedAt": false,
            "kind": "scalar",
            "name": "id",
            "type": "String",
          },
          {
            "default": {
              "args": [],
              "name": "now",
            },
            "hasDefaultValue": true,
            "isGenerated": false,
            "isId": false,
            "isList": false,
            "isReadOnly": false,
            "isRequired": true,
            "isUnique": false,
            "isUpdatedAt": false,
            "kind": "scalar",
            "name": "createdAt",
            "type": "DateTime",
          },
          {
            "hasDefaultValue": false,
            "isGenerated": false,
            "isId": false,
            "isList": true,
            "isReadOnly": false,
            "isRequired": true,
            "isUnique": false,
            "isUpdatedAt": false,
            "kind": "object",
            "name": "members",
            "relationFromFields": [],
            "relationName": "BubbleToUser",
            "relationToFields": [],
            "type": "User",
          },
          {
            "hasDefaultValue": false,
            "isGenerated": false,
            "isId": false,
            "isList": false,
            "isReadOnly": false,
            "isRequired": true,
            "isUnique": false,
            "isUpdatedAt": false,
            "kind": "scalar",
            "name": "private",
            "type": "Boolean",
          },
        ],
        "isGenerated": false,
        "name": "Bubble",
        "primaryKey": null,
        "uniqueFields": [],
        "uniqueIndexes": [],
      },
      {
        "dbName": null,
        "fields": [
          {
            "default": {
              "args": [],
              "name": "cuid",
            },
            "hasDefaultValue": true,
            "isGenerated": false,
            "isId": true,
            "isList": false,
            "isReadOnly": false,
            "isRequired": true,
            "isUnique": false,
            "isUpdatedAt": false,
            "kind": "scalar",
            "name": "id",
            "type": "String",
          },
          {
            "hasDefaultValue": false,
            "isGenerated": false,
            "isId": false,
            "isList": true,
            "isReadOnly": false,
            "isRequired": true,
            "isUnique": false,
            "isUpdatedAt": false,
            "kind": "object",
            "name": "posts",
            "relationFromFields": [],
            "relationName": "PostToUser",
            "relationToFields": [
              "id",
            ],
            "type": "Post",
          },
          {
            "hasDefaultValue": false,
            "isGenerated": false,
            "isId": false,
            "isList": false,
            "isReadOnly": false,
            "isRequired": true,
            "isUnique": false,
            "isUpdatedAt": false,
            "kind": "scalar",
            "name": "firstName",
            "type": "String",
          },
          {
            "hasDefaultValue": false,
            "isGenerated": false,
            "isId": false,
            "isList": false,
            "isReadOnly": false,
            "isRequired": true,
            "isUnique": false,
            "isUpdatedAt": false,
            "kind": "scalar",
            "name": "lastName",
            "type": "String",
          },
          {
            "hasDefaultValue": false,
            "isGenerated": false,
            "isId": false,
            "isList": false,
            "isReadOnly": false,
            "isRequired": true,
            "isUnique": false,
            "isUpdatedAt": false,
            "kind": "object",
            "name": "location",
            "relationFromFields": [
              "locationId",
            ],
            "relationName": "LocationToUser",
            "relationToFields": [
              "id",
            ],
            "type": "Location",
          },
          {
            "hasDefaultValue": false,
            "isGenerated": false,
            "isId": false,
            "isList": false,
            "isReadOnly": false,
            "isRequired": false,
            "isUnique": false,
            "isUpdatedAt": false,
            "kind": "object",
            "name": "Bubble",
            "relationFromFields": [
              "bubbleId",
            ],
            "relationName": "BubbleToUser",
            "relationToFields": [
              "id",
            ],
            "type": "Bubble",
          },
          {
            "hasDefaultValue": false,
            "isGenerated": false,
            "isId": false,
            "isList": false,
            "isReadOnly": true,
            "isRequired": false,
            "isUnique": false,
            "isUpdatedAt": false,
            "kind": "scalar",
            "name": "bubbleId",
            "type": "String",
          },
          {
            "hasDefaultValue": false,
            "isGenerated": false,
            "isId": false,
            "isList": false,
            "isReadOnly": true,
            "isRequired": true,
            "isUnique": false,
            "isUpdatedAt": false,
            "kind": "scalar",
            "name": "locationId",
            "type": "Int",
          },
        ],
        "isGenerated": false,
        "name": "User",
        "primaryKey": null,
        "uniqueFields": [],
        "uniqueIndexes": [],
      },
      {
        "dbName": null,
        "fields": [
          {
            "default": {
              "args": [],
              "name": "autoincrement",
            },
            "hasDefaultValue": true,
            "isGenerated": false,
            "isId": true,
            "isList": false,
            "isReadOnly": false,
            "isRequired": true,
            "isUnique": false,
            "isUpdatedAt": false,
            "kind": "scalar",
            "name": "id",
            "type": "Int",
          },
          {
            "hasDefaultValue": false,
            "isGenerated": false,
            "isId": false,
            "isList": false,
            "isReadOnly": false,
            "isRequired": true,
            "isUnique": false,
            "isUpdatedAt": false,
            "kind": "scalar",
            "name": "country",
            "type": "String",
          },
          {
            "hasDefaultValue": false,
            "isGenerated": false,
            "isId": false,
            "isList": false,
            "isReadOnly": false,
            "isRequired": true,
            "isUnique": false,
            "isUpdatedAt": false,
            "kind": "scalar",
            "name": "city",
            "type": "String",
          },
          {
            "hasDefaultValue": false,
            "isGenerated": false,
            "isId": false,
            "isList": true,
            "isReadOnly": false,
            "isRequired": true,
            "isUnique": false,
            "isUpdatedAt": false,
            "kind": "object",
            "name": "User",
            "relationFromFields": [],
            "relationName": "LocationToUser",
            "relationToFields": [],
            "type": "User",
          },
        ],
        "isGenerated": false,
        "name": "Location",
        "primaryKey": null,
        "uniqueFields": [],
        "uniqueIndexes": [],
      },
      {
        "dbName": null,
        "fields": [
          {
            "default": {
              "args": [],
              "name": "autoincrement",
            },
            "hasDefaultValue": true,
            "isGenerated": false,
            "isId": true,
            "isList": false,
            "isReadOnly": false,
            "isRequired": true,
            "isUnique": false,
            "isUpdatedAt": false,
            "kind": "scalar",
            "name": "id",
            "type": "Int",
          },
          {
            "hasDefaultValue": false,
            "isGenerated": false,
            "isId": false,
            "isList": true,
            "isReadOnly": false,
            "isRequired": true,
            "isUnique": false,
            "isUpdatedAt": false,
            "kind": "object",
            "name": "authors",
            "relationFromFields": [],
            "relationName": "PostToUser",
            "relationToFields": [
              "id",
            ],
            "type": "User",
          },
          {
            "hasDefaultValue": false,
            "isGenerated": false,
            "isId": false,
            "isList": false,
            "isReadOnly": false,
            "isRequired": true,
            "isUnique": false,
            "isUpdatedAt": false,
            "kind": "scalar",
            "name": "rating",
            "type": "Float",
          },
          {
            "hasDefaultValue": false,
            "isGenerated": false,
            "isId": false,
            "isList": false,
            "isReadOnly": false,
            "isRequired": true,
            "isUnique": false,
            "isUpdatedAt": false,
            "kind": "scalar",
            "name": "likes",
            "type": "Int",
          },
          {
            "hasDefaultValue": false,
            "isGenerated": false,
            "isId": false,
            "isList": false,
            "isReadOnly": false,
            "isRequired": true,
            "isUnique": false,
            "isUpdatedAt": false,
            "kind": "enum",
            "name": "status",
            "type": "PostStatus",
          },
        ],
        "isGenerated": false,
        "name": "Post",
        "primaryKey": null,
        "uniqueFields": [],
        "uniqueIndexes": [],
      },
    ],
    "types": [],
  },
  "mappings": {
    "modelOperations": [
      {
        "aggregate": "aggregateBubble",
        "create": "createOneBubble",
        "createMany": "createManyBubble",
        "delete": "deleteOneBubble",
        "deleteMany": "deleteManyBubble",
        "findFirst": "findFirstBubble",
        "findFirstOrThrow": "findFirstBubbleOrThrow",
        "findMany": "findManyBubble",
        "findUnique": "findUniqueBubble",
        "findUniqueOrThrow": "findUniqueBubbleOrThrow",
        "groupBy": "groupByBubble",
        "model": "Bubble",
        "plural": "bubbles",
        "update": "updateOneBubble",
        "updateMany": "updateManyBubble",
        "upsert": "upsertOneBubble",
      },
      {
        "aggregate": "aggregateUser",
        "create": "createOneUser",
        "createMany": "createManyUser",
        "delete": "deleteOneUser",
        "deleteMany": "deleteManyUser",
        "findFirst": "findFirstUser",
        "findFirstOrThrow": "findFirstUserOrThrow",
        "findMany": "findManyUser",
        "findUnique": "findUniqueUser",
        "findUniqueOrThrow": "findUniqueUserOrThrow",
        "groupBy": "groupByUser",
        "model": "User",
        "plural": "users",
        "update": "updateOneUser",
        "updateMany": "updateManyUser",
        "upsert": "upsertOneUser",
      },
      {
        "aggregate": "aggregateLocation",
        "create": "createOneLocation",
        "createMany": "createManyLocation",
        "delete": "deleteOneLocation",
        "deleteMany": "deleteManyLocation",
        "findFirst": "findFirstLocation",
        "findFirstOrThrow": "findFirstLocationOrThrow",
        "findMany": "findManyLocation",
        "findUnique": "findUniqueLocation",
        "findUniqueOrThrow": "findUniqueLocationOrThrow",
        "groupBy": "groupByLocation",
        "model": "Location",
        "plural": "locations",
        "update": "updateOneLocation",
        "updateMany": "updateManyLocation",
        "upsert": "upsertOneLocation",
      },
      {
        "aggregate": "aggregatePost",
        "create": "createOnePost",
        "createMany": "createManyPost",
        "delete": "deleteOnePost",
        "deleteMany": "deleteManyPost",
        "findFirst": "findFirstPost",
        "findFirstOrThrow": "findFirstPostOrThrow",
        "findMany": "findManyPost",
        "findUnique": "findUniquePost",
        "findUniqueOrThrow": "findUniquePostOrThrow",
        "groupBy": "groupByPost",
        "model": "Post",
        "plural": "posts",
        "update": "updateOnePost",
        "updateMany": "updateManyPost",
        "upsert": "upsertOnePost",
      },
    ],
    "otherOperations": {
      "read": [],
      "write": [
        "executeRaw",
        "queryRaw",
      ],
    },
  },
}
`;
