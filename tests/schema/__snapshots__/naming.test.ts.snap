// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generates publishers pluralized & camel-cased: schema 1`] = `
"type BatchPayload {
  count: Int!
}

input IntFilter {
  equals: Int
  not: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
}

type ModelName {
  id: Int!
}

input ModelNameCreateInput {
  name: String!
}

input ModelNameUpdateInput {
  id: Int
  name: String
}

input ModelNameUpdateManyMutationInput {
  id: Int
  name: String
}

input ModelNameWhereInput {
  id: IntFilter
  name: StringFilter
  AND: [ModelNameWhereInput!]
  OR: [ModelNameWhereInput!]
  NOT: [ModelNameWhereInput!]
}

input ModelNameWhereUniqueInput {
  id: Int
}

type Mutation {
  createOneModelName(data: ModelNameCreateInput!): ModelName!
  deleteOneModelName(where: ModelNameWhereUniqueInput!): ModelName
  updateOneModelName(data: ModelNameUpdateInput!, where: ModelNameWhereUniqueInput!): ModelName
  upsertOneModelName(where: ModelNameWhereUniqueInput!, create: ModelNameCreateInput!, update: ModelNameUpdateInput!): ModelName!
  updateManyModelName(data: ModelNameUpdateManyMutationInput!, where: ModelNameWhereInput): BatchPayload!
}

type Query {
  modelName(where: ModelNameWhereUniqueInput!): ModelName
  modelNames(cursor: ModelNameWhereUniqueInput, take: Int, skip: Int): [ModelName!]!
}

input StringFilter {
  equals: String
  not: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
}
"
`;

exports[`generates publishers pluralized & camel-cased: typegen 1`] = `
"import * as prisma from '@prisma/client';
import { core } from '@nexus/schema';
import { GraphQLResolveInfo } from 'graphql';

// Types helpers
type IsModelNameExistsInGraphQLTypes<ReturnType> =
  ReturnType extends core.GetGen<'objectNames'>
    ? true
    : false

type NexusPrismaScalarOpts<TypeName extends string, MethodName extends string, Alias extends string | undefined> = {
  alias?: Alias
} & NexusGenPluginFieldConfig<TypeName, Alias extends undefined ? MethodName : Alias>

type Pagination = {
  skip?: boolean
  take?: boolean
  cursor?: boolean
}

type RootObjectTypes = Pick<core.GetGen<'rootTypes'>, core.GetGen<'objectNames'>>

/**
 * Determine if \`B\` is a subset (or equivalent to) of \`A\`.
*/
type IsSubset<A, B> =
  keyof A extends never ? false :
  B extends A           ? true  :
                          false

type OmitByValue<T, ValueType> =
  Pick<T, { [Key in keyof T]: T[Key] extends ValueType ? never : Key }[keyof T]>

type GetSubsetTypes<ModelName extends string> =
  keyof OmitByValue<
    {
      [P in keyof RootObjectTypes]:
        // if
        ModelName extends keyof ModelTypes
        ? IsSubset<RootObjectTypes[P], ModelTypes[ModelName]> extends true
        // else if
        ? RootObjectTypes[P]
        : never
        // else
        : never
    },
    never
  >

type SubsetTypes<ModelName extends string> =
  GetSubsetTypes<ModelName> extends never
    ? \`ERROR: No subset types are available. Please make sure that one of your GraphQL type is a subset of your t.model('<ModelName>')\`
    : GetSubsetTypes<ModelName>

type DynamicRequiredType<ReturnType extends string> =
  IsModelNameExistsInGraphQLTypes<ReturnType> extends true
    ? { type?: SubsetTypes<ReturnType> }
    : { type: SubsetTypes<ReturnType> }

type GetNexusPrismaInput<
  ModelName extends string,
  MethodName extends string,
  InputName extends 'filtering' | 'ordering'
> =
  ModelName extends keyof NexusPrismaInputs
    ? MethodName extends keyof NexusPrismaInputs[ModelName]
      ? InputName extends keyof NexusPrismaInputs[ModelName][MethodName]
        ? NexusPrismaInputs[ModelName][MethodName][InputName] & string
        : never
      : never
    : never

/**
 *  Represents arguments required by Prisma Client JS that will
 *  be derived from a request's input (args, context, and info)
 *  and omitted from the GraphQL API. The object itself maps the
 *  names of these args to a function that takes an object representing
 *  the request's input and returns the value to pass to the prisma
 *  arg of the same name.
 */
export type LocalComputedInputs<MethodName extends string> =
  Record<
    string,
    (params: LocalMutationResolverParams<MethodName>) => unknown
  >

export type GlobalComputedInputs =
  Record<
    string,
    (params: GlobalMutationResolverParams) => unknown
  >

type BaseMutationResolverParams = {
  info: GraphQLResolveInfo
  ctx: Context
}

export type GlobalMutationResolverParams =
  BaseMutationResolverParams & {
    args: Record<string, any> & { data: unknown }
  }

export type LocalMutationResolverParams<MethodName extends string> =
  BaseMutationResolverParams & {
    args: MethodName extends keyof core.GetGen2<'argTypes', 'Mutation'>
      ? core.GetGen3<'argTypes', 'Mutation', MethodName>
      : any
  }

export type Context = core.GetGen<'context'>

type BaseRelationOptions<TypeName extends string, MethodName extends string, Alias extends string | undefined, ReturnType extends string> =
  DynamicRequiredType<ReturnType> & {
    alias?: Alias
    computedInputs?: LocalComputedInputs<MethodName>
  } & NexusGenPluginFieldConfig<TypeName, Alias extends undefined ? MethodName : Alias>

// If GetNexusPrismaInput returns never, it means there are no filtering/ordering args for it.
type NexusPrismaRelationOpts<ModelName extends string, MethodName extends string, Alias extends string | undefined, ReturnType extends string> =
  GetNexusPrismaInput<ModelName, MethodName, 'filtering'> extends never
  ? BaseRelationOptions<ModelName, MethodName, Alias, ReturnType>
  // else if
  : GetNexusPrismaInput<ModelName, MethodName, 'ordering'> extends never
  ? BaseRelationOptions<ModelName, MethodName, Alias, ReturnType>
  // else
  : BaseRelationOptions<ModelName, MethodName, Alias, ReturnType> & {
      filtering?:
        | boolean
        | Partial<Record<GetNexusPrismaInput<ModelName, MethodName, 'filtering'>, boolean>>
      ordering?:
        | boolean
        | Partial<Record<GetNexusPrismaInput<ModelName, MethodName, 'ordering'>, boolean>>
      pagination?: boolean | Pagination
    }

type IsScalar<TypeName extends string> = TypeName extends core.GetGen<'scalarNames'>
  ? true
  : false;

type IsObject<Name extends string> = Name extends core.GetGen<'objectNames'>
  ? true
  : false

type IsEnum<Name extends string> = Name extends core.GetGen<'enumNames'>
  ? true
  : false

type IsInputObject<Name extends string> = Name extends core.GetGen<'inputNames'>
  ? true
  : false

/**
 * The kind that a GraphQL type may be.
 */
type Kind = 'Enum' | 'Object' | 'Scalar' | 'InputObject'

/**
 * Helper to safely reference a Kind type. For example instead of the following
 * which would admit a typo:
 *
 * \`\`\`ts
 * type Foo = Bar extends 'scalar' ? ...
 * \`\`\`
 *
 * You can do this which guarantees a correct reference:
 *
 * \`\`\`ts
 * type Foo = Bar extends AKind<'Scalar'> ? ...
 * \`\`\`
 *
 */
type AKind<T extends Kind> = T

type GetKind<Name extends string> =
  IsEnum<Name> extends true
  ? 'Enum'
  // else if
  : IsScalar<Name> extends true
  ? 'Scalar'
  // else if
  : IsObject<Name> extends true
  ? 'Object'
  // else if
  : IsInputObject<Name> extends true
  ? 'InputObject'
  // else
  // FIXME should be \`never\`, but GQL objects named differently
  // than backing type fall into this branch
  : 'Object'

type NexusPrismaFields<ModelName extends keyof NexusPrismaTypes & string> = {
  [MethodName in keyof NexusPrismaTypes[ModelName] & string]:
    NexusPrismaMethod<
      ModelName,
      MethodName,
      GetKind<NexusPrismaTypes[ModelName][MethodName] & string> // Is the return type a scalar?
    >
}

type NexusPrismaMethod<
  ModelName extends keyof NexusPrismaTypes,
  MethodName extends keyof NexusPrismaTypes[ModelName] & string,
  ThisKind extends Kind,
  ReturnType extends string = NexusPrismaTypes[ModelName][MethodName] & string
> =
  ThisKind extends AKind<'Enum'>
  ? () => NexusPrismaFields<ModelName>
  // else if
  // if scalar return scalar opts
  : ThisKind extends AKind<'Scalar'>
  ? <Alias extends string | undefined = undefined>(opts?: NexusPrismaScalarOpts<ModelName, MethodName, Alias>) => NexusPrismaFields<ModelName>
  // else if
  // if model name has a mapped graphql types then make opts optional
  : IsModelNameExistsInGraphQLTypes<ReturnType> extends true
  ? <Alias extends string | undefined = undefined>(opts?: NexusPrismaRelationOpts<ModelName, MethodName, Alias, ReturnType>) => NexusPrismaFields<ModelName>
  // else
  // force use input the related graphql type -> { type: '...' }
  : <Alias extends string | undefined = undefined>(opts: NexusPrismaRelationOpts<ModelName, MethodName, Alias, ReturnType>) => NexusPrismaFields<ModelName>

type GetNexusPrismaMethod<TypeName extends string> = TypeName extends keyof NexusPrismaMethods
  ? NexusPrismaMethods[TypeName]
  : <CustomTypeName extends keyof ModelTypes>(typeName: CustomTypeName) => NexusPrismaMethods[CustomTypeName]

type GetNexusPrisma<TypeName extends string, ModelOrCrud extends 'model' | 'crud'> =
  ModelOrCrud extends 'model'
    ? TypeName extends 'Mutation'
      ? never
      : TypeName extends 'Query'
        ? never
        : GetNexusPrismaMethod<TypeName>
    : ModelOrCrud extends 'crud'
      ? TypeName extends 'Mutation'
        ? GetNexusPrismaMethod<TypeName>
        : TypeName extends 'Query'
          ? GetNexusPrismaMethod<TypeName>
          : never
      : never

// Generated
interface ModelTypes {
  ModelName: prisma.ModelName
}
  
interface NexusPrismaInputs {
  Query: {
    modelNames: {
  filtering: 'id' | 'name' | 'AND' | 'OR' | 'NOT'
  ordering: 'id' | 'name'
}

  },
    ModelName: {


  }
}

interface NexusPrismaTypes {
  Query: {
    modelName: 'ModelName'
    modelNames: 'ModelName'

  },
  Mutation: {
    createOneModelName: 'ModelName'
    updateOneModelName: 'ModelName'
    updateManyModelName: 'BatchPayload'
    deleteOneModelName: 'ModelName'
    deleteManyModelName: 'BatchPayload'
    upsertOneModelName: 'ModelName'

  },
  ModelName: {
    id: 'Int'
    name: 'String'

}
}

interface NexusPrismaMethods {
  ModelName: NexusPrismaFields<'ModelName'>
  Query: NexusPrismaFields<'Query'>
  Mutation: NexusPrismaFields<'Mutation'>
}
  

declare global {
  type NexusPrisma<
    TypeName extends string,
    ModelOrCrud extends 'model' | 'crud'
  > = GetNexusPrisma<TypeName, ModelOrCrud>;
}
  "
`;
