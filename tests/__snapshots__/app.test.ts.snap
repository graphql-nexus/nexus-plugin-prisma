// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`integrates together: graphql schema 1`] = `
"### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type BatchPayload {
  count: Int!
}

type Bubble {
  createdAt: DateTime!
  id: UUID!
  members(first: Int, orderBy: BubbleMembersOrderByInput, where: BubbleMembersWhereInput): [User!]!
}

input BubbleCreateOneWithoutBubbleInput {
  connect: BubbleWhereUniqueInput
  create: BubbleCreateWithoutMembersInput
}

input BubbleCreateWithoutMembersInput {
  createdAt: DateTime
  id: UUID
}

input BubbleMembersOrderByInput {
  firstName: OrderByArg
}

input BubbleMembersWhereInput {
  id: StringFilter
}

input BubbleWhereInput {
  AND: [BubbleWhereInput!]
  createdAt: DateTimeFilter
  id: UUIDFilter
  members: UserFilter
  NOT: [BubbleWhereInput!]
  OR: [BubbleWhereInput!]
}

input BubbleWhereUniqueInput {
  id: UUID
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Mutation {
  createOnePost(data: PostCreateInput!): Post!
  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
}

enum OrderByArg {
  asc
  desc
}

type Post {
  authors: [User!]!
  status: PostStatus!
}

input PostCreateInput {
  authors: UserCreateManyWithoutAuthorsInput
  rating: Float!
  status: PostStatus!
}

input PostFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

input PostOrderByInput {
  id: OrderByArg
  rating: OrderByArg
  status: OrderByArg
}

enum PostStatus {
  DRAFT
  PUBLISHED
}

input PostUpdateManyMutationInput {
  id: Int
  rating: Float
  status: PostStatus
}

input PostWhereInput {
  AND: [PostWhereInput!]
  authors: UserFilter
  id: IntFilter
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  rating: FloatFilter
  status: PostStatus
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(after: String, before: String, first: Int, last: Int, skip: Int): [User!]!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  firstName: String!
  id: ID!
  posts(after: String, before: String, first: Int, last: Int, orderBy: PostOrderByInput, skip: Int, where: PostWhereInput): [Post!]!
}

input UserCreateManyWithoutAuthorsInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutPostsInput!]
}

input UserCreateWithoutPostsInput {
  bubble: BubbleCreateOneWithoutBubbleInput
  firstName: String!
  id: ID
  lastName: String!
}

input UserFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  bubble: BubbleWhereInput
  firstName: StringFilter
  id: StringFilter
  lastName: StringFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  posts: PostFilter
}

input UserWhereUniqueInput {
  id: ID
}

scalar UUID

input UUIDFilter {
  contains: UUID
  endsWith: UUID
  equals: UUID
  gt: UUID
  gte: UUID
  in: [UUID!]
  lt: UUID
  lte: UUID
  not: UUID
  notIn: [UUID!]
  startsWith: UUID
}
"
`;

exports[`integrates together: nexus core typegen 1`] = `
"/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */





declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  BubbleCreateOneWithoutBubbleInput: { // input type
    connect?: NexusGenInputs['BubbleWhereUniqueInput'] | null; // BubbleWhereUniqueInput
    create?: NexusGenInputs['BubbleCreateWithoutMembersInput'] | null; // BubbleCreateWithoutMembersInput
  }
  BubbleCreateWithoutMembersInput: { // input type
    createdAt?: any | null; // DateTime
    id?: any | null; // UUID
  }
  BubbleMembersOrderByInput: { // input type
    firstName?: NexusGenEnums['OrderByArg'] | null; // OrderByArg
  }
  BubbleMembersWhereInput: { // input type
    id?: NexusGenInputs['StringFilter'] | null; // StringFilter
  }
  BubbleWhereInput: { // input type
    AND?: NexusGenInputs['BubbleWhereInput'][] | null; // [BubbleWhereInput!]
    createdAt?: NexusGenInputs['DateTimeFilter'] | null; // DateTimeFilter
    id?: NexusGenInputs['UUIDFilter'] | null; // UUIDFilter
    members?: NexusGenInputs['UserFilter'] | null; // UserFilter
    NOT?: NexusGenInputs['BubbleWhereInput'][] | null; // [BubbleWhereInput!]
    OR?: NexusGenInputs['BubbleWhereInput'][] | null; // [BubbleWhereInput!]
  }
  BubbleWhereUniqueInput: { // input type
    id?: any | null; // UUID
  }
  DateTimeFilter: { // input type
    equals?: any | null; // DateTime
    gt?: any | null; // DateTime
    gte?: any | null; // DateTime
    in?: any[] | null; // [DateTime!]
    lt?: any | null; // DateTime
    lte?: any | null; // DateTime
    not?: any | null; // DateTime
    notIn?: any[] | null; // [DateTime!]
  }
  FloatFilter: { // input type
    equals?: number | null; // Float
    gt?: number | null; // Float
    gte?: number | null; // Float
    in?: number[] | null; // [Float!]
    lt?: number | null; // Float
    lte?: number | null; // Float
    not?: number | null; // Float
    notIn?: number[] | null; // [Float!]
  }
  IntFilter: { // input type
    equals?: number | null; // Int
    gt?: number | null; // Int
    gte?: number | null; // Int
    in?: number[] | null; // [Int!]
    lt?: number | null; // Int
    lte?: number | null; // Int
    not?: number | null; // Int
    notIn?: number[] | null; // [Int!]
  }
  PostCreateInput: { // input type
    authors?: NexusGenInputs['UserCreateManyWithoutAuthorsInput'] | null; // UserCreateManyWithoutAuthorsInput
    rating: number; // Float!
    status: NexusGenEnums['PostStatus']; // PostStatus!
  }
  PostFilter: { // input type
    every?: NexusGenInputs['PostWhereInput'] | null; // PostWhereInput
    none?: NexusGenInputs['PostWhereInput'] | null; // PostWhereInput
    some?: NexusGenInputs['PostWhereInput'] | null; // PostWhereInput
  }
  PostOrderByInput: { // input type
    id?: NexusGenEnums['OrderByArg'] | null; // OrderByArg
    rating?: NexusGenEnums['OrderByArg'] | null; // OrderByArg
    status?: NexusGenEnums['OrderByArg'] | null; // OrderByArg
  }
  PostUpdateManyMutationInput: { // input type
    id?: number | null; // Int
    rating?: number | null; // Float
    status?: NexusGenEnums['PostStatus'] | null; // PostStatus
  }
  PostWhereInput: { // input type
    AND?: NexusGenInputs['PostWhereInput'][] | null; // [PostWhereInput!]
    authors?: NexusGenInputs['UserFilter'] | null; // UserFilter
    id?: NexusGenInputs['IntFilter'] | null; // IntFilter
    NOT?: NexusGenInputs['PostWhereInput'][] | null; // [PostWhereInput!]
    OR?: NexusGenInputs['PostWhereInput'][] | null; // [PostWhereInput!]
    rating?: NexusGenInputs['FloatFilter'] | null; // FloatFilter
    status?: NexusGenEnums['PostStatus'] | null; // PostStatus
  }
  StringFilter: { // input type
    contains?: string | null; // String
    endsWith?: string | null; // String
    equals?: string | null; // String
    gt?: string | null; // String
    gte?: string | null; // String
    in?: string[] | null; // [String!]
    lt?: string | null; // String
    lte?: string | null; // String
    not?: string | null; // String
    notIn?: string[] | null; // [String!]
    startsWith?: string | null; // String
  }
  UUIDFilter: { // input type
    contains?: any | null; // UUID
    endsWith?: any | null; // UUID
    equals?: any | null; // UUID
    gt?: any | null; // UUID
    gte?: any | null; // UUID
    in?: any[] | null; // [UUID!]
    lt?: any | null; // UUID
    lte?: any | null; // UUID
    not?: any | null; // UUID
    notIn?: any[] | null; // [UUID!]
    startsWith?: any | null; // UUID
  }
  UserCreateManyWithoutAuthorsInput: { // input type
    connect?: NexusGenInputs['UserWhereUniqueInput'][] | null; // [UserWhereUniqueInput!]
    create?: NexusGenInputs['UserCreateWithoutPostsInput'][] | null; // [UserCreateWithoutPostsInput!]
  }
  UserCreateWithoutPostsInput: { // input type
    bubble?: NexusGenInputs['BubbleCreateOneWithoutBubbleInput'] | null; // BubbleCreateOneWithoutBubbleInput
    firstName: string; // String!
    id?: string | null; // ID
    lastName: string; // String!
  }
  UserFilter: { // input type
    every?: NexusGenInputs['UserWhereInput'] | null; // UserWhereInput
    none?: NexusGenInputs['UserWhereInput'] | null; // UserWhereInput
    some?: NexusGenInputs['UserWhereInput'] | null; // UserWhereInput
  }
  UserWhereInput: { // input type
    AND?: NexusGenInputs['UserWhereInput'][] | null; // [UserWhereInput!]
    bubble?: NexusGenInputs['BubbleWhereInput'] | null; // BubbleWhereInput
    firstName?: NexusGenInputs['StringFilter'] | null; // StringFilter
    id?: NexusGenInputs['StringFilter'] | null; // StringFilter
    lastName?: NexusGenInputs['StringFilter'] | null; // StringFilter
    NOT?: NexusGenInputs['UserWhereInput'][] | null; // [UserWhereInput!]
    OR?: NexusGenInputs['UserWhereInput'][] | null; // [UserWhereInput!]
    posts?: NexusGenInputs['PostFilter'] | null; // PostFilter
  }
  UserWhereUniqueInput: { // input type
    id?: string | null; // ID
  }
}

export interface NexusGenEnums {
  OrderByArg: \\"asc\\" | \\"desc\\"
  PostStatus: \\"DRAFT\\" | \\"PUBLISHED\\"
}

export interface NexusGenRootTypes {
  BatchPayload: { // root type
    count: number; // Int!
  }
  Bubble: { // root type
    createdAt: any; // DateTime!
    id: any; // UUID!
  }
  Mutation: {};
  Post: { // root type
    status: NexusGenEnums['PostStatus']; // PostStatus!
  }
  Query: {};
  User: { // root type
    firstName: string; // String!
    id: string; // ID!
  }
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  DateTime: any;
  UUID: any;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  BubbleCreateOneWithoutBubbleInput: NexusGenInputs['BubbleCreateOneWithoutBubbleInput'];
  BubbleCreateWithoutMembersInput: NexusGenInputs['BubbleCreateWithoutMembersInput'];
  BubbleMembersOrderByInput: NexusGenInputs['BubbleMembersOrderByInput'];
  BubbleMembersWhereInput: NexusGenInputs['BubbleMembersWhereInput'];
  BubbleWhereInput: NexusGenInputs['BubbleWhereInput'];
  BubbleWhereUniqueInput: NexusGenInputs['BubbleWhereUniqueInput'];
  DateTimeFilter: NexusGenInputs['DateTimeFilter'];
  FloatFilter: NexusGenInputs['FloatFilter'];
  IntFilter: NexusGenInputs['IntFilter'];
  PostCreateInput: NexusGenInputs['PostCreateInput'];
  PostFilter: NexusGenInputs['PostFilter'];
  PostOrderByInput: NexusGenInputs['PostOrderByInput'];
  PostUpdateManyMutationInput: NexusGenInputs['PostUpdateManyMutationInput'];
  PostWhereInput: NexusGenInputs['PostWhereInput'];
  StringFilter: NexusGenInputs['StringFilter'];
  UUIDFilter: NexusGenInputs['UUIDFilter'];
  UserCreateManyWithoutAuthorsInput: NexusGenInputs['UserCreateManyWithoutAuthorsInput'];
  UserCreateWithoutPostsInput: NexusGenInputs['UserCreateWithoutPostsInput'];
  UserFilter: NexusGenInputs['UserFilter'];
  UserWhereInput: NexusGenInputs['UserWhereInput'];
  UserWhereUniqueInput: NexusGenInputs['UserWhereUniqueInput'];
  OrderByArg: NexusGenEnums['OrderByArg'];
  PostStatus: NexusGenEnums['PostStatus'];
}

export interface NexusGenFieldTypes {
  BatchPayload: { // field return type
    count: number; // Int!
  }
  Bubble: { // field return type
    createdAt: any; // DateTime!
    id: any; // UUID!
    members: NexusGenRootTypes['User'][]; // [User!]!
  }
  Mutation: { // field return type
    createOnePost: NexusGenRootTypes['Post']; // Post!
    updateManyPost: NexusGenRootTypes['BatchPayload']; // BatchPayload!
  }
  Post: { // field return type
    authors: NexusGenRootTypes['User'][]; // [User!]!
    status: NexusGenEnums['PostStatus']; // PostStatus!
  }
  Query: { // field return type
    user: NexusGenRootTypes['User'] | null; // User
    users: NexusGenRootTypes['User'][]; // [User!]!
  }
  User: { // field return type
    firstName: string; // String!
    id: string; // ID!
    posts: NexusGenRootTypes['Post'][]; // [Post!]!
  }
}

export interface NexusGenArgTypes {
  Bubble: {
    members: { // args
      first?: number | null; // Int
      orderBy?: NexusGenInputs['BubbleMembersOrderByInput'] | null; // BubbleMembersOrderByInput
      where?: NexusGenInputs['BubbleMembersWhereInput'] | null; // BubbleMembersWhereInput
    }
  }
  Mutation: {
    createOnePost: { // args
      data: NexusGenInputs['PostCreateInput']; // PostCreateInput!
    }
    updateManyPost: { // args
      data: NexusGenInputs['PostUpdateManyMutationInput']; // PostUpdateManyMutationInput!
      where?: NexusGenInputs['PostWhereInput'] | null; // PostWhereInput
    }
  }
  Query: {
    user: { // args
      where: NexusGenInputs['UserWhereUniqueInput']; // UserWhereUniqueInput!
    }
    users: { // args
      after?: string | null; // String
      before?: string | null; // String
      first?: number | null; // Int
      last?: number | null; // Int
      skip?: number | null; // Int
    }
  }
  User: {
    posts: { // args
      after?: string | null; // String
      before?: string | null; // String
      first?: number | null; // Int
      last?: number | null; // Int
      orderBy?: NexusGenInputs['PostOrderByInput'] | null; // PostOrderByInput
      skip?: number | null; // Int
      where?: NexusGenInputs['PostWhereInput'] | null; // PostWhereInput
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = \\"BatchPayload\\" | \\"Bubble\\" | \\"Mutation\\" | \\"Post\\" | \\"Query\\" | \\"User\\";

export type NexusGenInputNames = \\"BubbleCreateOneWithoutBubbleInput\\" | \\"BubbleCreateWithoutMembersInput\\" | \\"BubbleMembersOrderByInput\\" | \\"BubbleMembersWhereInput\\" | \\"BubbleWhereInput\\" | \\"BubbleWhereUniqueInput\\" | \\"DateTimeFilter\\" | \\"FloatFilter\\" | \\"IntFilter\\" | \\"PostCreateInput\\" | \\"PostFilter\\" | \\"PostOrderByInput\\" | \\"PostUpdateManyMutationInput\\" | \\"PostWhereInput\\" | \\"StringFilter\\" | \\"UUIDFilter\\" | \\"UserCreateManyWithoutAuthorsInput\\" | \\"UserCreateWithoutPostsInput\\" | \\"UserFilter\\" | \\"UserWhereInput\\" | \\"UserWhereUniqueInput\\";

export type NexusGenEnumNames = \\"OrderByArg\\" | \\"PostStatus\\";

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = \\"Boolean\\" | \\"DateTime\\" | \\"Float\\" | \\"ID\\" | \\"Int\\" | \\"String\\" | \\"UUID\\";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}"
`;

exports[`integrates together: nexus prisma typegen 1`] = `
"import * as photon from '@generated/photon';
import { core } from 'nexus';
// Types helpers
  type IsModelNameExistsInGraphQLTypes<
  ReturnType extends any
> = ReturnType extends core.GetGen<'objectNames'> ? true : false;

type NexusPrismaScalarOpts = {
  alias?: string;
};

type Pagination = {
  first?: boolean;
  last?: boolean;
  before?: boolean;
  after?: boolean;
  skip?: boolean;
};

type RootObjectTypes = Pick<
  core.GetGen<'rootTypes'>,
  core.GetGen<'objectNames'>
>;

/**
 * Determine if \`B\` is a subset (or equivalent to) of \`A\`.
*/
type IsSubset<A, B> = keyof A extends never
  ? false
  : B extends A
  ? true
  : false;

type OmitByValue<T, ValueType> = Pick<
  T,
  { [Key in keyof T]: T[Key] extends ValueType ? never : Key }[keyof T]
>;

type GetSubsetTypes<ModelName extends any> = keyof OmitByValue<
  {
    [P in keyof RootObjectTypes]: ModelName extends keyof ModelTypes
      ? IsSubset<RootObjectTypes[P], ModelTypes[ModelName]> extends true
        ? RootObjectTypes[P]
        : never
      : never;
  },
  never
>;

type SubsetTypes<ModelName extends any> = GetSubsetTypes<
  ModelName
> extends never
  ? \`ERROR: No subset types are available. Please make sure that one of your GraphQL type is a subset of your t.model('<ModelName>')\`
  : GetSubsetTypes<ModelName>;

type DynamicRequiredType<ReturnType extends any> = IsModelNameExistsInGraphQLTypes<
  ReturnType
> extends true
  ? { type?: SubsetTypes<ReturnType> }
  : { type: SubsetTypes<ReturnType> };

type GetNexusPrismaInput<
  ModelName extends any,
  MethodName extends any,
  InputName extends 'filtering' | 'ordering'
> = ModelName extends keyof NexusPrismaInputs
  ? MethodName extends keyof NexusPrismaInputs[ModelName]
    ? NexusPrismaInputs[ModelName][MethodName][InputName]
    : never
  : never;

type NexusPrismaRelationOpts<
  ModelName extends any,
  MethodName extends any,
  ReturnType extends any
> = GetNexusPrismaInput<
  // If GetNexusPrismaInput returns never, it means there are no filtering/ordering args for it. So just use \`alias\` and \`type\`
  ModelName,
  MethodName,
  'filtering'
> extends never
  ? {
      alias?: string;
    } & DynamicRequiredType<ReturnType>
  : {
      alias?: string;
      filtering?:
        | boolean
        | Partial<
            Record<
              GetNexusPrismaInput<ModelName, MethodName, 'filtering'>,
              boolean
            >
          >;
      ordering?:
        | boolean
        | Partial<
            Record<
              GetNexusPrismaInput<ModelName, MethodName, 'ordering'>,
              boolean
            >
          >;
      pagination?: boolean | Pagination;
    } & DynamicRequiredType<ReturnType>;

type IsScalar<TypeName extends any> = TypeName extends core.GetGen<'scalarNames'>
  ? true
  : false;

type IsObject<Name extends any> = Name extends core.GetGen<'objectNames'>
  ? true
  : false

type IsEnum<Name extends any> = Name extends core.GetGen<'enumNames'>
  ? true
  : false

type IsInputObject<Name extends any> = Name extends core.GetGen<'inputNames'>
  ? true
  : false

/**
 * The kind that a GraphQL type may be.
 */
type Kind = 'Enum' | 'Object' | 'Scalar' | 'InputObject'

/**
 * Helper to safely reference a Kind type. For example instead of the following
 * which would admit a typo:
 *
 * \`\`\`ts
 * type Foo = Bar extends 'scalar' ? ...
 * \`\`\`
 *
 * You can do this which guarantees a correct reference:
 *
 * \`\`\`ts
 * type Foo = Bar extends AKind<'Scalar'> ? ...
 * \`\`\`
 *
 */
type AKind<T extends Kind> = T

type GetKind<Name extends any> = IsEnum<Name> extends true
  ? 'Enum'
  : IsScalar<Name> extends true
  ? 'Scalar'
  : IsObject<Name> extends true
  ? 'Object'
  : IsInputObject<Name> extends true
  ? 'InputObject'
  // FIXME should be \`never\`, but GQL objects named differently
  // than backing type fall into this branch
  : 'Object'

type NexusPrismaFields<ModelName extends keyof NexusPrismaTypes> = {
  [MethodName in keyof NexusPrismaTypes[ModelName]]: NexusPrismaMethod<
    ModelName,
    MethodName,
    GetKind<NexusPrismaTypes[ModelName][MethodName]> // Is the return type a scalar?
  >;
};

type NexusPrismaMethod<
  ModelName extends keyof NexusPrismaTypes,
  MethodName extends keyof NexusPrismaTypes[ModelName],
  ThisKind extends Kind,
  ReturnType extends any = NexusPrismaTypes[ModelName][MethodName]
> =
  ThisKind extends AKind<'Enum'>
  ? () => NexusPrismaFields<ModelName>
  : ThisKind extends AKind<'Scalar'>
  ? (opts?: NexusPrismaScalarOpts) => NexusPrismaFields<ModelName> // Return optional scalar opts
  : IsModelNameExistsInGraphQLTypes<ReturnType> extends true // If model name has a mapped graphql types
  ? (
      opts?: NexusPrismaRelationOpts<ModelName, MethodName, ReturnType>
    ) => NexusPrismaFields<ModelName> // Then make opts optional
  : (
      opts: NexusPrismaRelationOpts<ModelName, MethodName, ReturnType>
    ) => NexusPrismaFields<ModelName>; // Else force use input the related graphql type -> { type: '...' }

type GetNexusPrismaMethod<
  TypeName extends string
> = TypeName extends keyof NexusPrismaMethods
  ? NexusPrismaMethods[TypeName]
  : <CustomTypeName extends keyof ModelTypes>(
      typeName: CustomTypeName
    ) => NexusPrismaMethods[CustomTypeName];

type GetNexusPrisma<
  TypeName extends string,
  ModelOrCrud extends 'model' | 'crud'
> = ModelOrCrud extends 'model'
  ? TypeName extends 'Mutation'
    ? never
    : TypeName extends 'Query'
    ? never
    : GetNexusPrismaMethod<TypeName>
  : ModelOrCrud extends 'crud'
  ? TypeName extends 'Mutation'
    ? GetNexusPrismaMethod<TypeName>
    : TypeName extends 'Query'
    ? GetNexusPrismaMethod<TypeName>
    : never
  : never;
  

// Generated
interface ModelTypes {
  Bubble: photon.Bubble
  User: photon.User
  Post: photon.Post
}
  
interface NexusPrismaInputs {
  Query: {
    bubbles: {
  filtering: 'id' | 'createdAt' | 'members' | 'AND' | 'OR' | 'NOT'
  ordering: 'id' | 'createdAt'
}
    users: {
  filtering: 'id' | 'posts' | 'firstName' | 'lastName' | 'AND' | 'OR' | 'NOT' | 'bubble'
  ordering: 'id' | 'firstName' | 'lastName'
}
    posts: {
  filtering: 'id' | 'authors' | 'rating' | 'status' | 'AND' | 'OR' | 'NOT'
  ordering: 'id' | 'rating' | 'status'
}

  },
    Bubble: {
    members: {
  filtering: 'id' | 'posts' | 'firstName' | 'lastName' | 'AND' | 'OR' | 'NOT' | 'bubble'
  ordering: 'id' | 'firstName' | 'lastName'
}

  },  User: {
    posts: {
  filtering: 'id' | 'authors' | 'rating' | 'status' | 'AND' | 'OR' | 'NOT'
  ordering: 'id' | 'rating' | 'status'
}

  },  Post: {
    authors: {
  filtering: 'id' | 'posts' | 'firstName' | 'lastName' | 'AND' | 'OR' | 'NOT' | 'bubble'
  ordering: 'id' | 'firstName' | 'lastName'
}

  }
}

interface NexusPrismaTypes {
  Query: {
    bubble: 'Bubble'
    bubbles: 'Bubble'
    user: 'User'
    users: 'User'
    post: 'Post'
    posts: 'Post'

  },
  Mutation: {
    createOneBubble: 'Bubble'
    updateOneBubble: 'Bubble'
    updateManyBubble: 'BatchPayload'
    deleteOneBubble: 'Bubble'
    deleteManyBubble: 'BatchPayload'
    upsertOneBubble: 'Bubble'
    createOneUser: 'User'
    updateOneUser: 'User'
    updateManyUser: 'BatchPayload'
    deleteOneUser: 'User'
    deleteManyUser: 'BatchPayload'
    upsertOneUser: 'User'
    createOnePost: 'Post'
    updateOnePost: 'Post'
    updateManyPost: 'BatchPayload'
    deleteOnePost: 'Post'
    deleteManyPost: 'BatchPayload'
    upsertOnePost: 'Post'

  },
  Bubble: {
    id: 'String'
    createdAt: 'DateTime'
    members: 'User'

},  User: {
    id: 'String'
    posts: 'Post'
    firstName: 'String'
    lastName: 'String'
    bubble: 'Bubble'

},  Post: {
    id: 'Int'
    authors: 'User'
    rating: 'Float'
    status: 'PostStatus'

}
}

interface NexusPrismaMethods {
  Bubble: NexusPrismaFields<'Bubble'>
  User: NexusPrismaFields<'User'>
  Post: NexusPrismaFields<'Post'>
  Query: NexusPrismaFields<'Query'>
  Mutation: NexusPrismaFields<'Mutation'>
}
  

declare global {
  type NexusPrisma<
    TypeName extends string,
    ModelOrCrud extends 'model' | 'crud'
  > = GetNexusPrisma<TypeName, ModelOrCrud>;
}
  "
`;

exports[`integrates together: photon dmmf 1`] = `
Object {
  "datamodel": Object {
    "enums": Array [
      Object {
        "dbName": null,
        "name": "PostStatus",
        "values": Array [
          "DRAFT",
          "PUBLISHED",
        ],
      },
    ],
    "models": Array [
      Object {
        "dbName": null,
        "fields": Array [
          Object {
            "dbName": null,
            "default": Object {
              "args": Array [],
              "name": "uuid",
              "returnType": "String",
            },
            "isGenerated": false,
            "isId": true,
            "isList": false,
            "isRequired": true,
            "isUnique": false,
            "isUpdatedAt": false,
            "kind": "scalar",
            "name": "id",
            "type": "String",
          },
          Object {
            "dbName": null,
            "default": Object {
              "args": Array [],
              "name": "now",
              "returnType": "DateTime",
            },
            "isGenerated": false,
            "isId": false,
            "isList": false,
            "isRequired": true,
            "isUnique": false,
            "isUpdatedAt": false,
            "kind": "scalar",
            "name": "createdAt",
            "type": "DateTime",
          },
          Object {
            "dbName": null,
            "isGenerated": false,
            "isId": false,
            "isList": true,
            "isRequired": false,
            "isUnique": false,
            "isUpdatedAt": false,
            "kind": "object",
            "name": "members",
            "relationName": "BubbleToUser",
            "relationOnDelete": "NONE",
            "relationToFields": Array [],
            "type": "User",
          },
        ],
        "idFields": Array [],
        "isEmbedded": false,
        "isGenerated": false,
        "name": "Bubble",
      },
      Object {
        "dbName": null,
        "fields": Array [
          Object {
            "dbName": null,
            "default": Object {
              "args": Array [],
              "name": "cuid",
              "returnType": "String",
            },
            "isGenerated": false,
            "isId": true,
            "isList": false,
            "isRequired": true,
            "isUnique": false,
            "isUpdatedAt": false,
            "kind": "scalar",
            "name": "id",
            "type": "String",
          },
          Object {
            "dbName": null,
            "isGenerated": false,
            "isId": false,
            "isList": true,
            "isRequired": false,
            "isUnique": false,
            "isUpdatedAt": false,
            "kind": "object",
            "name": "posts",
            "relationName": "PostToUser",
            "relationOnDelete": "NONE",
            "relationToFields": Array [
              "id",
            ],
            "type": "Post",
          },
          Object {
            "dbName": null,
            "isGenerated": false,
            "isId": false,
            "isList": false,
            "isRequired": true,
            "isUnique": false,
            "isUpdatedAt": false,
            "kind": "scalar",
            "name": "firstName",
            "type": "String",
          },
          Object {
            "dbName": null,
            "isGenerated": false,
            "isId": false,
            "isList": false,
            "isRequired": true,
            "isUnique": false,
            "isUpdatedAt": false,
            "kind": "scalar",
            "name": "lastName",
            "type": "String",
          },
          Object {
            "dbName": null,
            "isGenerated": true,
            "isId": false,
            "isList": false,
            "isRequired": false,
            "isUnique": false,
            "isUpdatedAt": false,
            "kind": "object",
            "name": "bubble",
            "relationName": "BubbleToUser",
            "relationOnDelete": "NONE",
            "relationToFields": Array [
              "id",
            ],
            "type": "Bubble",
          },
        ],
        "idFields": Array [],
        "isEmbedded": false,
        "isGenerated": false,
        "name": "User",
      },
      Object {
        "dbName": null,
        "fields": Array [
          Object {
            "dbName": null,
            "isGenerated": false,
            "isId": true,
            "isList": false,
            "isRequired": true,
            "isUnique": false,
            "isUpdatedAt": false,
            "kind": "scalar",
            "name": "id",
            "type": "Int",
          },
          Object {
            "dbName": null,
            "isGenerated": false,
            "isId": false,
            "isList": true,
            "isRequired": false,
            "isUnique": false,
            "isUpdatedAt": false,
            "kind": "object",
            "name": "authors",
            "relationName": "PostToUser",
            "relationOnDelete": "NONE",
            "relationToFields": Array [
              "id",
            ],
            "type": "User",
          },
          Object {
            "dbName": null,
            "isGenerated": false,
            "isId": false,
            "isList": false,
            "isRequired": true,
            "isUnique": false,
            "isUpdatedAt": false,
            "kind": "scalar",
            "name": "rating",
            "type": "Float",
          },
          Object {
            "dbName": null,
            "isGenerated": false,
            "isId": false,
            "isList": false,
            "isRequired": true,
            "isUnique": false,
            "isUpdatedAt": false,
            "kind": "enum",
            "name": "status",
            "type": "PostStatus",
          },
        ],
        "idFields": Array [],
        "isEmbedded": false,
        "isGenerated": false,
        "name": "Post",
      },
    ],
  },
  "mappings": Array [
    Object {
      "aggregate": "aggregateBubble",
      "create": "createOneBubble",
      "delete": "deleteOneBubble",
      "deleteMany": "deleteManyBubble",
      "findMany": "findManyBubble",
      "findOne": "findOneBubble",
      "model": "Bubble",
      "plural": "bubbles",
      "update": "updateOneBubble",
      "updateMany": "updateManyBubble",
      "upsert": "upsertOneBubble",
    },
    Object {
      "aggregate": "aggregateUser",
      "create": "createOneUser",
      "delete": "deleteOneUser",
      "deleteMany": "deleteManyUser",
      "findMany": "findManyUser",
      "findOne": "findOneUser",
      "model": "User",
      "plural": "users",
      "update": "updateOneUser",
      "updateMany": "updateManyUser",
      "upsert": "upsertOneUser",
    },
    Object {
      "aggregate": "aggregatePost",
      "create": "createOnePost",
      "delete": "deleteOnePost",
      "deleteMany": "deleteManyPost",
      "findMany": "findManyPost",
      "findOne": "findOnePost",
      "model": "Post",
      "plural": "posts",
      "update": "updateOnePost",
      "updateMany": "updateManyPost",
      "upsert": "upsertOnePost",
    },
  ],
  "schema": Object {
    "enums": Array [
      Object {
        "name": "OrderByArg",
        "values": Array [
          "asc",
          "desc",
        ],
      },
      Object {
        "name": "PostStatus",
        "values": Array [
          "DRAFT",
          "PUBLISHED",
        ],
      },
    ],
    "inputTypes": Array [
      Object {
        "atLeastOne": false,
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Int",
              },
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "IntFilter",
              },
            ],
            "isRelationFilter": false,
            "name": "id",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "UserFilter",
              },
            ],
            "isRelationFilter": false,
            "name": "authors",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Float",
              },
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "FloatFilter",
              },
            ],
            "isRelationFilter": false,
            "name": "rating",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "enum",
                "type": "PostStatus",
              },
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "PostStatusFilter",
              },
            ],
            "isRelationFilter": false,
            "name": "status",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "PostWhereInput",
              },
            ],
            "isRelationFilter": true,
            "name": "AND",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "PostWhereInput",
              },
            ],
            "isRelationFilter": true,
            "name": "OR",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "PostWhereInput",
              },
            ],
            "isRelationFilter": true,
            "name": "NOT",
          },
        ],
        "isWhereType": true,
        "name": "PostWhereInput",
      },
      Object {
        "atLeastOne": false,
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "StringFilter",
              },
            ],
            "isRelationFilter": false,
            "name": "id",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "PostFilter",
              },
            ],
            "isRelationFilter": false,
            "name": "posts",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "StringFilter",
              },
            ],
            "isRelationFilter": false,
            "name": "firstName",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "StringFilter",
              },
            ],
            "isRelationFilter": false,
            "name": "lastName",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserWhereInput",
              },
            ],
            "isRelationFilter": true,
            "name": "AND",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserWhereInput",
              },
            ],
            "isRelationFilter": true,
            "name": "OR",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserWhereInput",
              },
            ],
            "isRelationFilter": true,
            "name": "NOT",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "BubbleWhereInput",
              },
            ],
            "isRelationFilter": true,
            "name": "bubble",
          },
        ],
        "isWhereType": true,
        "name": "UserWhereInput",
      },
      Object {
        "atLeastOne": false,
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "UUID",
              },
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "UUIDFilter",
              },
            ],
            "isRelationFilter": false,
            "name": "id",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "DateTime",
              },
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "DateTimeFilter",
              },
            ],
            "isRelationFilter": false,
            "name": "createdAt",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "UserFilter",
              },
            ],
            "isRelationFilter": false,
            "name": "members",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "BubbleWhereInput",
              },
            ],
            "isRelationFilter": true,
            "name": "AND",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "BubbleWhereInput",
              },
            ],
            "isRelationFilter": true,
            "name": "OR",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "BubbleWhereInput",
              },
            ],
            "isRelationFilter": true,
            "name": "NOT",
          },
        ],
        "isWhereType": true,
        "name": "BubbleWhereInput",
      },
      Object {
        "atLeastOne": true,
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "UUID",
              },
            ],
            "name": "id",
          },
        ],
        "name": "BubbleWhereUniqueInput",
      },
      Object {
        "atLeastOne": true,
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "ID",
              },
            ],
            "name": "id",
          },
        ],
        "name": "UserWhereUniqueInput",
      },
      Object {
        "atLeastOne": true,
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Int",
              },
            ],
            "name": "id",
          },
        ],
        "name": "PostWhereUniqueInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "scalar",
                "type": "Float",
              },
            ],
            "name": "rating",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "enum",
                "type": "PostStatus",
              },
            ],
            "name": "status",
          },
        ],
        "name": "PostCreateWithoutAuthorsInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "PostCreateWithoutAuthorsInput",
              },
            ],
            "name": "create",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "PostWhereUniqueInput",
              },
            ],
            "name": "connect",
          },
        ],
        "name": "PostCreateManyWithoutPostsInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "ID",
              },
            ],
            "name": "id",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "firstName",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "lastName",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "PostCreateManyWithoutPostsInput",
              },
            ],
            "name": "posts",
          },
        ],
        "name": "UserCreateWithoutBubbleInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserCreateWithoutBubbleInput",
              },
            ],
            "name": "create",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserWhereUniqueInput",
              },
            ],
            "name": "connect",
          },
        ],
        "name": "UserCreateManyWithoutMembersInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "UUID",
              },
            ],
            "name": "id",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "DateTime",
              },
            ],
            "name": "createdAt",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "UserCreateManyWithoutMembersInput",
              },
            ],
            "name": "members",
          },
        ],
        "name": "BubbleCreateInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Int",
              },
            ],
            "name": "id",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Float",
              },
            ],
            "name": "rating",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "enum",
                "type": "PostStatus",
              },
            ],
            "name": "status",
          },
        ],
        "name": "PostUpdateWithoutAuthorsDataInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "object",
                "type": "PostWhereUniqueInput",
              },
            ],
            "name": "where",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "object",
                "type": "PostUpdateWithoutAuthorsDataInput",
              },
            ],
            "name": "data",
          },
        ],
        "name": "PostUpdateWithWhereUniqueWithoutAuthorsInput",
      },
      Object {
        "atLeastOne": false,
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Int",
              },
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "IntFilter",
              },
            ],
            "isRelationFilter": false,
            "name": "id",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "UserFilter",
              },
            ],
            "isRelationFilter": false,
            "name": "authors",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Float",
              },
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "FloatFilter",
              },
            ],
            "isRelationFilter": false,
            "name": "rating",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "enum",
                "type": "PostStatus",
              },
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "PostStatusFilter",
              },
            ],
            "isRelationFilter": false,
            "name": "status",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "PostScalarWhereInput",
              },
            ],
            "isRelationFilter": true,
            "name": "AND",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "PostScalarWhereInput",
              },
            ],
            "isRelationFilter": true,
            "name": "OR",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "PostScalarWhereInput",
              },
            ],
            "isRelationFilter": true,
            "name": "NOT",
          },
        ],
        "isWhereType": true,
        "name": "PostScalarWhereInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Int",
              },
            ],
            "name": "id",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Float",
              },
            ],
            "name": "rating",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "enum",
                "type": "PostStatus",
              },
            ],
            "name": "status",
          },
        ],
        "name": "PostUpdateManyDataInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "object",
                "type": "PostScalarWhereInput",
              },
            ],
            "name": "where",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "object",
                "type": "PostUpdateManyDataInput",
              },
            ],
            "name": "data",
          },
        ],
        "name": "PostUpdateManyWithWhereNestedInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "object",
                "type": "PostWhereUniqueInput",
              },
            ],
            "name": "where",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "object",
                "type": "PostUpdateWithoutAuthorsDataInput",
              },
            ],
            "name": "update",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "object",
                "type": "PostCreateWithoutAuthorsInput",
              },
            ],
            "name": "create",
          },
        ],
        "name": "PostUpsertWithWhereUniqueWithoutAuthorsInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "PostCreateWithoutAuthorsInput",
              },
            ],
            "name": "create",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "PostWhereUniqueInput",
              },
            ],
            "name": "connect",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "PostWhereUniqueInput",
              },
            ],
            "name": "set",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "PostWhereUniqueInput",
              },
            ],
            "name": "disconnect",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "PostWhereUniqueInput",
              },
            ],
            "name": "delete",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "PostUpdateWithWhereUniqueWithoutAuthorsInput",
              },
            ],
            "name": "update",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "PostUpdateManyWithWhereNestedInput",
              },
            ],
            "name": "updateMany",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "PostScalarWhereInput",
              },
            ],
            "name": "deleteMany",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "PostUpsertWithWhereUniqueWithoutAuthorsInput",
              },
            ],
            "name": "upsert",
          },
        ],
        "name": "PostUpdateManyWithoutAuthorsInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "ID",
              },
            ],
            "name": "id",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "firstName",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "lastName",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "PostUpdateManyWithoutAuthorsInput",
              },
            ],
            "name": "posts",
          },
        ],
        "name": "UserUpdateWithoutBubbleDataInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "object",
                "type": "UserWhereUniqueInput",
              },
            ],
            "name": "where",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "object",
                "type": "UserUpdateWithoutBubbleDataInput",
              },
            ],
            "name": "data",
          },
        ],
        "name": "UserUpdateWithWhereUniqueWithoutBubbleInput",
      },
      Object {
        "atLeastOne": false,
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "StringFilter",
              },
            ],
            "isRelationFilter": false,
            "name": "id",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "PostFilter",
              },
            ],
            "isRelationFilter": false,
            "name": "posts",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "StringFilter",
              },
            ],
            "isRelationFilter": false,
            "name": "firstName",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "StringFilter",
              },
            ],
            "isRelationFilter": false,
            "name": "lastName",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserScalarWhereInput",
              },
            ],
            "isRelationFilter": true,
            "name": "AND",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserScalarWhereInput",
              },
            ],
            "isRelationFilter": true,
            "name": "OR",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserScalarWhereInput",
              },
            ],
            "isRelationFilter": true,
            "name": "NOT",
          },
        ],
        "isWhereType": true,
        "name": "UserScalarWhereInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "ID",
              },
            ],
            "name": "id",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "firstName",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "lastName",
          },
        ],
        "name": "UserUpdateManyDataInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "object",
                "type": "UserScalarWhereInput",
              },
            ],
            "name": "where",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "object",
                "type": "UserUpdateManyDataInput",
              },
            ],
            "name": "data",
          },
        ],
        "name": "UserUpdateManyWithWhereNestedInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "object",
                "type": "UserWhereUniqueInput",
              },
            ],
            "name": "where",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "object",
                "type": "UserUpdateWithoutBubbleDataInput",
              },
            ],
            "name": "update",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "object",
                "type": "UserCreateWithoutBubbleInput",
              },
            ],
            "name": "create",
          },
        ],
        "name": "UserUpsertWithWhereUniqueWithoutBubbleInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserCreateWithoutBubbleInput",
              },
            ],
            "name": "create",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserWhereUniqueInput",
              },
            ],
            "name": "connect",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserWhereUniqueInput",
              },
            ],
            "name": "set",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserWhereUniqueInput",
              },
            ],
            "name": "disconnect",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserWhereUniqueInput",
              },
            ],
            "name": "delete",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserUpdateWithWhereUniqueWithoutBubbleInput",
              },
            ],
            "name": "update",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserUpdateManyWithWhereNestedInput",
              },
            ],
            "name": "updateMany",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserScalarWhereInput",
              },
            ],
            "name": "deleteMany",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserUpsertWithWhereUniqueWithoutBubbleInput",
              },
            ],
            "name": "upsert",
          },
        ],
        "name": "UserUpdateManyWithoutBubbleInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "UUID",
              },
            ],
            "name": "id",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "DateTime",
              },
            ],
            "name": "createdAt",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "UserUpdateManyWithoutBubbleInput",
              },
            ],
            "name": "members",
          },
        ],
        "name": "BubbleUpdateInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "UUID",
              },
            ],
            "name": "id",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "DateTime",
              },
            ],
            "name": "createdAt",
          },
        ],
        "name": "BubbleUpdateManyMutationInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "UUID",
              },
            ],
            "name": "id",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "DateTime",
              },
            ],
            "name": "createdAt",
          },
        ],
        "name": "BubbleCreateWithoutMembersInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "BubbleCreateWithoutMembersInput",
              },
            ],
            "name": "create",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "BubbleWhereUniqueInput",
              },
            ],
            "name": "connect",
          },
        ],
        "name": "BubbleCreateOneWithoutBubbleInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "ID",
              },
            ],
            "name": "id",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "firstName",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "lastName",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "PostCreateManyWithoutPostsInput",
              },
            ],
            "name": "posts",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "BubbleCreateOneWithoutBubbleInput",
              },
            ],
            "name": "bubble",
          },
        ],
        "name": "UserCreateInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "UUID",
              },
            ],
            "name": "id",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "DateTime",
              },
            ],
            "name": "createdAt",
          },
        ],
        "name": "BubbleUpdateWithoutMembersDataInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "object",
                "type": "BubbleUpdateWithoutMembersDataInput",
              },
            ],
            "name": "update",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "object",
                "type": "BubbleCreateWithoutMembersInput",
              },
            ],
            "name": "create",
          },
        ],
        "name": "BubbleUpsertWithoutMembersInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "BubbleCreateWithoutMembersInput",
              },
            ],
            "name": "create",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "BubbleWhereUniqueInput",
              },
            ],
            "name": "connect",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Boolean",
              },
            ],
            "name": "disconnect",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Boolean",
              },
            ],
            "name": "delete",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "BubbleUpdateWithoutMembersDataInput",
              },
            ],
            "name": "update",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "BubbleUpsertWithoutMembersInput",
              },
            ],
            "name": "upsert",
          },
        ],
        "name": "BubbleUpdateOneWithoutMembersInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "ID",
              },
            ],
            "name": "id",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "firstName",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "lastName",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "PostUpdateManyWithoutAuthorsInput",
              },
            ],
            "name": "posts",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "BubbleUpdateOneWithoutMembersInput",
              },
            ],
            "name": "bubble",
          },
        ],
        "name": "UserUpdateInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "ID",
              },
            ],
            "name": "id",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "firstName",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "lastName",
          },
        ],
        "name": "UserUpdateManyMutationInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "ID",
              },
            ],
            "name": "id",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "firstName",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "lastName",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "BubbleCreateOneWithoutBubbleInput",
              },
            ],
            "name": "bubble",
          },
        ],
        "name": "UserCreateWithoutPostsInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserCreateWithoutPostsInput",
              },
            ],
            "name": "create",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserWhereUniqueInput",
              },
            ],
            "name": "connect",
          },
        ],
        "name": "UserCreateManyWithoutAuthorsInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "scalar",
                "type": "Float",
              },
            ],
            "name": "rating",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "enum",
                "type": "PostStatus",
              },
            ],
            "name": "status",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "UserCreateManyWithoutAuthorsInput",
              },
            ],
            "name": "authors",
          },
        ],
        "name": "PostCreateInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "ID",
              },
            ],
            "name": "id",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "firstName",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "lastName",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "BubbleUpdateOneWithoutMembersInput",
              },
            ],
            "name": "bubble",
          },
        ],
        "name": "UserUpdateWithoutPostsDataInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "object",
                "type": "UserWhereUniqueInput",
              },
            ],
            "name": "where",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "object",
                "type": "UserUpdateWithoutPostsDataInput",
              },
            ],
            "name": "data",
          },
        ],
        "name": "UserUpdateWithWhereUniqueWithoutPostsInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "object",
                "type": "UserWhereUniqueInput",
              },
            ],
            "name": "where",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "object",
                "type": "UserUpdateWithoutPostsDataInput",
              },
            ],
            "name": "update",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "object",
                "type": "UserCreateWithoutPostsInput",
              },
            ],
            "name": "create",
          },
        ],
        "name": "UserUpsertWithWhereUniqueWithoutPostsInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserCreateWithoutPostsInput",
              },
            ],
            "name": "create",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserWhereUniqueInput",
              },
            ],
            "name": "connect",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserWhereUniqueInput",
              },
            ],
            "name": "set",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserWhereUniqueInput",
              },
            ],
            "name": "disconnect",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserWhereUniqueInput",
              },
            ],
            "name": "delete",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserUpdateWithWhereUniqueWithoutPostsInput",
              },
            ],
            "name": "update",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserUpdateManyWithWhereNestedInput",
              },
            ],
            "name": "updateMany",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserScalarWhereInput",
              },
            ],
            "name": "deleteMany",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserUpsertWithWhereUniqueWithoutPostsInput",
              },
            ],
            "name": "upsert",
          },
        ],
        "name": "UserUpdateManyWithoutPostsInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Int",
              },
            ],
            "name": "id",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Float",
              },
            ],
            "name": "rating",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "enum",
                "type": "PostStatus",
              },
            ],
            "name": "status",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "UserUpdateManyWithoutPostsInput",
              },
            ],
            "name": "authors",
          },
        ],
        "name": "PostUpdateInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Int",
              },
            ],
            "name": "id",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Float",
              },
            ],
            "name": "rating",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "enum",
                "type": "PostStatus",
              },
            ],
            "name": "status",
          },
        ],
        "name": "PostUpdateManyMutationInput",
      },
      Object {
        "atLeastOne": false,
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Int",
              },
            ],
            "name": "equals",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Int",
              },
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "IntFilter",
              },
            ],
            "name": "not",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "scalar",
                "type": "Int",
              },
            ],
            "name": "in",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "scalar",
                "type": "Int",
              },
            ],
            "name": "notIn",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Int",
              },
            ],
            "name": "lt",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Int",
              },
            ],
            "name": "lte",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Int",
              },
            ],
            "name": "gt",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Int",
              },
            ],
            "name": "gte",
          },
        ],
        "name": "IntFilter",
      },
      Object {
        "atLeastOne": false,
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "UserWhereInput",
              },
            ],
            "name": "every",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "UserWhereInput",
              },
            ],
            "name": "some",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "UserWhereInput",
              },
            ],
            "name": "none",
          },
        ],
        "name": "UserFilter",
      },
      Object {
        "atLeastOne": false,
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Float",
              },
            ],
            "name": "equals",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Float",
              },
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "FloatFilter",
              },
            ],
            "name": "not",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "scalar",
                "type": "Float",
              },
            ],
            "name": "in",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "scalar",
                "type": "Float",
              },
            ],
            "name": "notIn",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Float",
              },
            ],
            "name": "lt",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Float",
              },
            ],
            "name": "lte",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Float",
              },
            ],
            "name": "gt",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Float",
              },
            ],
            "name": "gte",
          },
        ],
        "name": "FloatFilter",
      },
      Object {
        "atLeastOne": false,
        "fields": Array [],
        "name": "PostStatusFilter",
      },
      Object {
        "atLeastOne": false,
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "equals",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "StringFilter",
              },
            ],
            "name": "not",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "in",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "notIn",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "lt",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "lte",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "gt",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "gte",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "contains",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "startsWith",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "endsWith",
          },
        ],
        "name": "StringFilter",
      },
      Object {
        "atLeastOne": false,
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "PostWhereInput",
              },
            ],
            "name": "every",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "PostWhereInput",
              },
            ],
            "name": "some",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "PostWhereInput",
              },
            ],
            "name": "none",
          },
        ],
        "name": "PostFilter",
      },
      Object {
        "atLeastOne": false,
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "UUID",
              },
            ],
            "name": "equals",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "UUID",
              },
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "UUIDFilter",
              },
            ],
            "name": "not",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "scalar",
                "type": "UUID",
              },
            ],
            "name": "in",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "scalar",
                "type": "UUID",
              },
            ],
            "name": "notIn",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "UUID",
              },
            ],
            "name": "lt",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "UUID",
              },
            ],
            "name": "lte",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "UUID",
              },
            ],
            "name": "gt",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "UUID",
              },
            ],
            "name": "gte",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "UUID",
              },
            ],
            "name": "contains",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "UUID",
              },
            ],
            "name": "startsWith",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "UUID",
              },
            ],
            "name": "endsWith",
          },
        ],
        "name": "UUIDFilter",
      },
      Object {
        "atLeastOne": false,
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "DateTime",
              },
            ],
            "name": "equals",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "DateTime",
              },
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "DateTimeFilter",
              },
            ],
            "name": "not",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "scalar",
                "type": "DateTime",
              },
            ],
            "name": "in",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "scalar",
                "type": "DateTime",
              },
            ],
            "name": "notIn",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "DateTime",
              },
            ],
            "name": "lt",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "DateTime",
              },
            ],
            "name": "lte",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "DateTime",
              },
            ],
            "name": "gt",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "DateTime",
              },
            ],
            "name": "gte",
          },
        ],
        "name": "DateTimeFilter",
      },
      Object {
        "atLeastOne": true,
        "atMostOne": true,
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "enum",
                "type": "OrderByArg",
              },
            ],
            "isRelationFilter": false,
            "name": "id",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "enum",
                "type": "OrderByArg",
              },
            ],
            "isRelationFilter": false,
            "name": "createdAt",
          },
        ],
        "isOrderType": true,
        "name": "BubbleOrderByInput",
      },
      Object {
        "atLeastOne": true,
        "atMostOne": true,
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "enum",
                "type": "OrderByArg",
              },
            ],
            "isRelationFilter": false,
            "name": "id",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "enum",
                "type": "OrderByArg",
              },
            ],
            "isRelationFilter": false,
            "name": "firstName",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "enum",
                "type": "OrderByArg",
              },
            ],
            "isRelationFilter": false,
            "name": "lastName",
          },
        ],
        "isOrderType": true,
        "name": "UserOrderByInput",
      },
      Object {
        "atLeastOne": true,
        "atMostOne": true,
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "enum",
                "type": "OrderByArg",
              },
            ],
            "isRelationFilter": false,
            "name": "id",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "enum",
                "type": "OrderByArg",
              },
            ],
            "isRelationFilter": false,
            "name": "rating",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "enum",
                "type": "OrderByArg",
              },
            ],
            "isRelationFilter": false,
            "name": "status",
          },
        ],
        "isOrderType": true,
        "name": "PostOrderByInput",
      },
    ],
    "outputTypes": Array [
      Object {
        "fields": Array [
          Object {
            "args": Array [],
            "name": "id",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "scalar",
              "type": "Int",
            },
          },
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "object",
                    "type": "UserWhereInput",
                  },
                ],
                "name": "where",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "object",
                    "type": "UserOrderByInput",
                  },
                ],
                "name": "orderBy",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "scalar",
                    "type": "Int",
                  },
                ],
                "name": "skip",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "scalar",
                    "type": "String",
                  },
                ],
                "name": "after",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "scalar",
                    "type": "String",
                  },
                ],
                "name": "before",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "scalar",
                    "type": "Int",
                  },
                ],
                "name": "first",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "scalar",
                    "type": "Int",
                  },
                ],
                "name": "last",
              },
            ],
            "name": "authors",
            "outputType": Object {
              "isList": true,
              "isRequired": false,
              "kind": "object",
              "type": "User",
            },
          },
          Object {
            "args": Array [],
            "name": "rating",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "scalar",
              "type": "Float",
            },
          },
          Object {
            "args": Array [],
            "name": "status",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "enum",
              "type": "PostStatus",
            },
          },
        ],
        "name": "Post",
      },
      Object {
        "fields": Array [
          Object {
            "args": Array [],
            "name": "id",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "scalar",
              "type": "ID",
            },
          },
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "object",
                    "type": "PostWhereInput",
                  },
                ],
                "name": "where",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "object",
                    "type": "PostOrderByInput",
                  },
                ],
                "name": "orderBy",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "scalar",
                    "type": "Int",
                  },
                ],
                "name": "skip",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "scalar",
                    "type": "String",
                  },
                ],
                "name": "after",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "scalar",
                    "type": "String",
                  },
                ],
                "name": "before",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "scalar",
                    "type": "Int",
                  },
                ],
                "name": "first",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "scalar",
                    "type": "Int",
                  },
                ],
                "name": "last",
              },
            ],
            "name": "posts",
            "outputType": Object {
              "isList": true,
              "isRequired": false,
              "kind": "object",
              "type": "Post",
            },
          },
          Object {
            "args": Array [],
            "name": "firstName",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "scalar",
              "type": "String",
            },
          },
          Object {
            "args": Array [],
            "name": "lastName",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "scalar",
              "type": "String",
            },
          },
          Object {
            "args": Array [],
            "name": "bubble",
            "outputType": Object {
              "isList": false,
              "isRequired": false,
              "kind": "object",
              "type": "Bubble",
            },
          },
        ],
        "name": "User",
      },
      Object {
        "fields": Array [
          Object {
            "args": Array [],
            "name": "id",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "scalar",
              "type": "UUID",
            },
          },
          Object {
            "args": Array [],
            "name": "createdAt",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "scalar",
              "type": "DateTime",
            },
          },
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "object",
                    "type": "UserWhereInput",
                  },
                ],
                "name": "where",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "object",
                    "type": "UserOrderByInput",
                  },
                ],
                "name": "orderBy",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "scalar",
                    "type": "Int",
                  },
                ],
                "name": "skip",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "scalar",
                    "type": "String",
                  },
                ],
                "name": "after",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "scalar",
                    "type": "String",
                  },
                ],
                "name": "before",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "scalar",
                    "type": "Int",
                  },
                ],
                "name": "first",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "scalar",
                    "type": "Int",
                  },
                ],
                "name": "last",
              },
            ],
            "name": "members",
            "outputType": Object {
              "isList": true,
              "isRequired": false,
              "kind": "object",
              "type": "User",
            },
          },
        ],
        "name": "Bubble",
      },
      Object {
        "fields": Array [
          Object {
            "args": Array [],
            "name": "count",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "scalar",
              "type": "Int",
            },
          },
        ],
        "name": "AggregateBubble",
      },
      Object {
        "fields": Array [
          Object {
            "args": Array [],
            "name": "count",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "scalar",
              "type": "Int",
            },
          },
        ],
        "name": "AggregateUser",
      },
      Object {
        "fields": Array [
          Object {
            "args": Array [],
            "name": "count",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "scalar",
              "type": "Int",
            },
          },
        ],
        "name": "AggregatePost",
      },
      Object {
        "fields": Array [
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "object",
                    "type": "BubbleWhereInput",
                  },
                ],
                "name": "where",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "object",
                    "type": "BubbleOrderByInput",
                  },
                ],
                "name": "orderBy",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "scalar",
                    "type": "Int",
                  },
                ],
                "name": "skip",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "scalar",
                    "type": "String",
                  },
                ],
                "name": "after",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "scalar",
                    "type": "String",
                  },
                ],
                "name": "before",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "scalar",
                    "type": "Int",
                  },
                ],
                "name": "first",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "scalar",
                    "type": "Int",
                  },
                ],
                "name": "last",
              },
            ],
            "name": "findManyBubble",
            "outputType": Object {
              "isList": true,
              "isRequired": false,
              "kind": "object",
              "type": "Bubble",
            },
          },
          Object {
            "args": Array [],
            "name": "aggregateBubble",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "object",
              "type": "AggregateBubble",
            },
          },
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "BubbleWhereUniqueInput",
                  },
                ],
                "name": "where",
              },
            ],
            "name": "findOneBubble",
            "outputType": Object {
              "isList": false,
              "isRequired": false,
              "kind": "object",
              "type": "Bubble",
            },
          },
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "object",
                    "type": "UserWhereInput",
                  },
                ],
                "name": "where",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "object",
                    "type": "UserOrderByInput",
                  },
                ],
                "name": "orderBy",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "scalar",
                    "type": "Int",
                  },
                ],
                "name": "skip",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "scalar",
                    "type": "String",
                  },
                ],
                "name": "after",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "scalar",
                    "type": "String",
                  },
                ],
                "name": "before",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "scalar",
                    "type": "Int",
                  },
                ],
                "name": "first",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "scalar",
                    "type": "Int",
                  },
                ],
                "name": "last",
              },
            ],
            "name": "findManyUser",
            "outputType": Object {
              "isList": true,
              "isRequired": false,
              "kind": "object",
              "type": "User",
            },
          },
          Object {
            "args": Array [],
            "name": "aggregateUser",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "object",
              "type": "AggregateUser",
            },
          },
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "UserWhereUniqueInput",
                  },
                ],
                "name": "where",
              },
            ],
            "name": "findOneUser",
            "outputType": Object {
              "isList": false,
              "isRequired": false,
              "kind": "object",
              "type": "User",
            },
          },
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "object",
                    "type": "PostWhereInput",
                  },
                ],
                "name": "where",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "object",
                    "type": "PostOrderByInput",
                  },
                ],
                "name": "orderBy",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "scalar",
                    "type": "Int",
                  },
                ],
                "name": "skip",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "scalar",
                    "type": "String",
                  },
                ],
                "name": "after",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "scalar",
                    "type": "String",
                  },
                ],
                "name": "before",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "scalar",
                    "type": "Int",
                  },
                ],
                "name": "first",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "scalar",
                    "type": "Int",
                  },
                ],
                "name": "last",
              },
            ],
            "name": "findManyPost",
            "outputType": Object {
              "isList": true,
              "isRequired": false,
              "kind": "object",
              "type": "Post",
            },
          },
          Object {
            "args": Array [],
            "name": "aggregatePost",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "object",
              "type": "AggregatePost",
            },
          },
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "PostWhereUniqueInput",
                  },
                ],
                "name": "where",
              },
            ],
            "name": "findOnePost",
            "outputType": Object {
              "isList": false,
              "isRequired": false,
              "kind": "object",
              "type": "Post",
            },
          },
        ],
        "name": "Query",
      },
      Object {
        "fields": Array [
          Object {
            "args": Array [],
            "name": "count",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "scalar",
              "type": "Int",
            },
          },
        ],
        "name": "BatchPayload",
      },
      Object {
        "fields": Array [
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "BubbleCreateInput",
                  },
                ],
                "name": "data",
              },
            ],
            "name": "createOneBubble",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "object",
              "type": "Bubble",
            },
          },
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "BubbleWhereUniqueInput",
                  },
                ],
                "name": "where",
              },
            ],
            "name": "deleteOneBubble",
            "outputType": Object {
              "isList": false,
              "isRequired": false,
              "kind": "object",
              "type": "Bubble",
            },
          },
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "BubbleUpdateInput",
                  },
                ],
                "name": "data",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "BubbleWhereUniqueInput",
                  },
                ],
                "name": "where",
              },
            ],
            "name": "updateOneBubble",
            "outputType": Object {
              "isList": false,
              "isRequired": false,
              "kind": "object",
              "type": "Bubble",
            },
          },
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "BubbleWhereUniqueInput",
                  },
                ],
                "name": "where",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "BubbleCreateInput",
                  },
                ],
                "name": "create",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "BubbleUpdateInput",
                  },
                ],
                "name": "update",
              },
            ],
            "name": "upsertOneBubble",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "object",
              "type": "Bubble",
            },
          },
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "BubbleUpdateManyMutationInput",
                  },
                ],
                "name": "data",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "object",
                    "type": "BubbleWhereInput",
                  },
                ],
                "name": "where",
              },
            ],
            "name": "updateManyBubble",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "object",
              "type": "BatchPayload",
            },
          },
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "object",
                    "type": "BubbleWhereInput",
                  },
                ],
                "name": "where",
              },
            ],
            "name": "deleteManyBubble",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "object",
              "type": "BatchPayload",
            },
          },
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "UserCreateInput",
                  },
                ],
                "name": "data",
              },
            ],
            "name": "createOneUser",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "object",
              "type": "User",
            },
          },
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "UserWhereUniqueInput",
                  },
                ],
                "name": "where",
              },
            ],
            "name": "deleteOneUser",
            "outputType": Object {
              "isList": false,
              "isRequired": false,
              "kind": "object",
              "type": "User",
            },
          },
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "UserUpdateInput",
                  },
                ],
                "name": "data",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "UserWhereUniqueInput",
                  },
                ],
                "name": "where",
              },
            ],
            "name": "updateOneUser",
            "outputType": Object {
              "isList": false,
              "isRequired": false,
              "kind": "object",
              "type": "User",
            },
          },
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "UserWhereUniqueInput",
                  },
                ],
                "name": "where",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "UserCreateInput",
                  },
                ],
                "name": "create",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "UserUpdateInput",
                  },
                ],
                "name": "update",
              },
            ],
            "name": "upsertOneUser",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "object",
              "type": "User",
            },
          },
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "UserUpdateManyMutationInput",
                  },
                ],
                "name": "data",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "object",
                    "type": "UserWhereInput",
                  },
                ],
                "name": "where",
              },
            ],
            "name": "updateManyUser",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "object",
              "type": "BatchPayload",
            },
          },
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "object",
                    "type": "UserWhereInput",
                  },
                ],
                "name": "where",
              },
            ],
            "name": "deleteManyUser",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "object",
              "type": "BatchPayload",
            },
          },
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "PostCreateInput",
                  },
                ],
                "name": "data",
              },
            ],
            "name": "createOnePost",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "object",
              "type": "Post",
            },
          },
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "PostWhereUniqueInput",
                  },
                ],
                "name": "where",
              },
            ],
            "name": "deleteOnePost",
            "outputType": Object {
              "isList": false,
              "isRequired": false,
              "kind": "object",
              "type": "Post",
            },
          },
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "PostUpdateInput",
                  },
                ],
                "name": "data",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "PostWhereUniqueInput",
                  },
                ],
                "name": "where",
              },
            ],
            "name": "updateOnePost",
            "outputType": Object {
              "isList": false,
              "isRequired": false,
              "kind": "object",
              "type": "Post",
            },
          },
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "PostWhereUniqueInput",
                  },
                ],
                "name": "where",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "PostCreateInput",
                  },
                ],
                "name": "create",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "PostUpdateInput",
                  },
                ],
                "name": "update",
              },
            ],
            "name": "upsertOnePost",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "object",
              "type": "Post",
            },
          },
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "PostUpdateManyMutationInput",
                  },
                ],
                "name": "data",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "object",
                    "type": "PostWhereInput",
                  },
                ],
                "name": "where",
              },
            ],
            "name": "updateManyPost",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "object",
              "type": "BatchPayload",
            },
          },
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "object",
                    "type": "PostWhereInput",
                  },
                ],
                "name": "where",
              },
            ],
            "name": "deleteManyPost",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "object",
              "type": "BatchPayload",
            },
          },
        ],
        "name": "Mutation",
      },
    ],
  },
}
`;

exports[`integrates together: photon source code 1`] = `
"\\"use strict\\";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator[\\"throw\\"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, \\"__esModule\\", { value: true });
const runtime_1 = require(\\"./runtime\\");
/**
 * Query Engine version: latest
 */
const path = require(\\"path\\");
const debug = runtime_1.debugLib('photon');
class PhotonFetcher {
    constructor(photon, engine, debug = false, hooks) {
        this.photon = photon;
        this.engine = engine;
        this.debug = debug;
        this.hooks = hooks;
    }
    request(document, path = [], rootField, typeName, isList, callsite) {
        return __awaiter(this, void 0, void 0, function* () {
            const query = String(document);
            debug('Request:');
            debug(query);
            if (this.hooks && this.hooks.beforeRequest) {
                this.hooks.beforeRequest({ query, path, rootField, typeName, document });
            }
            try {
                yield this.photon.connect();
                const result = yield this.engine.request(query, typeName);
                debug('Response:');
                debug(result);
                return this.unpack(result, path, rootField, isList);
            }
            catch (e) {
                if (callsite) {
                    const { stack } = runtime_1.printStack({
                        callsite,
                        originalMethod: path.join('.'),
                        onUs: e.isPanic
                    });
                    throw new Error(stack + '\\\\n\\\\n' + e.message);
                }
                else {
                    if (e.isPanic) {
                        throw e;
                    }
                    else {
                        throw new Error(\`Error in Photon\${path}: \\\\n\` + e.stack);
                    }
                }
            }
        });
    }
    unpack(data, path, rootField, isList) {
        const getPath = [];
        if (rootField) {
            getPath.push(rootField);
        }
        getPath.push(...path.filter(p => p !== 'select' && p !== 'include'));
        const result = runtime_1.deepGet(data, getPath) || null;
        if (result === null && isList) {
            return [];
        }
        return result;
    }
}
/**
 * Build tool annotations
 * In order to make \`ncc\` and \`node-file-trace\` happy.
**/
path.join(__dirname, 'runtime/__NON_DETERMINISTIC_CONTENT__');
class Photon {
    constructor(options = {}) {
        const useDebug = options.debug === true ? true : typeof options.debug === 'object' ? Boolean(options.debug.library) : false;
        if (useDebug) {
            runtime_1.debugLib.enable('photon');
        }
        const debugEngine = options.debug === true ? true : typeof options.debug === 'object' ? Boolean(options.debug.engine) : false;
        // datamodel = datamodel without datasources + printed datasources
        this.datamodel = \\"generator photonjs {\\\\n  provider = \\\\\\"photonjs\\\\\\"\\\\n  output   = \\\\\\"../../node_modules/@generated/photon\\\\\\"\\\\n}\\\\n\\\\nmodel Bubble {\\\\n  id        String   @id @default(uuid())\\\\n  createdAt DateTime @default(now())\\\\n  members   User[]\\\\n}\\\\n\\\\nmodel User {\\\\n  id        String @id @default(cuid())\\\\n  posts     Post[]\\\\n  firstName String\\\\n  lastName  String\\\\n  // likes     Post[]\\\\n}\\\\n\\\\nmodel Post {\\\\n  id      Int        @id\\\\n  authors User[]\\\\n  rating  Float\\\\n  status  PostStatus\\\\n  // likers  User[] @relation(references: likers)\\\\n}\\\\n\\\\nenum PostStatus {\\\\n  DRAFT\\\\n  PUBLISHED\\\\n}\\\\n\\";
        const predefinedDatasources = [];
        const inputDatasources = Object.entries(options.datasources || {}).map(([name, url]) => ({ name, url: url }));
        const datasources = runtime_1.mergeBy(predefinedDatasources, inputDatasources, (source) => source.name);
        const internal = options.__internal || {};
        const engineConfig = internal.engine || {};
        this.engine = new runtime_1.Engine({
            cwd: engineConfig.cwd || path.resolve(__dirname, \\"../../../tests/__app\\"),
            debug: debugEngine,
            datamodel: this.datamodel,
            prismaPath: engineConfig.binaryPath || undefined,
            datasources,
            generator: { \\"name\\": \\"photonjs\\", \\"provider\\": \\"photonjs\\", \\"output\\": \\"__NON_DETERMINISTIC_CONTENT__\\" \\"binaryTargets\\": [], \\"config\\": {} },
        });
        this.dmmf = new runtime_1.DMMFClass(exports.dmmf);
        this.fetcher = new PhotonFetcher(this, this.engine, false, internal.hooks);
    }
    connectEngine(publicCall) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.engine.start();
        });
    }
    connect() {
        if (this.connectionPromise) {
            return this.connectionPromise;
        }
        this.connectionPromise = this.connectEngine(true);
        return this.connectionPromise;
    }
    disconnect() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.engine.stop();
        });
    }
    // won't be generated for now
    // private _query?: QueryDelegate
    // get query(): QueryDelegate {
    //   return this._query ? this._query: (this._query = QueryDelegate(this.dmmf, this.fetcher))
    // }
    get bubbles() {
        return BubbleDelegate(this.dmmf, this.fetcher);
    }
    get users() {
        return UserDelegate(this.dmmf, this.fetcher);
    }
    get posts() {
        return PostDelegate(this.dmmf, this.fetcher);
    }
}
exports.Photon = Photon;
/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }
exports.OrderByArg = makeEnum({
    asc: 'asc',
    desc: 'desc'
});
exports.PostStatus = makeEnum({
    DRAFT: 'DRAFT',
    PUBLISHED: 'PUBLISHED'
});
function BubbleDelegate(dmmf, fetcher) {
    const Bubble = (args) => new BubbleClient(dmmf, fetcher, 'query', 'findManyBubble', 'bubbles', args, []);
    Bubble.findOne = (args) => args.select ? new BubbleClient(dmmf, fetcher, 'query', 'findOneBubble', 'bubbles.findOne', args, []) : new BubbleClient(dmmf, fetcher, 'query', 'findOneBubble', 'bubbles.findOne', args, []);
    Bubble.findMany = (args) => new BubbleClient(dmmf, fetcher, 'query', 'findManyBubble', 'bubbles.findMany', args, []);
    Bubble.create = (args) => args.select ? new BubbleClient(dmmf, fetcher, 'mutation', 'createOneBubble', 'bubbles.create', args, []) : new BubbleClient(dmmf, fetcher, 'mutation', 'createOneBubble', 'bubbles.create', args, []);
    Bubble.delete = (args) => args.select ? new BubbleClient(dmmf, fetcher, 'mutation', 'deleteOneBubble', 'bubbles.delete', args, []) : new BubbleClient(dmmf, fetcher, 'mutation', 'deleteOneBubble', 'bubbles.delete', args, []);
    Bubble.update = (args) => args.select ? new BubbleClient(dmmf, fetcher, 'mutation', 'updateOneBubble', 'bubbles.update', args, []) : new BubbleClient(dmmf, fetcher, 'mutation', 'updateOneBubble', 'bubbles.update', args, []);
    Bubble.deleteMany = (args) => new BubbleClient(dmmf, fetcher, 'mutation', 'deleteManyBubble', 'bubbles.deleteMany', args, []);
    Bubble.updateMany = (args) => new BubbleClient(dmmf, fetcher, 'mutation', 'updateManyBubble', 'bubbles.updateMany', args, []);
    Bubble.upsert = (args) => args.select ? new BubbleClient(dmmf, fetcher, 'mutation', 'upsertOneBubble', 'bubbles.upsert', args, []) : new BubbleClient(dmmf, fetcher, 'mutation', 'upsertOneBubble', 'bubbles.upsert', args, []);
    Bubble.count = () => new BubbleClient(dmmf, fetcher, 'query', 'aggregateBubble', 'bubbles.count', {}, ['count']);
    return Bubble; // any needed until https://github.com/microsoft/TypeScript/issues/31335 is resolved
}
class BubbleClient {
    constructor(_dmmf, _fetcher, _queryType, _rootField, _clientMethod, _args, _path, _isList = false) {
        this._dmmf = _dmmf;
        this._fetcher = _fetcher;
        this._queryType = _queryType;
        this._rootField = _rootField;
        this._clientMethod = _clientMethod;
        this._args = _args;
        this._path = _path;
        this._isList = _isList;
        // @ts-ignore
        if (typeof window === 'undefined' && process.env.NODE_ENV !== 'production') {
            const error = new Error();
            if (error && error.stack) {
                const stack = error.stack;
                this._callsite = stack;
            }
        }
    }
    members(args) {
        const prefix = this._path.includes('select') ? 'select' : this._path.includes('include') ? 'include' : 'select';
        const path = [...this._path, prefix, 'members'];
        const newArgs = runtime_1.deepSet(this._args, path, args || true);
        this._isList = true;
        return new UserClient(this._dmmf, this._fetcher, this._queryType, this._rootField, this._clientMethod, newArgs, path, this._isList);
    }
    get _document() {
        const { _rootField: rootField } = this;
        const document = runtime_1.makeDocument({
            dmmf: this._dmmf,
            rootField,
            rootTypeName: this._queryType,
            select: this._args
        });
        try {
            document.validate(this._args, false, this._clientMethod);
        }
        catch (e) {
            const x = e;
            if (x.render) {
                if (this._callsite) {
                    e.message = x.render(this._callsite);
                }
            }
            throw e;
        }
        return runtime_1.transformDocument(document);
    }
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then(onfulfilled, onrejected) {
        if (!this._requestPromise) {
            this._requestPromise = this._fetcher.request(this._document, this._path, this._rootField, 'Bubble', this._isList, this._callsite);
        }
        return this._requestPromise.then(onfulfilled, onrejected);
    }
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch(onrejected) {
        if (!this._requestPromise) {
            this._requestPromise = this._fetcher.request(this._document, this._path, this._rootField, 'Bubble', this._isList, this._callsite);
        }
        return this._requestPromise.catch(onrejected);
    }
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally) {
        if (!this._requestPromise) {
            this._requestPromise = this._fetcher.request(this._document, this._path, this._rootField, 'Bubble', this._isList, this._callsite);
        }
        return this._requestPromise.finally(onfinally);
    }
}
exports.BubbleClient = BubbleClient;
function UserDelegate(dmmf, fetcher) {
    const User = (args) => new UserClient(dmmf, fetcher, 'query', 'findManyUser', 'users', args, []);
    User.findOne = (args) => args.select ? new UserClient(dmmf, fetcher, 'query', 'findOneUser', 'users.findOne', args, []) : new UserClient(dmmf, fetcher, 'query', 'findOneUser', 'users.findOne', args, []);
    User.findMany = (args) => new UserClient(dmmf, fetcher, 'query', 'findManyUser', 'users.findMany', args, []);
    User.create = (args) => args.select ? new UserClient(dmmf, fetcher, 'mutation', 'createOneUser', 'users.create', args, []) : new UserClient(dmmf, fetcher, 'mutation', 'createOneUser', 'users.create', args, []);
    User.delete = (args) => args.select ? new UserClient(dmmf, fetcher, 'mutation', 'deleteOneUser', 'users.delete', args, []) : new UserClient(dmmf, fetcher, 'mutation', 'deleteOneUser', 'users.delete', args, []);
    User.update = (args) => args.select ? new UserClient(dmmf, fetcher, 'mutation', 'updateOneUser', 'users.update', args, []) : new UserClient(dmmf, fetcher, 'mutation', 'updateOneUser', 'users.update', args, []);
    User.deleteMany = (args) => new UserClient(dmmf, fetcher, 'mutation', 'deleteManyUser', 'users.deleteMany', args, []);
    User.updateMany = (args) => new UserClient(dmmf, fetcher, 'mutation', 'updateManyUser', 'users.updateMany', args, []);
    User.upsert = (args) => args.select ? new UserClient(dmmf, fetcher, 'mutation', 'upsertOneUser', 'users.upsert', args, []) : new UserClient(dmmf, fetcher, 'mutation', 'upsertOneUser', 'users.upsert', args, []);
    User.count = () => new UserClient(dmmf, fetcher, 'query', 'aggregateUser', 'users.count', {}, ['count']);
    return User; // any needed until https://github.com/microsoft/TypeScript/issues/31335 is resolved
}
class UserClient {
    constructor(_dmmf, _fetcher, _queryType, _rootField, _clientMethod, _args, _path, _isList = false) {
        this._dmmf = _dmmf;
        this._fetcher = _fetcher;
        this._queryType = _queryType;
        this._rootField = _rootField;
        this._clientMethod = _clientMethod;
        this._args = _args;
        this._path = _path;
        this._isList = _isList;
        // @ts-ignore
        if (typeof window === 'undefined' && process.env.NODE_ENV !== 'production') {
            const error = new Error();
            if (error && error.stack) {
                const stack = error.stack;
                this._callsite = stack;
            }
        }
    }
    posts(args) {
        const prefix = this._path.includes('select') ? 'select' : this._path.includes('include') ? 'include' : 'select';
        const path = [...this._path, prefix, 'posts'];
        const newArgs = runtime_1.deepSet(this._args, path, args || true);
        this._isList = true;
        return new PostClient(this._dmmf, this._fetcher, this._queryType, this._rootField, this._clientMethod, newArgs, path, this._isList);
    }
    bubble(args) {
        const prefix = this._path.includes('select') ? 'select' : this._path.includes('include') ? 'include' : 'select';
        const path = [...this._path, prefix, 'bubble'];
        const newArgs = runtime_1.deepSet(this._args, path, args || true);
        this._isList = false;
        return new BubbleClient(this._dmmf, this._fetcher, this._queryType, this._rootField, this._clientMethod, newArgs, path, this._isList);
    }
    get _document() {
        const { _rootField: rootField } = this;
        const document = runtime_1.makeDocument({
            dmmf: this._dmmf,
            rootField,
            rootTypeName: this._queryType,
            select: this._args
        });
        try {
            document.validate(this._args, false, this._clientMethod);
        }
        catch (e) {
            const x = e;
            if (x.render) {
                if (this._callsite) {
                    e.message = x.render(this._callsite);
                }
            }
            throw e;
        }
        return runtime_1.transformDocument(document);
    }
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then(onfulfilled, onrejected) {
        if (!this._requestPromise) {
            this._requestPromise = this._fetcher.request(this._document, this._path, this._rootField, 'User', this._isList, this._callsite);
        }
        return this._requestPromise.then(onfulfilled, onrejected);
    }
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch(onrejected) {
        if (!this._requestPromise) {
            this._requestPromise = this._fetcher.request(this._document, this._path, this._rootField, 'User', this._isList, this._callsite);
        }
        return this._requestPromise.catch(onrejected);
    }
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally) {
        if (!this._requestPromise) {
            this._requestPromise = this._fetcher.request(this._document, this._path, this._rootField, 'User', this._isList, this._callsite);
        }
        return this._requestPromise.finally(onfinally);
    }
}
exports.UserClient = UserClient;
function PostDelegate(dmmf, fetcher) {
    const Post = (args) => new PostClient(dmmf, fetcher, 'query', 'findManyPost', 'posts', args, []);
    Post.findOne = (args) => args.select ? new PostClient(dmmf, fetcher, 'query', 'findOnePost', 'posts.findOne', args, []) : new PostClient(dmmf, fetcher, 'query', 'findOnePost', 'posts.findOne', args, []);
    Post.findMany = (args) => new PostClient(dmmf, fetcher, 'query', 'findManyPost', 'posts.findMany', args, []);
    Post.create = (args) => args.select ? new PostClient(dmmf, fetcher, 'mutation', 'createOnePost', 'posts.create', args, []) : new PostClient(dmmf, fetcher, 'mutation', 'createOnePost', 'posts.create', args, []);
    Post.delete = (args) => args.select ? new PostClient(dmmf, fetcher, 'mutation', 'deleteOnePost', 'posts.delete', args, []) : new PostClient(dmmf, fetcher, 'mutation', 'deleteOnePost', 'posts.delete', args, []);
    Post.update = (args) => args.select ? new PostClient(dmmf, fetcher, 'mutation', 'updateOnePost', 'posts.update', args, []) : new PostClient(dmmf, fetcher, 'mutation', 'updateOnePost', 'posts.update', args, []);
    Post.deleteMany = (args) => new PostClient(dmmf, fetcher, 'mutation', 'deleteManyPost', 'posts.deleteMany', args, []);
    Post.updateMany = (args) => new PostClient(dmmf, fetcher, 'mutation', 'updateManyPost', 'posts.updateMany', args, []);
    Post.upsert = (args) => args.select ? new PostClient(dmmf, fetcher, 'mutation', 'upsertOnePost', 'posts.upsert', args, []) : new PostClient(dmmf, fetcher, 'mutation', 'upsertOnePost', 'posts.upsert', args, []);
    Post.count = () => new PostClient(dmmf, fetcher, 'query', 'aggregatePost', 'posts.count', {}, ['count']);
    return Post; // any needed until https://github.com/microsoft/TypeScript/issues/31335 is resolved
}
class PostClient {
    constructor(_dmmf, _fetcher, _queryType, _rootField, _clientMethod, _args, _path, _isList = false) {
        this._dmmf = _dmmf;
        this._fetcher = _fetcher;
        this._queryType = _queryType;
        this._rootField = _rootField;
        this._clientMethod = _clientMethod;
        this._args = _args;
        this._path = _path;
        this._isList = _isList;
        // @ts-ignore
        if (typeof window === 'undefined' && process.env.NODE_ENV !== 'production') {
            const error = new Error();
            if (error && error.stack) {
                const stack = error.stack;
                this._callsite = stack;
            }
        }
    }
    authors(args) {
        const prefix = this._path.includes('select') ? 'select' : this._path.includes('include') ? 'include' : 'select';
        const path = [...this._path, prefix, 'authors'];
        const newArgs = runtime_1.deepSet(this._args, path, args || true);
        this._isList = true;
        return new UserClient(this._dmmf, this._fetcher, this._queryType, this._rootField, this._clientMethod, newArgs, path, this._isList);
    }
    get _document() {
        const { _rootField: rootField } = this;
        const document = runtime_1.makeDocument({
            dmmf: this._dmmf,
            rootField,
            rootTypeName: this._queryType,
            select: this._args
        });
        try {
            document.validate(this._args, false, this._clientMethod);
        }
        catch (e) {
            const x = e;
            if (x.render) {
                if (this._callsite) {
                    e.message = x.render(this._callsite);
                }
            }
            throw e;
        }
        return runtime_1.transformDocument(document);
    }
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then(onfulfilled, onrejected) {
        if (!this._requestPromise) {
            this._requestPromise = this._fetcher.request(this._document, this._path, this._rootField, 'Post', this._isList, this._callsite);
        }
        return this._requestPromise.then(onfulfilled, onrejected);
    }
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch(onrejected) {
        if (!this._requestPromise) {
            this._requestPromise = this._fetcher.request(this._document, this._path, this._rootField, 'Post', this._isList, this._callsite);
        }
        return this._requestPromise.catch(onrejected);
    }
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally) {
        if (!this._requestPromise) {
            this._requestPromise = this._fetcher.request(this._document, this._path, this._rootField, 'Post', this._isList, this._callsite);
        }
        return this._requestPromise.finally(onfinally);
    }
}
exports.PostClient = PostClient;
/**
 * DMMF
 */
exports.dmmf = { \\"datamodel\\": { \\"enums\\": [{ \\"name\\": \\"PostStatus\\", \\"values\\": [\\"DRAFT\\", \\"PUBLISHED\\"], \\"dbName\\": null }], \\"models\\": [{ \\"name\\": \\"Bubble\\", \\"isEmbedded\\": false, \\"dbName\\": null, \\"fields\\": [{ \\"name\\": \\"id\\", \\"kind\\": \\"scalar\\", \\"dbName\\": null, \\"isList\\": false, \\"isRequired\\": true, \\"isUnique\\": false, \\"isId\\": true, \\"type\\": \\"String\\", \\"default\\": { \\"name\\": \\"uuid\\", \\"returnType\\": \\"String\\", \\"args\\": [] }, \\"isGenerated\\": false, \\"isUpdatedAt\\": false }, { \\"name\\": \\"createdAt\\", \\"kind\\": \\"scalar\\", \\"dbName\\": null, \\"isList\\": false, \\"isRequired\\": true, \\"isUnique\\": false, \\"isId\\": false, \\"type\\": \\"DateTime\\", \\"default\\": { \\"name\\": \\"now\\", \\"returnType\\": \\"DateTime\\", \\"args\\": [] }, \\"isGenerated\\": false, \\"isUpdatedAt\\": false }, { \\"name\\": \\"members\\", \\"kind\\": \\"object\\", \\"dbName\\": null, \\"isList\\": true, \\"isRequired\\": false, \\"isUnique\\": false, \\"isId\\": false, \\"type\\": \\"User\\", \\"relationName\\": \\"BubbleToUser\\", \\"relationToFields\\": [], \\"relationOnDelete\\": \\"NONE\\", \\"isGenerated\\": false, \\"isUpdatedAt\\": false }], \\"isGenerated\\": false, \\"idFields\\": [] }, { \\"name\\": \\"User\\", \\"isEmbedded\\": false, \\"dbName\\": null, \\"fields\\": [{ \\"name\\": \\"id\\", \\"kind\\": \\"scalar\\", \\"dbName\\": null, \\"isList\\": false, \\"isRequired\\": true, \\"isUnique\\": false, \\"isId\\": true, \\"type\\": \\"String\\", \\"default\\": { \\"name\\": \\"cuid\\", \\"returnType\\": \\"String\\", \\"args\\": [] }, \\"isGenerated\\": false, \\"isUpdatedAt\\": false }, { \\"name\\": \\"posts\\", \\"kind\\": \\"object\\", \\"dbName\\": null, \\"isList\\": true, \\"isRequired\\": false, \\"isUnique\\": false, \\"isId\\": false, \\"type\\": \\"Post\\", \\"relationName\\": \\"PostToUser\\", \\"relationToFields\\": [\\"id\\"], \\"relationOnDelete\\": \\"NONE\\", \\"isGenerated\\": false, \\"isUpdatedAt\\": false }, { \\"name\\": \\"firstName\\", \\"kind\\": \\"scalar\\", \\"dbName\\": null, \\"isList\\": false, \\"isRequired\\": true, \\"isUnique\\": false, \\"isId\\": false, \\"type\\": \\"String\\", \\"isGenerated\\": false, \\"isUpdatedAt\\": false }, { \\"name\\": \\"lastName\\", \\"kind\\": \\"scalar\\", \\"dbName\\": null, \\"isList\\": false, \\"isRequired\\": true, \\"isUnique\\": false, \\"isId\\": false, \\"type\\": \\"String\\", \\"isGenerated\\": false, \\"isUpdatedAt\\": false }, { \\"name\\": \\"bubble\\", \\"kind\\": \\"object\\", \\"dbName\\": null, \\"isList\\": false, \\"isRequired\\": false, \\"isUnique\\": false, \\"isId\\": false, \\"type\\": \\"Bubble\\", \\"relationName\\": \\"BubbleToUser\\", \\"relationToFields\\": [\\"id\\"], \\"relationOnDelete\\": \\"NONE\\", \\"isGenerated\\": true, \\"isUpdatedAt\\": false }], \\"isGenerated\\": false, \\"idFields\\": [] }, { \\"name\\": \\"Post\\", \\"isEmbedded\\": false, \\"dbName\\": null, \\"fields\\": [{ \\"name\\": \\"id\\", \\"kind\\": \\"scalar\\", \\"dbName\\": null, \\"isList\\": false, \\"isRequired\\": true, \\"isUnique\\": false, \\"isId\\": true, \\"type\\": \\"Int\\", \\"isGenerated\\": false, \\"isUpdatedAt\\": false }, { \\"name\\": \\"authors\\", \\"kind\\": \\"object\\", \\"dbName\\": null, \\"isList\\": true, \\"isRequired\\": false, \\"isUnique\\": false, \\"isId\\": false, \\"type\\": \\"User\\", \\"relationName\\": \\"PostToUser\\", \\"relationToFields\\": [\\"id\\"], \\"relationOnDelete\\": \\"NONE\\", \\"isGenerated\\": false, \\"isUpdatedAt\\": false }, { \\"name\\": \\"rating\\", \\"kind\\": \\"scalar\\", \\"dbName\\": null, \\"isList\\": false, \\"isRequired\\": true, \\"isUnique\\": false, \\"isId\\": false, \\"type\\": \\"Float\\", \\"isGenerated\\": false, \\"isUpdatedAt\\": false }, { \\"name\\": \\"status\\", \\"kind\\": \\"enum\\", \\"dbName\\": null, \\"isList\\": false, \\"isRequired\\": true, \\"isUnique\\": false, \\"isId\\": false, \\"type\\": \\"PostStatus\\", \\"isGenerated\\": false, \\"isUpdatedAt\\": false }], \\"isGenerated\\": false, \\"idFields\\": [] }] }, \\"mappings\\": [{ \\"model\\": \\"Bubble\\", \\"plural\\": \\"bubbles\\", \\"findOne\\": \\"findOneBubble\\", \\"findMany\\": \\"findManyBubble\\", \\"create\\": \\"createOneBubble\\", \\"delete\\": \\"deleteOneBubble\\", \\"update\\": \\"updateOneBubble\\", \\"deleteMany\\": \\"deleteManyBubble\\", \\"updateMany\\": \\"updateManyBubble\\", \\"upsert\\": \\"upsertOneBubble\\", \\"aggregate\\": \\"aggregateBubble\\" }, { \\"model\\": \\"User\\", \\"plural\\": \\"users\\", \\"findOne\\": \\"findOneUser\\", \\"findMany\\": \\"findManyUser\\", \\"create\\": \\"createOneUser\\", \\"delete\\": \\"deleteOneUser\\", \\"update\\": \\"updateOneUser\\", \\"deleteMany\\": \\"deleteManyUser\\", \\"updateMany\\": \\"updateManyUser\\", \\"upsert\\": \\"upsertOneUser\\", \\"aggregate\\": \\"aggregateUser\\" }, { \\"model\\": \\"Post\\", \\"plural\\": \\"posts\\", \\"findOne\\": \\"findOnePost\\", \\"findMany\\": \\"findManyPost\\", \\"create\\": \\"createOnePost\\", \\"delete\\": \\"deleteOnePost\\", \\"update\\": \\"updateOnePost\\", \\"deleteMany\\": \\"deleteManyPost\\", \\"updateMany\\": \\"updateManyPost\\", \\"upsert\\": \\"upsertOnePost\\", \\"aggregate\\": \\"aggregatePost\\" }], \\"schema\\": { \\"enums\\": [{ \\"name\\": \\"OrderByArg\\", \\"values\\": [\\"asc\\", \\"desc\\"] }, { \\"name\\": \\"PostStatus\\", \\"values\\": [\\"DRAFT\\", \\"PUBLISHED\\"] }], \\"outputTypes\\": [{ \\"name\\": \\"Post\\", \\"fields\\": [{ \\"name\\": \\"id\\", \\"args\\": [], \\"outputType\\": { \\"type\\": \\"Int\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": true, \\"isList\\": false } }, { \\"name\\": \\"authors\\", \\"args\\": [{ \\"name\\": \\"where\\", \\"inputType\\": [{ \\"type\\": \\"UserWhereInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"orderBy\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"type\\": \\"UserOrderByInput\\", \\"kind\\": \\"object\\" }] }, { \\"name\\": \\"skip\\", \\"inputType\\": [{ \\"type\\": \\"Int\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"after\\", \\"inputType\\": [{ \\"type\\": \\"String\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"before\\", \\"inputType\\": [{ \\"type\\": \\"String\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"first\\", \\"inputType\\": [{ \\"type\\": \\"Int\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"last\\", \\"inputType\\": [{ \\"type\\": \\"Int\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }], \\"outputType\\": { \\"type\\": \\"User\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true } }, { \\"name\\": \\"rating\\", \\"args\\": [], \\"outputType\\": { \\"type\\": \\"Float\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": true, \\"isList\\": false } }, { \\"name\\": \\"status\\", \\"args\\": [], \\"outputType\\": { \\"type\\": \\"PostStatus\\", \\"kind\\": \\"enum\\", \\"isRequired\\": true, \\"isList\\": false } }] }, { \\"name\\": \\"User\\", \\"fields\\": [{ \\"name\\": \\"id\\", \\"args\\": [], \\"outputType\\": { \\"type\\": \\"ID\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": true, \\"isList\\": false } }, { \\"name\\": \\"posts\\", \\"args\\": [{ \\"name\\": \\"where\\", \\"inputType\\": [{ \\"type\\": \\"PostWhereInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"orderBy\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"type\\": \\"PostOrderByInput\\", \\"kind\\": \\"object\\" }] }, { \\"name\\": \\"skip\\", \\"inputType\\": [{ \\"type\\": \\"Int\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"after\\", \\"inputType\\": [{ \\"type\\": \\"String\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"before\\", \\"inputType\\": [{ \\"type\\": \\"String\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"first\\", \\"inputType\\": [{ \\"type\\": \\"Int\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"last\\", \\"inputType\\": [{ \\"type\\": \\"Int\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }], \\"outputType\\": { \\"type\\": \\"Post\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true } }, { \\"name\\": \\"firstName\\", \\"args\\": [], \\"outputType\\": { \\"type\\": \\"String\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": true, \\"isList\\": false } }, { \\"name\\": \\"lastName\\", \\"args\\": [], \\"outputType\\": { \\"type\\": \\"String\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": true, \\"isList\\": false } }, { \\"name\\": \\"bubble\\", \\"args\\": [], \\"outputType\\": { \\"type\\": \\"Bubble\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": false } }] }, { \\"name\\": \\"Bubble\\", \\"fields\\": [{ \\"name\\": \\"id\\", \\"args\\": [], \\"outputType\\": { \\"type\\": \\"UUID\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": true, \\"isList\\": false } }, { \\"name\\": \\"createdAt\\", \\"args\\": [], \\"outputType\\": { \\"type\\": \\"DateTime\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": true, \\"isList\\": false } }, { \\"name\\": \\"members\\", \\"args\\": [{ \\"name\\": \\"where\\", \\"inputType\\": [{ \\"type\\": \\"UserWhereInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"orderBy\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"type\\": \\"UserOrderByInput\\", \\"kind\\": \\"object\\" }] }, { \\"name\\": \\"skip\\", \\"inputType\\": [{ \\"type\\": \\"Int\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"after\\", \\"inputType\\": [{ \\"type\\": \\"String\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"before\\", \\"inputType\\": [{ \\"type\\": \\"String\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"first\\", \\"inputType\\": [{ \\"type\\": \\"Int\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"last\\", \\"inputType\\": [{ \\"type\\": \\"Int\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }], \\"outputType\\": { \\"type\\": \\"User\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true } }] }, { \\"name\\": \\"AggregateBubble\\", \\"fields\\": [{ \\"name\\": \\"count\\", \\"args\\": [], \\"outputType\\": { \\"type\\": \\"Int\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": true, \\"isList\\": false } }] }, { \\"name\\": \\"AggregateUser\\", \\"fields\\": [{ \\"name\\": \\"count\\", \\"args\\": [], \\"outputType\\": { \\"type\\": \\"Int\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": true, \\"isList\\": false } }] }, { \\"name\\": \\"AggregatePost\\", \\"fields\\": [{ \\"name\\": \\"count\\", \\"args\\": [], \\"outputType\\": { \\"type\\": \\"Int\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": true, \\"isList\\": false } }] }, { \\"name\\": \\"Query\\", \\"fields\\": [{ \\"name\\": \\"findManyBubble\\", \\"args\\": [{ \\"name\\": \\"where\\", \\"inputType\\": [{ \\"type\\": \\"BubbleWhereInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"orderBy\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"type\\": \\"BubbleOrderByInput\\", \\"kind\\": \\"object\\" }] }, { \\"name\\": \\"skip\\", \\"inputType\\": [{ \\"type\\": \\"Int\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"after\\", \\"inputType\\": [{ \\"type\\": \\"String\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"before\\", \\"inputType\\": [{ \\"type\\": \\"String\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"first\\", \\"inputType\\": [{ \\"type\\": \\"Int\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"last\\", \\"inputType\\": [{ \\"type\\": \\"Int\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }], \\"outputType\\": { \\"type\\": \\"Bubble\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true } }, { \\"name\\": \\"aggregateBubble\\", \\"args\\": [], \\"outputType\\": { \\"type\\": \\"AggregateBubble\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false } }, { \\"name\\": \\"findOneBubble\\", \\"args\\": [{ \\"name\\": \\"where\\", \\"inputType\\": [{ \\"type\\": \\"BubbleWhereUniqueInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false }] }], \\"outputType\\": { \\"type\\": \\"Bubble\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": false } }, { \\"name\\": \\"findManyUser\\", \\"args\\": [{ \\"name\\": \\"where\\", \\"inputType\\": [{ \\"type\\": \\"UserWhereInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"orderBy\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"type\\": \\"UserOrderByInput\\", \\"kind\\": \\"object\\" }] }, { \\"name\\": \\"skip\\", \\"inputType\\": [{ \\"type\\": \\"Int\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"after\\", \\"inputType\\": [{ \\"type\\": \\"String\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"before\\", \\"inputType\\": [{ \\"type\\": \\"String\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"first\\", \\"inputType\\": [{ \\"type\\": \\"Int\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"last\\", \\"inputType\\": [{ \\"type\\": \\"Int\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }], \\"outputType\\": { \\"type\\": \\"User\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true } }, { \\"name\\": \\"aggregateUser\\", \\"args\\": [], \\"outputType\\": { \\"type\\": \\"AggregateUser\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false } }, { \\"name\\": \\"findOneUser\\", \\"args\\": [{ \\"name\\": \\"where\\", \\"inputType\\": [{ \\"type\\": \\"UserWhereUniqueInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false }] }], \\"outputType\\": { \\"type\\": \\"User\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": false } }, { \\"name\\": \\"findManyPost\\", \\"args\\": [{ \\"name\\": \\"where\\", \\"inputType\\": [{ \\"type\\": \\"PostWhereInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"orderBy\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"type\\": \\"PostOrderByInput\\", \\"kind\\": \\"object\\" }] }, { \\"name\\": \\"skip\\", \\"inputType\\": [{ \\"type\\": \\"Int\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"after\\", \\"inputType\\": [{ \\"type\\": \\"String\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"before\\", \\"inputType\\": [{ \\"type\\": \\"String\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"first\\", \\"inputType\\": [{ \\"type\\": \\"Int\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"last\\", \\"inputType\\": [{ \\"type\\": \\"Int\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }], \\"outputType\\": { \\"type\\": \\"Post\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true } }, { \\"name\\": \\"aggregatePost\\", \\"args\\": [], \\"outputType\\": { \\"type\\": \\"AggregatePost\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false } }, { \\"name\\": \\"findOnePost\\", \\"args\\": [{ \\"name\\": \\"where\\", \\"inputType\\": [{ \\"type\\": \\"PostWhereUniqueInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false }] }], \\"outputType\\": { \\"type\\": \\"Post\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": false } }] }, { \\"name\\": \\"BatchPayload\\", \\"fields\\": [{ \\"name\\": \\"count\\", \\"args\\": [], \\"outputType\\": { \\"type\\": \\"Int\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": true, \\"isList\\": false } }] }, { \\"name\\": \\"Mutation\\", \\"fields\\": [{ \\"name\\": \\"createOneBubble\\", \\"args\\": [{ \\"name\\": \\"data\\", \\"inputType\\": [{ \\"type\\": \\"BubbleCreateInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false }] }], \\"outputType\\": { \\"type\\": \\"Bubble\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false } }, { \\"name\\": \\"deleteOneBubble\\", \\"args\\": [{ \\"name\\": \\"where\\", \\"inputType\\": [{ \\"type\\": \\"BubbleWhereUniqueInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false }] }], \\"outputType\\": { \\"type\\": \\"Bubble\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": false } }, { \\"name\\": \\"updateOneBubble\\", \\"args\\": [{ \\"name\\": \\"data\\", \\"inputType\\": [{ \\"type\\": \\"BubbleUpdateInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false }] }, { \\"name\\": \\"where\\", \\"inputType\\": [{ \\"type\\": \\"BubbleWhereUniqueInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false }] }], \\"outputType\\": { \\"type\\": \\"Bubble\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": false } }, { \\"name\\": \\"upsertOneBubble\\", \\"args\\": [{ \\"name\\": \\"where\\", \\"inputType\\": [{ \\"type\\": \\"BubbleWhereUniqueInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false }] }, { \\"name\\": \\"create\\", \\"inputType\\": [{ \\"type\\": \\"BubbleCreateInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false }] }, { \\"name\\": \\"update\\", \\"inputType\\": [{ \\"type\\": \\"BubbleUpdateInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false }] }], \\"outputType\\": { \\"type\\": \\"Bubble\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false } }, { \\"name\\": \\"updateManyBubble\\", \\"args\\": [{ \\"name\\": \\"data\\", \\"inputType\\": [{ \\"type\\": \\"BubbleUpdateManyMutationInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false }] }, { \\"name\\": \\"where\\", \\"inputType\\": [{ \\"type\\": \\"BubbleWhereInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": false }] }], \\"outputType\\": { \\"type\\": \\"BatchPayload\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false } }, { \\"name\\": \\"deleteManyBubble\\", \\"args\\": [{ \\"name\\": \\"where\\", \\"inputType\\": [{ \\"type\\": \\"BubbleWhereInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": false }] }], \\"outputType\\": { \\"type\\": \\"BatchPayload\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false } }, { \\"name\\": \\"createOneUser\\", \\"args\\": [{ \\"name\\": \\"data\\", \\"inputType\\": [{ \\"type\\": \\"UserCreateInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false }] }], \\"outputType\\": { \\"type\\": \\"User\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false } }, { \\"name\\": \\"deleteOneUser\\", \\"args\\": [{ \\"name\\": \\"where\\", \\"inputType\\": [{ \\"type\\": \\"UserWhereUniqueInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false }] }], \\"outputType\\": { \\"type\\": \\"User\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": false } }, { \\"name\\": \\"updateOneUser\\", \\"args\\": [{ \\"name\\": \\"data\\", \\"inputType\\": [{ \\"type\\": \\"UserUpdateInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false }] }, { \\"name\\": \\"where\\", \\"inputType\\": [{ \\"type\\": \\"UserWhereUniqueInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false }] }], \\"outputType\\": { \\"type\\": \\"User\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": false } }, { \\"name\\": \\"upsertOneUser\\", \\"args\\": [{ \\"name\\": \\"where\\", \\"inputType\\": [{ \\"type\\": \\"UserWhereUniqueInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false }] }, { \\"name\\": \\"create\\", \\"inputType\\": [{ \\"type\\": \\"UserCreateInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false }] }, { \\"name\\": \\"update\\", \\"inputType\\": [{ \\"type\\": \\"UserUpdateInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false }] }], \\"outputType\\": { \\"type\\": \\"User\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false } }, { \\"name\\": \\"updateManyUser\\", \\"args\\": [{ \\"name\\": \\"data\\", \\"inputType\\": [{ \\"type\\": \\"UserUpdateManyMutationInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false }] }, { \\"name\\": \\"where\\", \\"inputType\\": [{ \\"type\\": \\"UserWhereInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": false }] }], \\"outputType\\": { \\"type\\": \\"BatchPayload\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false } }, { \\"name\\": \\"deleteManyUser\\", \\"args\\": [{ \\"name\\": \\"where\\", \\"inputType\\": [{ \\"type\\": \\"UserWhereInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": false }] }], \\"outputType\\": { \\"type\\": \\"BatchPayload\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false } }, { \\"name\\": \\"createOnePost\\", \\"args\\": [{ \\"name\\": \\"data\\", \\"inputType\\": [{ \\"type\\": \\"PostCreateInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false }] }], \\"outputType\\": { \\"type\\": \\"Post\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false } }, { \\"name\\": \\"deleteOnePost\\", \\"args\\": [{ \\"name\\": \\"where\\", \\"inputType\\": [{ \\"type\\": \\"PostWhereUniqueInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false }] }], \\"outputType\\": { \\"type\\": \\"Post\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": false } }, { \\"name\\": \\"updateOnePost\\", \\"args\\": [{ \\"name\\": \\"data\\", \\"inputType\\": [{ \\"type\\": \\"PostUpdateInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false }] }, { \\"name\\": \\"where\\", \\"inputType\\": [{ \\"type\\": \\"PostWhereUniqueInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false }] }], \\"outputType\\": { \\"type\\": \\"Post\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": false } }, { \\"name\\": \\"upsertOnePost\\", \\"args\\": [{ \\"name\\": \\"where\\", \\"inputType\\": [{ \\"type\\": \\"PostWhereUniqueInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false }] }, { \\"name\\": \\"create\\", \\"inputType\\": [{ \\"type\\": \\"PostCreateInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false }] }, { \\"name\\": \\"update\\", \\"inputType\\": [{ \\"type\\": \\"PostUpdateInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false }] }], \\"outputType\\": { \\"type\\": \\"Post\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false } }, { \\"name\\": \\"updateManyPost\\", \\"args\\": [{ \\"name\\": \\"data\\", \\"inputType\\": [{ \\"type\\": \\"PostUpdateManyMutationInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false }] }, { \\"name\\": \\"where\\", \\"inputType\\": [{ \\"type\\": \\"PostWhereInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": false }] }], \\"outputType\\": { \\"type\\": \\"BatchPayload\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false } }, { \\"name\\": \\"deleteManyPost\\", \\"args\\": [{ \\"name\\": \\"where\\", \\"inputType\\": [{ \\"type\\": \\"PostWhereInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": false }] }], \\"outputType\\": { \\"type\\": \\"BatchPayload\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false } }] }], \\"inputTypes\\": [{ \\"name\\": \\"PostWhereInput\\", \\"fields\\": [{ \\"name\\": \\"id\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"Int\\" }, { \\"type\\": \\"IntFilter\\", \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"object\\" }], \\"isRelationFilter\\": false }, { \\"name\\": \\"authors\\", \\"inputType\\": [{ \\"type\\": \\"UserFilter\\", \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"object\\" }], \\"isRelationFilter\\": false }, { \\"name\\": \\"rating\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"Float\\" }, { \\"type\\": \\"FloatFilter\\", \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"object\\" }], \\"isRelationFilter\\": false }, { \\"name\\": \\"status\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"enum\\", \\"type\\": \\"PostStatus\\" }, { \\"type\\": \\"PostStatusFilter\\", \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"object\\" }], \\"isRelationFilter\\": false }, { \\"name\\": \\"AND\\", \\"inputType\\": [{ \\"type\\": \\"PostWhereInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true }], \\"isRelationFilter\\": true }, { \\"name\\": \\"OR\\", \\"inputType\\": [{ \\"type\\": \\"PostWhereInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true }], \\"isRelationFilter\\": true }, { \\"name\\": \\"NOT\\", \\"inputType\\": [{ \\"type\\": \\"PostWhereInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true }], \\"isRelationFilter\\": true }], \\"isWhereType\\": true, \\"atLeastOne\\": false }, { \\"name\\": \\"UserWhereInput\\", \\"fields\\": [{ \\"name\\": \\"id\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"String\\" }, { \\"type\\": \\"StringFilter\\", \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"object\\" }], \\"isRelationFilter\\": false }, { \\"name\\": \\"posts\\", \\"inputType\\": [{ \\"type\\": \\"PostFilter\\", \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"object\\" }], \\"isRelationFilter\\": false }, { \\"name\\": \\"firstName\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"String\\" }, { \\"type\\": \\"StringFilter\\", \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"object\\" }], \\"isRelationFilter\\": false }, { \\"name\\": \\"lastName\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"String\\" }, { \\"type\\": \\"StringFilter\\", \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"object\\" }], \\"isRelationFilter\\": false }, { \\"name\\": \\"AND\\", \\"inputType\\": [{ \\"type\\": \\"UserWhereInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true }], \\"isRelationFilter\\": true }, { \\"name\\": \\"OR\\", \\"inputType\\": [{ \\"type\\": \\"UserWhereInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true }], \\"isRelationFilter\\": true }, { \\"name\\": \\"NOT\\", \\"inputType\\": [{ \\"type\\": \\"UserWhereInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true }], \\"isRelationFilter\\": true }, { \\"name\\": \\"bubble\\", \\"inputType\\": [{ \\"type\\": \\"BubbleWhereInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": false }], \\"isRelationFilter\\": true }], \\"isWhereType\\": true, \\"atLeastOne\\": false }, { \\"name\\": \\"BubbleWhereInput\\", \\"fields\\": [{ \\"name\\": \\"id\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"UUID\\" }, { \\"type\\": \\"UUIDFilter\\", \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"object\\" }], \\"isRelationFilter\\": false }, { \\"name\\": \\"createdAt\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"DateTime\\" }, { \\"type\\": \\"DateTimeFilter\\", \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"object\\" }], \\"isRelationFilter\\": false }, { \\"name\\": \\"members\\", \\"inputType\\": [{ \\"type\\": \\"UserFilter\\", \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"object\\" }], \\"isRelationFilter\\": false }, { \\"name\\": \\"AND\\", \\"inputType\\": [{ \\"type\\": \\"BubbleWhereInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true }], \\"isRelationFilter\\": true }, { \\"name\\": \\"OR\\", \\"inputType\\": [{ \\"type\\": \\"BubbleWhereInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true }], \\"isRelationFilter\\": true }, { \\"name\\": \\"NOT\\", \\"inputType\\": [{ \\"type\\": \\"BubbleWhereInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true }], \\"isRelationFilter\\": true }], \\"isWhereType\\": true, \\"atLeastOne\\": false }, { \\"name\\": \\"BubbleWhereUniqueInput\\", \\"fields\\": [{ \\"name\\": \\"id\\", \\"inputType\\": [{ \\"type\\": \\"UUID\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }], \\"atLeastOne\\": true }, { \\"name\\": \\"UserWhereUniqueInput\\", \\"fields\\": [{ \\"name\\": \\"id\\", \\"inputType\\": [{ \\"type\\": \\"ID\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }], \\"atLeastOne\\": true }, { \\"name\\": \\"PostWhereUniqueInput\\", \\"fields\\": [{ \\"name\\": \\"id\\", \\"inputType\\": [{ \\"type\\": \\"Int\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }], \\"atLeastOne\\": true }, { \\"name\\": \\"PostCreateWithoutAuthorsInput\\", \\"fields\\": [{ \\"name\\": \\"rating\\", \\"inputType\\": [{ \\"type\\": \\"Float\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": true, \\"isList\\": false }] }, { \\"name\\": \\"status\\", \\"inputType\\": [{ \\"type\\": \\"PostStatus\\", \\"kind\\": \\"enum\\", \\"isRequired\\": true, \\"isList\\": false }] }] }, { \\"name\\": \\"PostCreateManyWithoutPostsInput\\", \\"fields\\": [{ \\"name\\": \\"create\\", \\"inputType\\": [{ \\"type\\": \\"PostCreateWithoutAuthorsInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true }] }, { \\"name\\": \\"connect\\", \\"inputType\\": [{ \\"type\\": \\"PostWhereUniqueInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true }] }] }, { \\"name\\": \\"UserCreateWithoutBubbleInput\\", \\"fields\\": [{ \\"name\\": \\"id\\", \\"inputType\\": [{ \\"type\\": \\"ID\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"firstName\\", \\"inputType\\": [{ \\"type\\": \\"String\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": true, \\"isList\\": false }] }, { \\"name\\": \\"lastName\\", \\"inputType\\": [{ \\"type\\": \\"String\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": true, \\"isList\\": false }] }, { \\"name\\": \\"posts\\", \\"inputType\\": [{ \\"type\\": \\"PostCreateManyWithoutPostsInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": false }] }] }, { \\"name\\": \\"UserCreateManyWithoutMembersInput\\", \\"fields\\": [{ \\"name\\": \\"create\\", \\"inputType\\": [{ \\"type\\": \\"UserCreateWithoutBubbleInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true }] }, { \\"name\\": \\"connect\\", \\"inputType\\": [{ \\"type\\": \\"UserWhereUniqueInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true }] }] }, { \\"name\\": \\"BubbleCreateInput\\", \\"fields\\": [{ \\"name\\": \\"id\\", \\"inputType\\": [{ \\"type\\": \\"UUID\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"createdAt\\", \\"inputType\\": [{ \\"type\\": \\"DateTime\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"members\\", \\"inputType\\": [{ \\"type\\": \\"UserCreateManyWithoutMembersInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": false }] }] }, { \\"name\\": \\"PostUpdateWithoutAuthorsDataInput\\", \\"fields\\": [{ \\"name\\": \\"id\\", \\"inputType\\": [{ \\"type\\": \\"Int\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"rating\\", \\"inputType\\": [{ \\"type\\": \\"Float\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"status\\", \\"inputType\\": [{ \\"type\\": \\"PostStatus\\", \\"kind\\": \\"enum\\", \\"isRequired\\": false, \\"isList\\": false }] }] }, { \\"name\\": \\"PostUpdateWithWhereUniqueWithoutAuthorsInput\\", \\"fields\\": [{ \\"name\\": \\"where\\", \\"inputType\\": [{ \\"type\\": \\"PostWhereUniqueInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false }] }, { \\"name\\": \\"data\\", \\"inputType\\": [{ \\"type\\": \\"PostUpdateWithoutAuthorsDataInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false }] }] }, { \\"name\\": \\"PostScalarWhereInput\\", \\"fields\\": [{ \\"name\\": \\"id\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"Int\\" }, { \\"type\\": \\"IntFilter\\", \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"object\\" }], \\"isRelationFilter\\": false }, { \\"name\\": \\"authors\\", \\"inputType\\": [{ \\"type\\": \\"UserFilter\\", \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"object\\" }], \\"isRelationFilter\\": false }, { \\"name\\": \\"rating\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"Float\\" }, { \\"type\\": \\"FloatFilter\\", \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"object\\" }], \\"isRelationFilter\\": false }, { \\"name\\": \\"status\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"enum\\", \\"type\\": \\"PostStatus\\" }, { \\"type\\": \\"PostStatusFilter\\", \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"object\\" }], \\"isRelationFilter\\": false }, { \\"name\\": \\"AND\\", \\"inputType\\": [{ \\"type\\": \\"PostScalarWhereInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true }], \\"isRelationFilter\\": true }, { \\"name\\": \\"OR\\", \\"inputType\\": [{ \\"type\\": \\"PostScalarWhereInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true }], \\"isRelationFilter\\": true }, { \\"name\\": \\"NOT\\", \\"inputType\\": [{ \\"type\\": \\"PostScalarWhereInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true }], \\"isRelationFilter\\": true }], \\"isWhereType\\": true, \\"atLeastOne\\": false }, { \\"name\\": \\"PostUpdateManyDataInput\\", \\"fields\\": [{ \\"name\\": \\"id\\", \\"inputType\\": [{ \\"type\\": \\"Int\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"rating\\", \\"inputType\\": [{ \\"type\\": \\"Float\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"status\\", \\"inputType\\": [{ \\"type\\": \\"PostStatus\\", \\"kind\\": \\"enum\\", \\"isRequired\\": false, \\"isList\\": false }] }] }, { \\"name\\": \\"PostUpdateManyWithWhereNestedInput\\", \\"fields\\": [{ \\"name\\": \\"where\\", \\"inputType\\": [{ \\"type\\": \\"PostScalarWhereInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false }] }, { \\"name\\": \\"data\\", \\"inputType\\": [{ \\"type\\": \\"PostUpdateManyDataInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false }] }] }, { \\"name\\": \\"PostUpsertWithWhereUniqueWithoutAuthorsInput\\", \\"fields\\": [{ \\"name\\": \\"where\\", \\"inputType\\": [{ \\"type\\": \\"PostWhereUniqueInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false }] }, { \\"name\\": \\"update\\", \\"inputType\\": [{ \\"type\\": \\"PostUpdateWithoutAuthorsDataInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false }] }, { \\"name\\": \\"create\\", \\"inputType\\": [{ \\"type\\": \\"PostCreateWithoutAuthorsInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false }] }] }, { \\"name\\": \\"PostUpdateManyWithoutAuthorsInput\\", \\"fields\\": [{ \\"name\\": \\"create\\", \\"inputType\\": [{ \\"type\\": \\"PostCreateWithoutAuthorsInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true }] }, { \\"name\\": \\"connect\\", \\"inputType\\": [{ \\"type\\": \\"PostWhereUniqueInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true }] }, { \\"name\\": \\"set\\", \\"inputType\\": [{ \\"type\\": \\"PostWhereUniqueInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true }] }, { \\"name\\": \\"disconnect\\", \\"inputType\\": [{ \\"type\\": \\"PostWhereUniqueInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true }] }, { \\"name\\": \\"delete\\", \\"inputType\\": [{ \\"type\\": \\"PostWhereUniqueInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true }] }, { \\"name\\": \\"update\\", \\"inputType\\": [{ \\"type\\": \\"PostUpdateWithWhereUniqueWithoutAuthorsInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true }] }, { \\"name\\": \\"updateMany\\", \\"inputType\\": [{ \\"type\\": \\"PostUpdateManyWithWhereNestedInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true }] }, { \\"name\\": \\"deleteMany\\", \\"inputType\\": [{ \\"type\\": \\"PostScalarWhereInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true }] }, { \\"name\\": \\"upsert\\", \\"inputType\\": [{ \\"type\\": \\"PostUpsertWithWhereUniqueWithoutAuthorsInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true }] }] }, { \\"name\\": \\"UserUpdateWithoutBubbleDataInput\\", \\"fields\\": [{ \\"name\\": \\"id\\", \\"inputType\\": [{ \\"type\\": \\"ID\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"firstName\\", \\"inputType\\": [{ \\"type\\": \\"String\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"lastName\\", \\"inputType\\": [{ \\"type\\": \\"String\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"posts\\", \\"inputType\\": [{ \\"type\\": \\"PostUpdateManyWithoutAuthorsInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": false }] }] }, { \\"name\\": \\"UserUpdateWithWhereUniqueWithoutBubbleInput\\", \\"fields\\": [{ \\"name\\": \\"where\\", \\"inputType\\": [{ \\"type\\": \\"UserWhereUniqueInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false }] }, { \\"name\\": \\"data\\", \\"inputType\\": [{ \\"type\\": \\"UserUpdateWithoutBubbleDataInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false }] }] }, { \\"name\\": \\"UserScalarWhereInput\\", \\"fields\\": [{ \\"name\\": \\"id\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"String\\" }, { \\"type\\": \\"StringFilter\\", \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"object\\" }], \\"isRelationFilter\\": false }, { \\"name\\": \\"posts\\", \\"inputType\\": [{ \\"type\\": \\"PostFilter\\", \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"object\\" }], \\"isRelationFilter\\": false }, { \\"name\\": \\"firstName\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"String\\" }, { \\"type\\": \\"StringFilter\\", \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"object\\" }], \\"isRelationFilter\\": false }, { \\"name\\": \\"lastName\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"String\\" }, { \\"type\\": \\"StringFilter\\", \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"object\\" }], \\"isRelationFilter\\": false }, { \\"name\\": \\"AND\\", \\"inputType\\": [{ \\"type\\": \\"UserScalarWhereInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true }], \\"isRelationFilter\\": true }, { \\"name\\": \\"OR\\", \\"inputType\\": [{ \\"type\\": \\"UserScalarWhereInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true }], \\"isRelationFilter\\": true }, { \\"name\\": \\"NOT\\", \\"inputType\\": [{ \\"type\\": \\"UserScalarWhereInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true }], \\"isRelationFilter\\": true }], \\"isWhereType\\": true, \\"atLeastOne\\": false }, { \\"name\\": \\"UserUpdateManyDataInput\\", \\"fields\\": [{ \\"name\\": \\"id\\", \\"inputType\\": [{ \\"type\\": \\"ID\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"firstName\\", \\"inputType\\": [{ \\"type\\": \\"String\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"lastName\\", \\"inputType\\": [{ \\"type\\": \\"String\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }] }, { \\"name\\": \\"UserUpdateManyWithWhereNestedInput\\", \\"fields\\": [{ \\"name\\": \\"where\\", \\"inputType\\": [{ \\"type\\": \\"UserScalarWhereInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false }] }, { \\"name\\": \\"data\\", \\"inputType\\": [{ \\"type\\": \\"UserUpdateManyDataInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false }] }] }, { \\"name\\": \\"UserUpsertWithWhereUniqueWithoutBubbleInput\\", \\"fields\\": [{ \\"name\\": \\"where\\", \\"inputType\\": [{ \\"type\\": \\"UserWhereUniqueInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false }] }, { \\"name\\": \\"update\\", \\"inputType\\": [{ \\"type\\": \\"UserUpdateWithoutBubbleDataInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false }] }, { \\"name\\": \\"create\\", \\"inputType\\": [{ \\"type\\": \\"UserCreateWithoutBubbleInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false }] }] }, { \\"name\\": \\"UserUpdateManyWithoutBubbleInput\\", \\"fields\\": [{ \\"name\\": \\"create\\", \\"inputType\\": [{ \\"type\\": \\"UserCreateWithoutBubbleInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true }] }, { \\"name\\": \\"connect\\", \\"inputType\\": [{ \\"type\\": \\"UserWhereUniqueInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true }] }, { \\"name\\": \\"set\\", \\"inputType\\": [{ \\"type\\": \\"UserWhereUniqueInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true }] }, { \\"name\\": \\"disconnect\\", \\"inputType\\": [{ \\"type\\": \\"UserWhereUniqueInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true }] }, { \\"name\\": \\"delete\\", \\"inputType\\": [{ \\"type\\": \\"UserWhereUniqueInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true }] }, { \\"name\\": \\"update\\", \\"inputType\\": [{ \\"type\\": \\"UserUpdateWithWhereUniqueWithoutBubbleInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true }] }, { \\"name\\": \\"updateMany\\", \\"inputType\\": [{ \\"type\\": \\"UserUpdateManyWithWhereNestedInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true }] }, { \\"name\\": \\"deleteMany\\", \\"inputType\\": [{ \\"type\\": \\"UserScalarWhereInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true }] }, { \\"name\\": \\"upsert\\", \\"inputType\\": [{ \\"type\\": \\"UserUpsertWithWhereUniqueWithoutBubbleInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true }] }] }, { \\"name\\": \\"BubbleUpdateInput\\", \\"fields\\": [{ \\"name\\": \\"id\\", \\"inputType\\": [{ \\"type\\": \\"UUID\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"createdAt\\", \\"inputType\\": [{ \\"type\\": \\"DateTime\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"members\\", \\"inputType\\": [{ \\"type\\": \\"UserUpdateManyWithoutBubbleInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": false }] }] }, { \\"name\\": \\"BubbleUpdateManyMutationInput\\", \\"fields\\": [{ \\"name\\": \\"id\\", \\"inputType\\": [{ \\"type\\": \\"UUID\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"createdAt\\", \\"inputType\\": [{ \\"type\\": \\"DateTime\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }] }, { \\"name\\": \\"BubbleCreateWithoutMembersInput\\", \\"fields\\": [{ \\"name\\": \\"id\\", \\"inputType\\": [{ \\"type\\": \\"UUID\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"createdAt\\", \\"inputType\\": [{ \\"type\\": \\"DateTime\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }] }, { \\"name\\": \\"BubbleCreateOneWithoutBubbleInput\\", \\"fields\\": [{ \\"name\\": \\"create\\", \\"inputType\\": [{ \\"type\\": \\"BubbleCreateWithoutMembersInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"connect\\", \\"inputType\\": [{ \\"type\\": \\"BubbleWhereUniqueInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": false }] }] }, { \\"name\\": \\"UserCreateInput\\", \\"fields\\": [{ \\"name\\": \\"id\\", \\"inputType\\": [{ \\"type\\": \\"ID\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"firstName\\", \\"inputType\\": [{ \\"type\\": \\"String\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": true, \\"isList\\": false }] }, { \\"name\\": \\"lastName\\", \\"inputType\\": [{ \\"type\\": \\"String\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": true, \\"isList\\": false }] }, { \\"name\\": \\"posts\\", \\"inputType\\": [{ \\"type\\": \\"PostCreateManyWithoutPostsInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"bubble\\", \\"inputType\\": [{ \\"type\\": \\"BubbleCreateOneWithoutBubbleInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": false }] }] }, { \\"name\\": \\"BubbleUpdateWithoutMembersDataInput\\", \\"fields\\": [{ \\"name\\": \\"id\\", \\"inputType\\": [{ \\"type\\": \\"UUID\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"createdAt\\", \\"inputType\\": [{ \\"type\\": \\"DateTime\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }] }, { \\"name\\": \\"BubbleUpsertWithoutMembersInput\\", \\"fields\\": [{ \\"name\\": \\"update\\", \\"inputType\\": [{ \\"type\\": \\"BubbleUpdateWithoutMembersDataInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false }] }, { \\"name\\": \\"create\\", \\"inputType\\": [{ \\"type\\": \\"BubbleCreateWithoutMembersInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false }] }] }, { \\"name\\": \\"BubbleUpdateOneWithoutMembersInput\\", \\"fields\\": [{ \\"name\\": \\"create\\", \\"inputType\\": [{ \\"type\\": \\"BubbleCreateWithoutMembersInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"connect\\", \\"inputType\\": [{ \\"type\\": \\"BubbleWhereUniqueInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"disconnect\\", \\"inputType\\": [{ \\"type\\": \\"Boolean\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"delete\\", \\"inputType\\": [{ \\"type\\": \\"Boolean\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"update\\", \\"inputType\\": [{ \\"type\\": \\"BubbleUpdateWithoutMembersDataInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"upsert\\", \\"inputType\\": [{ \\"type\\": \\"BubbleUpsertWithoutMembersInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": false }] }] }, { \\"name\\": \\"UserUpdateInput\\", \\"fields\\": [{ \\"name\\": \\"id\\", \\"inputType\\": [{ \\"type\\": \\"ID\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"firstName\\", \\"inputType\\": [{ \\"type\\": \\"String\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"lastName\\", \\"inputType\\": [{ \\"type\\": \\"String\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"posts\\", \\"inputType\\": [{ \\"type\\": \\"PostUpdateManyWithoutAuthorsInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"bubble\\", \\"inputType\\": [{ \\"type\\": \\"BubbleUpdateOneWithoutMembersInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": false }] }] }, { \\"name\\": \\"UserUpdateManyMutationInput\\", \\"fields\\": [{ \\"name\\": \\"id\\", \\"inputType\\": [{ \\"type\\": \\"ID\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"firstName\\", \\"inputType\\": [{ \\"type\\": \\"String\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"lastName\\", \\"inputType\\": [{ \\"type\\": \\"String\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }] }, { \\"name\\": \\"UserCreateWithoutPostsInput\\", \\"fields\\": [{ \\"name\\": \\"id\\", \\"inputType\\": [{ \\"type\\": \\"ID\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"firstName\\", \\"inputType\\": [{ \\"type\\": \\"String\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": true, \\"isList\\": false }] }, { \\"name\\": \\"lastName\\", \\"inputType\\": [{ \\"type\\": \\"String\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": true, \\"isList\\": false }] }, { \\"name\\": \\"bubble\\", \\"inputType\\": [{ \\"type\\": \\"BubbleCreateOneWithoutBubbleInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": false }] }] }, { \\"name\\": \\"UserCreateManyWithoutAuthorsInput\\", \\"fields\\": [{ \\"name\\": \\"create\\", \\"inputType\\": [{ \\"type\\": \\"UserCreateWithoutPostsInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true }] }, { \\"name\\": \\"connect\\", \\"inputType\\": [{ \\"type\\": \\"UserWhereUniqueInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true }] }] }, { \\"name\\": \\"PostCreateInput\\", \\"fields\\": [{ \\"name\\": \\"rating\\", \\"inputType\\": [{ \\"type\\": \\"Float\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": true, \\"isList\\": false }] }, { \\"name\\": \\"status\\", \\"inputType\\": [{ \\"type\\": \\"PostStatus\\", \\"kind\\": \\"enum\\", \\"isRequired\\": true, \\"isList\\": false }] }, { \\"name\\": \\"authors\\", \\"inputType\\": [{ \\"type\\": \\"UserCreateManyWithoutAuthorsInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": false }] }] }, { \\"name\\": \\"UserUpdateWithoutPostsDataInput\\", \\"fields\\": [{ \\"name\\": \\"id\\", \\"inputType\\": [{ \\"type\\": \\"ID\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"firstName\\", \\"inputType\\": [{ \\"type\\": \\"String\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"lastName\\", \\"inputType\\": [{ \\"type\\": \\"String\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"bubble\\", \\"inputType\\": [{ \\"type\\": \\"BubbleUpdateOneWithoutMembersInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": false }] }] }, { \\"name\\": \\"UserUpdateWithWhereUniqueWithoutPostsInput\\", \\"fields\\": [{ \\"name\\": \\"where\\", \\"inputType\\": [{ \\"type\\": \\"UserWhereUniqueInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false }] }, { \\"name\\": \\"data\\", \\"inputType\\": [{ \\"type\\": \\"UserUpdateWithoutPostsDataInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false }] }] }, { \\"name\\": \\"UserUpsertWithWhereUniqueWithoutPostsInput\\", \\"fields\\": [{ \\"name\\": \\"where\\", \\"inputType\\": [{ \\"type\\": \\"UserWhereUniqueInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false }] }, { \\"name\\": \\"update\\", \\"inputType\\": [{ \\"type\\": \\"UserUpdateWithoutPostsDataInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false }] }, { \\"name\\": \\"create\\", \\"inputType\\": [{ \\"type\\": \\"UserCreateWithoutPostsInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": true, \\"isList\\": false }] }] }, { \\"name\\": \\"UserUpdateManyWithoutPostsInput\\", \\"fields\\": [{ \\"name\\": \\"create\\", \\"inputType\\": [{ \\"type\\": \\"UserCreateWithoutPostsInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true }] }, { \\"name\\": \\"connect\\", \\"inputType\\": [{ \\"type\\": \\"UserWhereUniqueInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true }] }, { \\"name\\": \\"set\\", \\"inputType\\": [{ \\"type\\": \\"UserWhereUniqueInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true }] }, { \\"name\\": \\"disconnect\\", \\"inputType\\": [{ \\"type\\": \\"UserWhereUniqueInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true }] }, { \\"name\\": \\"delete\\", \\"inputType\\": [{ \\"type\\": \\"UserWhereUniqueInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true }] }, { \\"name\\": \\"update\\", \\"inputType\\": [{ \\"type\\": \\"UserUpdateWithWhereUniqueWithoutPostsInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true }] }, { \\"name\\": \\"updateMany\\", \\"inputType\\": [{ \\"type\\": \\"UserUpdateManyWithWhereNestedInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true }] }, { \\"name\\": \\"deleteMany\\", \\"inputType\\": [{ \\"type\\": \\"UserScalarWhereInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true }] }, { \\"name\\": \\"upsert\\", \\"inputType\\": [{ \\"type\\": \\"UserUpsertWithWhereUniqueWithoutPostsInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": true }] }] }, { \\"name\\": \\"PostUpdateInput\\", \\"fields\\": [{ \\"name\\": \\"id\\", \\"inputType\\": [{ \\"type\\": \\"Int\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"rating\\", \\"inputType\\": [{ \\"type\\": \\"Float\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"status\\", \\"inputType\\": [{ \\"type\\": \\"PostStatus\\", \\"kind\\": \\"enum\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"authors\\", \\"inputType\\": [{ \\"type\\": \\"UserUpdateManyWithoutPostsInput\\", \\"kind\\": \\"object\\", \\"isRequired\\": false, \\"isList\\": false }] }] }, { \\"name\\": \\"PostUpdateManyMutationInput\\", \\"fields\\": [{ \\"name\\": \\"id\\", \\"inputType\\": [{ \\"type\\": \\"Int\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"rating\\", \\"inputType\\": [{ \\"type\\": \\"Float\\", \\"kind\\": \\"scalar\\", \\"isRequired\\": false, \\"isList\\": false }] }, { \\"name\\": \\"status\\", \\"inputType\\": [{ \\"type\\": \\"PostStatus\\", \\"kind\\": \\"enum\\", \\"isRequired\\": false, \\"isList\\": false }] }] }, { \\"name\\": \\"IntFilter\\", \\"fields\\": [{ \\"name\\": \\"equals\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"Int\\" }] }, { \\"name\\": \\"not\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"Int\\" }, { \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"IntFilter\\" }] }, { \\"name\\": \\"in\\", \\"inputType\\": [{ \\"isList\\": true, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"Int\\" }] }, { \\"name\\": \\"notIn\\", \\"inputType\\": [{ \\"isList\\": true, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"Int\\" }] }, { \\"name\\": \\"lt\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"Int\\" }] }, { \\"name\\": \\"lte\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"Int\\" }] }, { \\"name\\": \\"gt\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"Int\\" }] }, { \\"name\\": \\"gte\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"Int\\" }] }], \\"atLeastOne\\": false }, { \\"name\\": \\"UserFilter\\", \\"fields\\": [{ \\"name\\": \\"every\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"object\\", \\"type\\": \\"UserWhereInput\\" }] }, { \\"name\\": \\"some\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"object\\", \\"type\\": \\"UserWhereInput\\" }] }, { \\"name\\": \\"none\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"object\\", \\"type\\": \\"UserWhereInput\\" }] }], \\"atLeastOne\\": false }, { \\"name\\": \\"FloatFilter\\", \\"fields\\": [{ \\"name\\": \\"equals\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"Float\\" }] }, { \\"name\\": \\"not\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"Float\\" }, { \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"FloatFilter\\" }] }, { \\"name\\": \\"in\\", \\"inputType\\": [{ \\"isList\\": true, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"Float\\" }] }, { \\"name\\": \\"notIn\\", \\"inputType\\": [{ \\"isList\\": true, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"Float\\" }] }, { \\"name\\": \\"lt\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"Float\\" }] }, { \\"name\\": \\"lte\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"Float\\" }] }, { \\"name\\": \\"gt\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"Float\\" }] }, { \\"name\\": \\"gte\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"Float\\" }] }], \\"atLeastOne\\": false }, { \\"name\\": \\"PostStatusFilter\\", \\"fields\\": [], \\"atLeastOne\\": false }, { \\"name\\": \\"StringFilter\\", \\"fields\\": [{ \\"name\\": \\"equals\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"String\\" }] }, { \\"name\\": \\"not\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"String\\" }, { \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"StringFilter\\" }] }, { \\"name\\": \\"in\\", \\"inputType\\": [{ \\"isList\\": true, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"String\\" }] }, { \\"name\\": \\"notIn\\", \\"inputType\\": [{ \\"isList\\": true, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"String\\" }] }, { \\"name\\": \\"lt\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"String\\" }] }, { \\"name\\": \\"lte\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"String\\" }] }, { \\"name\\": \\"gt\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"String\\" }] }, { \\"name\\": \\"gte\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"String\\" }] }, { \\"name\\": \\"contains\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"String\\" }] }, { \\"name\\": \\"startsWith\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"String\\" }] }, { \\"name\\": \\"endsWith\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"String\\" }] }], \\"atLeastOne\\": false }, { \\"name\\": \\"PostFilter\\", \\"fields\\": [{ \\"name\\": \\"every\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"object\\", \\"type\\": \\"PostWhereInput\\" }] }, { \\"name\\": \\"some\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"object\\", \\"type\\": \\"PostWhereInput\\" }] }, { \\"name\\": \\"none\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"object\\", \\"type\\": \\"PostWhereInput\\" }] }], \\"atLeastOne\\": false }, { \\"name\\": \\"UUIDFilter\\", \\"fields\\": [{ \\"name\\": \\"equals\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"UUID\\" }] }, { \\"name\\": \\"not\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"UUID\\" }, { \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"UUIDFilter\\" }] }, { \\"name\\": \\"in\\", \\"inputType\\": [{ \\"isList\\": true, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"UUID\\" }] }, { \\"name\\": \\"notIn\\", \\"inputType\\": [{ \\"isList\\": true, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"UUID\\" }] }, { \\"name\\": \\"lt\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"UUID\\" }] }, { \\"name\\": \\"lte\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"UUID\\" }] }, { \\"name\\": \\"gt\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"UUID\\" }] }, { \\"name\\": \\"gte\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"UUID\\" }] }, { \\"name\\": \\"contains\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"UUID\\" }] }, { \\"name\\": \\"startsWith\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"UUID\\" }] }, { \\"name\\": \\"endsWith\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"UUID\\" }] }], \\"atLeastOne\\": false }, { \\"name\\": \\"DateTimeFilter\\", \\"fields\\": [{ \\"name\\": \\"equals\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"DateTime\\" }] }, { \\"name\\": \\"not\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"DateTime\\" }, { \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"DateTimeFilter\\" }] }, { \\"name\\": \\"in\\", \\"inputType\\": [{ \\"isList\\": true, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"DateTime\\" }] }, { \\"name\\": \\"notIn\\", \\"inputType\\": [{ \\"isList\\": true, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"DateTime\\" }] }, { \\"name\\": \\"lt\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"DateTime\\" }] }, { \\"name\\": \\"lte\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"DateTime\\" }] }, { \\"name\\": \\"gt\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"DateTime\\" }] }, { \\"name\\": \\"gte\\", \\"inputType\\": [{ \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"scalar\\", \\"type\\": \\"DateTime\\" }] }], \\"atLeastOne\\": false }, { \\"name\\": \\"BubbleOrderByInput\\", \\"atLeastOne\\": true, \\"atMostOne\\": true, \\"isOrderType\\": true, \\"fields\\": [{ \\"name\\": \\"id\\", \\"inputType\\": [{ \\"type\\": \\"OrderByArg\\", \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"enum\\" }], \\"isRelationFilter\\": false }, { \\"name\\": \\"createdAt\\", \\"inputType\\": [{ \\"type\\": \\"OrderByArg\\", \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"enum\\" }], \\"isRelationFilter\\": false }] }, { \\"name\\": \\"UserOrderByInput\\", \\"atLeastOne\\": true, \\"atMostOne\\": true, \\"isOrderType\\": true, \\"fields\\": [{ \\"name\\": \\"id\\", \\"inputType\\": [{ \\"type\\": \\"OrderByArg\\", \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"enum\\" }], \\"isRelationFilter\\": false }, { \\"name\\": \\"firstName\\", \\"inputType\\": [{ \\"type\\": \\"OrderByArg\\", \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"enum\\" }], \\"isRelationFilter\\": false }, { \\"name\\": \\"lastName\\", \\"inputType\\": [{ \\"type\\": \\"OrderByArg\\", \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"enum\\" }], \\"isRelationFilter\\": false }] }, { \\"name\\": \\"PostOrderByInput\\", \\"atLeastOne\\": true, \\"atMostOne\\": true, \\"isOrderType\\": true, \\"fields\\": [{ \\"name\\": \\"id\\", \\"inputType\\": [{ \\"type\\": \\"OrderByArg\\", \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"enum\\" }], \\"isRelationFilter\\": false }, { \\"name\\": \\"rating\\", \\"inputType\\": [{ \\"type\\": \\"OrderByArg\\", \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"enum\\" }], \\"isRelationFilter\\": false }, { \\"name\\": \\"status\\", \\"inputType\\": [{ \\"type\\": \\"OrderByArg\\", \\"isList\\": false, \\"isRequired\\": false, \\"kind\\": \\"enum\\" }], \\"isRelationFilter\\": false }] }] } };
"
`;

exports[`integrates together: photon typescript declaration 1`] = `
"import { DMMF, DMMFClass, Engine } from './runtime';
/**
 * Utility Types
 */
export declare type Enumerable<T> = T | Array<T>;
export declare type MergeTruthyValues<R extends object, S extends object> = {
    [key in keyof S | keyof R]: key extends false ? never : key extends keyof S ? S[key] extends false ? never : S[key] : key extends keyof R ? R[key] : never;
};
export declare type CleanupNever<T> = {
    [key in keyof T]: T[key] extends never ? never : key;
}[keyof T];
/**
 * Subset
 * @desc From \`T\` pick properties that exist in \`U\`. Simple version of Intersection
 */
export declare type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
};
declare class PhotonFetcher {
    private readonly photon;
    private readonly engine;
    private readonly debug;
    private readonly hooks?;
    constructor(photon: Photon, engine: Engine, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, path?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    protected unpack(data: any, path: string[], rootField?: string, isList?: boolean): any;
}
/**
 * Client
**/
export declare type Datasources = {};
export interface PhotonOptions {
    datasources?: Datasources;
    debug?: boolean | {
        engine?: boolean;
        library?: boolean;
    };
    /**
     * You probably don't want to use this. \`__internal\` is used by internal tooling.
     */
    __internal?: {
        hooks?: Hooks;
        engine?: {
            cwd?: string;
            binaryPath?: string;
        };
    };
}
export declare type Hooks = {
    beforeRequest?: (options: {
        query: string;
        path: string[];
        rootField?: string;
        typeName?: string;
        document: any;
    }) => any;
};
export declare class Photon {
    private fetcher;
    private readonly dmmf;
    private readonly engine;
    private readonly datamodel;
    private connectionPromise?;
    constructor(options?: PhotonOptions);
    private connectEngine;
    connect(): Promise<void>;
    disconnect(): Promise<void>;
    readonly bubbles: BubbleDelegate;
    readonly users: UserDelegate;
    readonly posts: PostDelegate;
}
export declare const OrderByArg: {
    asc: \\"asc\\";
    desc: \\"desc\\";
};
export declare type OrderByArg = (typeof OrderByArg)[keyof typeof OrderByArg];
export declare const PostStatus: {
    DRAFT: \\"DRAFT\\";
    PUBLISHED: \\"PUBLISHED\\";
};
export declare type PostStatus = (typeof PostStatus)[keyof typeof PostStatus];
/**
 * Model Bubble
 */
export declare type Bubble = {
    id: string;
    createdAt: string;
};
export declare type BubbleScalars = 'id' | 'createdAt';
export declare type BubbleSelect = {
    id?: boolean;
    createdAt?: boolean;
    members?: boolean | FindManyUserSelectArgsOptional;
};
export declare type BubbleInclude = {
    members?: boolean | FindManyUserIncludeArgsOptional;
};
declare type BubbleDefault = {
    id: true;
    createdAt: true;
};
declare type BubbleGetSelectPayload<S extends boolean | BubbleSelect> = S extends true ? Bubble : S extends BubbleSelect ? {
    [P in CleanupNever<MergeTruthyValues<{}, S>>]: P extends BubbleScalars ? Bubble[P] : P extends 'members' ? Array<UserGetSelectPayload<ExtractFindManyUserSelectArgs<S[P]>>> : never;
} : never;
declare type BubbleGetIncludePayload<S extends boolean | BubbleInclude> = S extends true ? Bubble : S extends BubbleInclude ? {
    [P in CleanupNever<MergeTruthyValues<BubbleDefault, S>>]: P extends BubbleScalars ? Bubble[P] : P extends 'members' ? Array<UserGetIncludePayload<ExtractFindManyUserIncludeArgs<S[P]>>> : never;
} : never;
export interface BubbleDelegate {
    <T extends FindManyBubbleArgs>(args?: Subset<T, FindManyBubbleArgs>): T extends FindManyBubbleArgsRequired ? 'Please either choose \`select\` or \`include\`' : T extends FindManyBubbleSelectArgs ? Promise<Array<BubbleGetSelectPayload<ExtractFindManyBubbleSelectArgs<T>>>> : T extends FindManyBubbleIncludeArgs ? Promise<Array<BubbleGetIncludePayload<ExtractFindManyBubbleIncludeArgs<T>>>> : Promise<Array<Bubble>>;
    findOne<T extends FindOneBubbleArgs>(args: Subset<T, FindOneBubbleArgs>): T extends FindOneBubbleArgsRequired ? 'Please either choose \`select\` or \`include\`' : T extends FindOneBubbleSelectArgs ? Promise<BubbleGetSelectPayload<ExtractFindOneBubbleSelectArgs<T>>> : T extends FindOneBubbleIncludeArgs ? Promise<BubbleGetIncludePayload<ExtractFindOneBubbleIncludeArgs<T>>> : BubbleClient<Bubble>;
    findMany<T extends FindManyBubbleArgs>(args?: Subset<T, FindManyBubbleArgs>): T extends FindManyBubbleArgsRequired ? 'Please either choose \`select\` or \`include\`' : T extends FindManyBubbleSelectArgs ? Promise<Array<BubbleGetSelectPayload<ExtractFindManyBubbleSelectArgs<T>>>> : T extends FindManyBubbleIncludeArgs ? Promise<Array<BubbleGetIncludePayload<ExtractFindManyBubbleIncludeArgs<T>>>> : Promise<Array<Bubble>>;
    create<T extends BubbleCreateArgs>(args: Subset<T, BubbleCreateArgs>): T extends BubbleCreateArgsRequired ? 'Please either choose \`select\` or \`include\`' : T extends BubbleSelectCreateArgs ? Promise<BubbleGetSelectPayload<ExtractBubbleSelectCreateArgs<T>>> : T extends BubbleIncludeCreateArgs ? Promise<BubbleGetIncludePayload<ExtractBubbleIncludeCreateArgs<T>>> : BubbleClient<Bubble>;
    delete<T extends BubbleDeleteArgs>(args: Subset<T, BubbleDeleteArgs>): T extends BubbleDeleteArgsRequired ? 'Please either choose \`select\` or \`include\`' : T extends BubbleSelectDeleteArgs ? Promise<BubbleGetSelectPayload<ExtractBubbleSelectDeleteArgs<T>>> : T extends BubbleIncludeDeleteArgs ? Promise<BubbleGetIncludePayload<ExtractBubbleIncludeDeleteArgs<T>>> : BubbleClient<Bubble>;
    update<T extends BubbleUpdateArgs>(args: Subset<T, BubbleUpdateArgs>): T extends BubbleUpdateArgsRequired ? 'Please either choose \`select\` or \`include\`' : T extends BubbleSelectUpdateArgs ? Promise<BubbleGetSelectPayload<ExtractBubbleSelectUpdateArgs<T>>> : T extends BubbleIncludeUpdateArgs ? Promise<BubbleGetIncludePayload<ExtractBubbleIncludeUpdateArgs<T>>> : BubbleClient<Bubble>;
    deleteMany<T extends BubbleDeleteManyArgs>(args: Subset<T, BubbleDeleteManyArgs>): Promise<BatchPayload>;
    updateMany<T extends BubbleUpdateManyArgs>(args: Subset<T, BubbleUpdateManyArgs>): Promise<BatchPayload>;
    upsert<T extends BubbleUpsertArgs>(args: Subset<T, BubbleUpsertArgs>): T extends BubbleUpsertArgsRequired ? 'Please either choose \`select\` or \`include\`' : T extends BubbleSelectUpsertArgs ? Promise<BubbleGetSelectPayload<ExtractBubbleSelectUpsertArgs<T>>> : T extends BubbleIncludeUpsertArgs ? Promise<BubbleGetIncludePayload<ExtractBubbleIncludeUpsertArgs<T>>> : BubbleClient<Bubble>;
    count(): Promise<number>;
}
export declare class BubbleClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _path;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: DMMFClass, _fetcher: PhotonFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _path: string[], _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PhotonPromise';
    members<T extends FindManyUserArgs = {}>(args?: Subset<T, FindManyUserArgs>): T extends FindManyUserArgsRequired ? 'Please either choose \`select\` or \`include\`' : T extends FindManyUserSelectArgs ? Promise<Array<UserGetSelectPayload<ExtractFindManyUserSelectArgs<T>>>> : T extends FindManyUserIncludeArgs ? Promise<Array<UserGetIncludePayload<ExtractFindManyUserIncludeArgs<T>>>> : Promise<Array<User>>;
    private readonly _document;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}
/**
 * Bubble findOne
 */
export declare type FindOneBubbleArgs = {
    select?: BubbleSelect | null;
    include?: BubbleInclude | null;
    where: BubbleWhereUniqueInput;
};
export declare type FindOneBubbleArgsRequired = {
    select: BubbleSelect;
    include: BubbleInclude;
    where: BubbleWhereUniqueInput;
};
export declare type FindOneBubbleSelectArgs = {
    select: BubbleSelect;
    where: BubbleWhereUniqueInput;
};
export declare type FindOneBubbleSelectArgsOptional = {
    select?: BubbleSelect | null;
    where: BubbleWhereUniqueInput;
};
export declare type FindOneBubbleIncludeArgs = {
    include: BubbleInclude;
    where: BubbleWhereUniqueInput;
};
export declare type FindOneBubbleIncludeArgsOptional = {
    include?: BubbleInclude | null;
    where: BubbleWhereUniqueInput;
};
export declare type ExtractFindOneBubbleSelectArgs<S extends undefined | boolean | FindOneBubbleSelectArgsOptional> = S extends undefined ? false : S extends boolean ? S : S extends FindOneBubbleSelectArgs ? S['select'] : true;
export declare type ExtractFindOneBubbleIncludeArgs<S extends undefined | boolean | FindOneBubbleIncludeArgsOptional> = S extends undefined ? false : S extends boolean ? S : S extends FindOneBubbleIncludeArgs ? S['include'] : true;
/**
 * Bubble findMany
 */
export declare type FindManyBubbleArgs = {
    select?: BubbleSelect | null;
    include?: BubbleInclude | null;
    where?: BubbleWhereInput | null;
    orderBy?: BubbleOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
};
export declare type FindManyBubbleArgsRequired = {
    select: BubbleSelect;
    include: BubbleInclude;
    where?: BubbleWhereInput | null;
    orderBy?: BubbleOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
};
export declare type FindManyBubbleSelectArgs = {
    select: BubbleSelect;
    where?: BubbleWhereInput | null;
    orderBy?: BubbleOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
};
export declare type FindManyBubbleSelectArgsOptional = {
    select?: BubbleSelect | null;
    where?: BubbleWhereInput | null;
    orderBy?: BubbleOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
};
export declare type FindManyBubbleIncludeArgs = {
    include: BubbleInclude;
    where?: BubbleWhereInput | null;
    orderBy?: BubbleOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
};
export declare type FindManyBubbleIncludeArgsOptional = {
    include?: BubbleInclude | null;
    where?: BubbleWhereInput | null;
    orderBy?: BubbleOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
};
export declare type ExtractFindManyBubbleSelectArgs<S extends undefined | boolean | FindManyBubbleSelectArgsOptional> = S extends undefined ? false : S extends boolean ? S : S extends FindManyBubbleSelectArgs ? S['select'] : true;
export declare type ExtractFindManyBubbleIncludeArgs<S extends undefined | boolean | FindManyBubbleIncludeArgsOptional> = S extends undefined ? false : S extends boolean ? S : S extends FindManyBubbleIncludeArgs ? S['include'] : true;
/**
 * Bubble create
 */
export declare type BubbleCreateArgs = {
    select?: BubbleSelect | null;
    include?: BubbleInclude | null;
    data: BubbleCreateInput;
};
export declare type BubbleCreateArgsRequired = {
    select: BubbleSelect;
    include: BubbleInclude;
    data: BubbleCreateInput;
};
export declare type BubbleSelectCreateArgs = {
    select: BubbleSelect;
    data: BubbleCreateInput;
};
export declare type BubbleSelectCreateArgsOptional = {
    select?: BubbleSelect | null;
    data: BubbleCreateInput;
};
export declare type BubbleIncludeCreateArgs = {
    include: BubbleInclude;
    data: BubbleCreateInput;
};
export declare type BubbleIncludeCreateArgsOptional = {
    include?: BubbleInclude | null;
    data: BubbleCreateInput;
};
export declare type ExtractBubbleSelectCreateArgs<S extends undefined | boolean | BubbleSelectCreateArgsOptional> = S extends undefined ? false : S extends boolean ? S : S extends BubbleSelectCreateArgs ? S['select'] : true;
export declare type ExtractBubbleIncludeCreateArgs<S extends undefined | boolean | BubbleIncludeCreateArgsOptional> = S extends undefined ? false : S extends boolean ? S : S extends BubbleIncludeCreateArgs ? S['include'] : true;
/**
 * Bubble update
 */
export declare type BubbleUpdateArgs = {
    select?: BubbleSelect | null;
    include?: BubbleInclude | null;
    data: BubbleUpdateInput;
    where: BubbleWhereUniqueInput;
};
export declare type BubbleUpdateArgsRequired = {
    select: BubbleSelect;
    include: BubbleInclude;
    data: BubbleUpdateInput;
    where: BubbleWhereUniqueInput;
};
export declare type BubbleSelectUpdateArgs = {
    select: BubbleSelect;
    data: BubbleUpdateInput;
    where: BubbleWhereUniqueInput;
};
export declare type BubbleSelectUpdateArgsOptional = {
    select?: BubbleSelect | null;
    data: BubbleUpdateInput;
    where: BubbleWhereUniqueInput;
};
export declare type BubbleIncludeUpdateArgs = {
    include: BubbleInclude;
    data: BubbleUpdateInput;
    where: BubbleWhereUniqueInput;
};
export declare type BubbleIncludeUpdateArgsOptional = {
    include?: BubbleInclude | null;
    data: BubbleUpdateInput;
    where: BubbleWhereUniqueInput;
};
export declare type ExtractBubbleSelectUpdateArgs<S extends undefined | boolean | BubbleSelectUpdateArgsOptional> = S extends undefined ? false : S extends boolean ? S : S extends BubbleSelectUpdateArgs ? S['select'] : true;
export declare type ExtractBubbleIncludeUpdateArgs<S extends undefined | boolean | BubbleIncludeUpdateArgsOptional> = S extends undefined ? false : S extends boolean ? S : S extends BubbleIncludeUpdateArgs ? S['include'] : true;
/**
 * Bubble updateMany
 */
export declare type BubbleUpdateManyArgs = {
    data: BubbleUpdateManyMutationInput;
    where?: BubbleWhereInput | null;
};
/**
 * Bubble upsert
 */
export declare type BubbleUpsertArgs = {
    select?: BubbleSelect | null;
    include?: BubbleInclude | null;
    where: BubbleWhereUniqueInput;
    create: BubbleCreateInput;
    update: BubbleUpdateInput;
};
export declare type BubbleUpsertArgsRequired = {
    select: BubbleSelect;
    include: BubbleInclude;
    where: BubbleWhereUniqueInput;
    create: BubbleCreateInput;
    update: BubbleUpdateInput;
};
export declare type BubbleSelectUpsertArgs = {
    select: BubbleSelect;
    where: BubbleWhereUniqueInput;
    create: BubbleCreateInput;
    update: BubbleUpdateInput;
};
export declare type BubbleSelectUpsertArgsOptional = {
    select?: BubbleSelect | null;
    where: BubbleWhereUniqueInput;
    create: BubbleCreateInput;
    update: BubbleUpdateInput;
};
export declare type BubbleIncludeUpsertArgs = {
    include: BubbleInclude;
    where: BubbleWhereUniqueInput;
    create: BubbleCreateInput;
    update: BubbleUpdateInput;
};
export declare type BubbleIncludeUpsertArgsOptional = {
    include?: BubbleInclude | null;
    where: BubbleWhereUniqueInput;
    create: BubbleCreateInput;
    update: BubbleUpdateInput;
};
export declare type ExtractBubbleSelectUpsertArgs<S extends undefined | boolean | BubbleSelectUpsertArgsOptional> = S extends undefined ? false : S extends boolean ? S : S extends BubbleSelectUpsertArgs ? S['select'] : true;
export declare type ExtractBubbleIncludeUpsertArgs<S extends undefined | boolean | BubbleIncludeUpsertArgsOptional> = S extends undefined ? false : S extends boolean ? S : S extends BubbleIncludeUpsertArgs ? S['include'] : true;
/**
 * Bubble delete
 */
export declare type BubbleDeleteArgs = {
    select?: BubbleSelect | null;
    include?: BubbleInclude | null;
    where: BubbleWhereUniqueInput;
};
export declare type BubbleDeleteArgsRequired = {
    select: BubbleSelect;
    include: BubbleInclude;
    where: BubbleWhereUniqueInput;
};
export declare type BubbleSelectDeleteArgs = {
    select: BubbleSelect;
    where: BubbleWhereUniqueInput;
};
export declare type BubbleSelectDeleteArgsOptional = {
    select?: BubbleSelect | null;
    where: BubbleWhereUniqueInput;
};
export declare type BubbleIncludeDeleteArgs = {
    include: BubbleInclude;
    where: BubbleWhereUniqueInput;
};
export declare type BubbleIncludeDeleteArgsOptional = {
    include?: BubbleInclude | null;
    where: BubbleWhereUniqueInput;
};
export declare type ExtractBubbleSelectDeleteArgs<S extends undefined | boolean | BubbleSelectDeleteArgsOptional> = S extends undefined ? false : S extends boolean ? S : S extends BubbleSelectDeleteArgs ? S['select'] : true;
export declare type ExtractBubbleIncludeDeleteArgs<S extends undefined | boolean | BubbleIncludeDeleteArgsOptional> = S extends undefined ? false : S extends boolean ? S : S extends BubbleIncludeDeleteArgs ? S['include'] : true;
/**
 * Bubble deleteMany
 */
export declare type BubbleDeleteManyArgs = {
    where?: BubbleWhereInput | null;
};
/**
 * Bubble without action
 */
export declare type BubbleArgs = {
    select?: BubbleSelect | null;
    include?: BubbleInclude | null;
};
export declare type BubbleArgsRequired = {
    select: BubbleSelect;
    include: BubbleInclude;
};
export declare type BubbleSelectArgs = {
    select: BubbleSelect;
};
export declare type BubbleSelectArgsOptional = {
    select?: BubbleSelect | null;
};
export declare type BubbleIncludeArgs = {
    include: BubbleInclude;
};
export declare type BubbleIncludeArgsOptional = {
    include?: BubbleInclude | null;
};
export declare type ExtractBubbleSelectArgs<S extends undefined | boolean | BubbleSelectArgsOptional> = S extends undefined ? false : S extends boolean ? S : S extends BubbleSelectArgs ? S['select'] : true;
export declare type ExtractBubbleIncludeArgs<S extends undefined | boolean | BubbleIncludeArgsOptional> = S extends undefined ? false : S extends boolean ? S : S extends BubbleIncludeArgs ? S['include'] : true;
/**
 * Model User
 */
export declare type User = {
    id: string;
    firstName: string;
    lastName: string;
};
export declare type UserScalars = 'id' | 'firstName' | 'lastName';
export declare type UserSelect = {
    id?: boolean;
    posts?: boolean | FindManyPostSelectArgsOptional;
    firstName?: boolean;
    lastName?: boolean;
    bubble?: boolean | BubbleSelectArgsOptional;
};
export declare type UserInclude = {
    posts?: boolean | FindManyPostIncludeArgsOptional;
    bubble?: boolean | BubbleIncludeArgsOptional;
};
declare type UserDefault = {
    id: true;
    firstName: true;
    lastName: true;
};
declare type UserGetSelectPayload<S extends boolean | UserSelect> = S extends true ? User : S extends UserSelect ? {
    [P in CleanupNever<MergeTruthyValues<{}, S>>]: P extends UserScalars ? User[P] : P extends 'posts' ? Array<PostGetSelectPayload<ExtractFindManyPostSelectArgs<S[P]>>> : P extends 'bubble' ? BubbleGetSelectPayload<ExtractBubbleSelectArgs<S[P]>> : never;
} : never;
declare type UserGetIncludePayload<S extends boolean | UserInclude> = S extends true ? User : S extends UserInclude ? {
    [P in CleanupNever<MergeTruthyValues<UserDefault, S>>]: P extends UserScalars ? User[P] : P extends 'posts' ? Array<PostGetIncludePayload<ExtractFindManyPostIncludeArgs<S[P]>>> : P extends 'bubble' ? BubbleGetIncludePayload<ExtractBubbleIncludeArgs<S[P]>> : never;
} : never;
export interface UserDelegate {
    <T extends FindManyUserArgs>(args?: Subset<T, FindManyUserArgs>): T extends FindManyUserArgsRequired ? 'Please either choose \`select\` or \`include\`' : T extends FindManyUserSelectArgs ? Promise<Array<UserGetSelectPayload<ExtractFindManyUserSelectArgs<T>>>> : T extends FindManyUserIncludeArgs ? Promise<Array<UserGetIncludePayload<ExtractFindManyUserIncludeArgs<T>>>> : Promise<Array<User>>;
    findOne<T extends FindOneUserArgs>(args: Subset<T, FindOneUserArgs>): T extends FindOneUserArgsRequired ? 'Please either choose \`select\` or \`include\`' : T extends FindOneUserSelectArgs ? Promise<UserGetSelectPayload<ExtractFindOneUserSelectArgs<T>>> : T extends FindOneUserIncludeArgs ? Promise<UserGetIncludePayload<ExtractFindOneUserIncludeArgs<T>>> : UserClient<User>;
    findMany<T extends FindManyUserArgs>(args?: Subset<T, FindManyUserArgs>): T extends FindManyUserArgsRequired ? 'Please either choose \`select\` or \`include\`' : T extends FindManyUserSelectArgs ? Promise<Array<UserGetSelectPayload<ExtractFindManyUserSelectArgs<T>>>> : T extends FindManyUserIncludeArgs ? Promise<Array<UserGetIncludePayload<ExtractFindManyUserIncludeArgs<T>>>> : Promise<Array<User>>;
    create<T extends UserCreateArgs>(args: Subset<T, UserCreateArgs>): T extends UserCreateArgsRequired ? 'Please either choose \`select\` or \`include\`' : T extends UserSelectCreateArgs ? Promise<UserGetSelectPayload<ExtractUserSelectCreateArgs<T>>> : T extends UserIncludeCreateArgs ? Promise<UserGetIncludePayload<ExtractUserIncludeCreateArgs<T>>> : UserClient<User>;
    delete<T extends UserDeleteArgs>(args: Subset<T, UserDeleteArgs>): T extends UserDeleteArgsRequired ? 'Please either choose \`select\` or \`include\`' : T extends UserSelectDeleteArgs ? Promise<UserGetSelectPayload<ExtractUserSelectDeleteArgs<T>>> : T extends UserIncludeDeleteArgs ? Promise<UserGetIncludePayload<ExtractUserIncludeDeleteArgs<T>>> : UserClient<User>;
    update<T extends UserUpdateArgs>(args: Subset<T, UserUpdateArgs>): T extends UserUpdateArgsRequired ? 'Please either choose \`select\` or \`include\`' : T extends UserSelectUpdateArgs ? Promise<UserGetSelectPayload<ExtractUserSelectUpdateArgs<T>>> : T extends UserIncludeUpdateArgs ? Promise<UserGetIncludePayload<ExtractUserIncludeUpdateArgs<T>>> : UserClient<User>;
    deleteMany<T extends UserDeleteManyArgs>(args: Subset<T, UserDeleteManyArgs>): Promise<BatchPayload>;
    updateMany<T extends UserUpdateManyArgs>(args: Subset<T, UserUpdateManyArgs>): Promise<BatchPayload>;
    upsert<T extends UserUpsertArgs>(args: Subset<T, UserUpsertArgs>): T extends UserUpsertArgsRequired ? 'Please either choose \`select\` or \`include\`' : T extends UserSelectUpsertArgs ? Promise<UserGetSelectPayload<ExtractUserSelectUpsertArgs<T>>> : T extends UserIncludeUpsertArgs ? Promise<UserGetIncludePayload<ExtractUserIncludeUpsertArgs<T>>> : UserClient<User>;
    count(): Promise<number>;
}
export declare class UserClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _path;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: DMMFClass, _fetcher: PhotonFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _path: string[], _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PhotonPromise';
    posts<T extends FindManyPostArgs = {}>(args?: Subset<T, FindManyPostArgs>): T extends FindManyPostArgsRequired ? 'Please either choose \`select\` or \`include\`' : T extends FindManyPostSelectArgs ? Promise<Array<PostGetSelectPayload<ExtractFindManyPostSelectArgs<T>>>> : T extends FindManyPostIncludeArgs ? Promise<Array<PostGetIncludePayload<ExtractFindManyPostIncludeArgs<T>>>> : Promise<Array<Post>>;
    bubble<T extends BubbleArgs = {}>(args?: Subset<T, BubbleArgs>): T extends FindOneBubbleArgsRequired ? 'Please either choose \`select\` or \`include\`' : T extends BubbleSelectArgs ? Promise<BubbleGetSelectPayload<ExtractBubbleSelectArgs<T>>> : T extends BubbleIncludeArgs ? Promise<BubbleGetIncludePayload<ExtractBubbleIncludeArgs<T>>> : BubbleClient<Bubble>;
    private readonly _document;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}
/**
 * User findOne
 */
export declare type FindOneUserArgs = {
    select?: UserSelect | null;
    include?: UserInclude | null;
    where: UserWhereUniqueInput;
};
export declare type FindOneUserArgsRequired = {
    select: UserSelect;
    include: UserInclude;
    where: UserWhereUniqueInput;
};
export declare type FindOneUserSelectArgs = {
    select: UserSelect;
    where: UserWhereUniqueInput;
};
export declare type FindOneUserSelectArgsOptional = {
    select?: UserSelect | null;
    where: UserWhereUniqueInput;
};
export declare type FindOneUserIncludeArgs = {
    include: UserInclude;
    where: UserWhereUniqueInput;
};
export declare type FindOneUserIncludeArgsOptional = {
    include?: UserInclude | null;
    where: UserWhereUniqueInput;
};
export declare type ExtractFindOneUserSelectArgs<S extends undefined | boolean | FindOneUserSelectArgsOptional> = S extends undefined ? false : S extends boolean ? S : S extends FindOneUserSelectArgs ? S['select'] : true;
export declare type ExtractFindOneUserIncludeArgs<S extends undefined | boolean | FindOneUserIncludeArgsOptional> = S extends undefined ? false : S extends boolean ? S : S extends FindOneUserIncludeArgs ? S['include'] : true;
/**
 * User findMany
 */
export declare type FindManyUserArgs = {
    select?: UserSelect | null;
    include?: UserInclude | null;
    where?: UserWhereInput | null;
    orderBy?: UserOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
};
export declare type FindManyUserArgsRequired = {
    select: UserSelect;
    include: UserInclude;
    where?: UserWhereInput | null;
    orderBy?: UserOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
};
export declare type FindManyUserSelectArgs = {
    select: UserSelect;
    where?: UserWhereInput | null;
    orderBy?: UserOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
};
export declare type FindManyUserSelectArgsOptional = {
    select?: UserSelect | null;
    where?: UserWhereInput | null;
    orderBy?: UserOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
};
export declare type FindManyUserIncludeArgs = {
    include: UserInclude;
    where?: UserWhereInput | null;
    orderBy?: UserOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
};
export declare type FindManyUserIncludeArgsOptional = {
    include?: UserInclude | null;
    where?: UserWhereInput | null;
    orderBy?: UserOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
};
export declare type ExtractFindManyUserSelectArgs<S extends undefined | boolean | FindManyUserSelectArgsOptional> = S extends undefined ? false : S extends boolean ? S : S extends FindManyUserSelectArgs ? S['select'] : true;
export declare type ExtractFindManyUserIncludeArgs<S extends undefined | boolean | FindManyUserIncludeArgsOptional> = S extends undefined ? false : S extends boolean ? S : S extends FindManyUserIncludeArgs ? S['include'] : true;
/**
 * User create
 */
export declare type UserCreateArgs = {
    select?: UserSelect | null;
    include?: UserInclude | null;
    data: UserCreateInput;
};
export declare type UserCreateArgsRequired = {
    select: UserSelect;
    include: UserInclude;
    data: UserCreateInput;
};
export declare type UserSelectCreateArgs = {
    select: UserSelect;
    data: UserCreateInput;
};
export declare type UserSelectCreateArgsOptional = {
    select?: UserSelect | null;
    data: UserCreateInput;
};
export declare type UserIncludeCreateArgs = {
    include: UserInclude;
    data: UserCreateInput;
};
export declare type UserIncludeCreateArgsOptional = {
    include?: UserInclude | null;
    data: UserCreateInput;
};
export declare type ExtractUserSelectCreateArgs<S extends undefined | boolean | UserSelectCreateArgsOptional> = S extends undefined ? false : S extends boolean ? S : S extends UserSelectCreateArgs ? S['select'] : true;
export declare type ExtractUserIncludeCreateArgs<S extends undefined | boolean | UserIncludeCreateArgsOptional> = S extends undefined ? false : S extends boolean ? S : S extends UserIncludeCreateArgs ? S['include'] : true;
/**
 * User update
 */
export declare type UserUpdateArgs = {
    select?: UserSelect | null;
    include?: UserInclude | null;
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
};
export declare type UserUpdateArgsRequired = {
    select: UserSelect;
    include: UserInclude;
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
};
export declare type UserSelectUpdateArgs = {
    select: UserSelect;
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
};
export declare type UserSelectUpdateArgsOptional = {
    select?: UserSelect | null;
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
};
export declare type UserIncludeUpdateArgs = {
    include: UserInclude;
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
};
export declare type UserIncludeUpdateArgsOptional = {
    include?: UserInclude | null;
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
};
export declare type ExtractUserSelectUpdateArgs<S extends undefined | boolean | UserSelectUpdateArgsOptional> = S extends undefined ? false : S extends boolean ? S : S extends UserSelectUpdateArgs ? S['select'] : true;
export declare type ExtractUserIncludeUpdateArgs<S extends undefined | boolean | UserIncludeUpdateArgsOptional> = S extends undefined ? false : S extends boolean ? S : S extends UserIncludeUpdateArgs ? S['include'] : true;
/**
 * User updateMany
 */
export declare type UserUpdateManyArgs = {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput | null;
};
/**
 * User upsert
 */
export declare type UserUpsertArgs = {
    select?: UserSelect | null;
    include?: UserInclude | null;
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
};
export declare type UserUpsertArgsRequired = {
    select: UserSelect;
    include: UserInclude;
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
};
export declare type UserSelectUpsertArgs = {
    select: UserSelect;
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
};
export declare type UserSelectUpsertArgsOptional = {
    select?: UserSelect | null;
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
};
export declare type UserIncludeUpsertArgs = {
    include: UserInclude;
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
};
export declare type UserIncludeUpsertArgsOptional = {
    include?: UserInclude | null;
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
};
export declare type ExtractUserSelectUpsertArgs<S extends undefined | boolean | UserSelectUpsertArgsOptional> = S extends undefined ? false : S extends boolean ? S : S extends UserSelectUpsertArgs ? S['select'] : true;
export declare type ExtractUserIncludeUpsertArgs<S extends undefined | boolean | UserIncludeUpsertArgsOptional> = S extends undefined ? false : S extends boolean ? S : S extends UserIncludeUpsertArgs ? S['include'] : true;
/**
 * User delete
 */
export declare type UserDeleteArgs = {
    select?: UserSelect | null;
    include?: UserInclude | null;
    where: UserWhereUniqueInput;
};
export declare type UserDeleteArgsRequired = {
    select: UserSelect;
    include: UserInclude;
    where: UserWhereUniqueInput;
};
export declare type UserSelectDeleteArgs = {
    select: UserSelect;
    where: UserWhereUniqueInput;
};
export declare type UserSelectDeleteArgsOptional = {
    select?: UserSelect | null;
    where: UserWhereUniqueInput;
};
export declare type UserIncludeDeleteArgs = {
    include: UserInclude;
    where: UserWhereUniqueInput;
};
export declare type UserIncludeDeleteArgsOptional = {
    include?: UserInclude | null;
    where: UserWhereUniqueInput;
};
export declare type ExtractUserSelectDeleteArgs<S extends undefined | boolean | UserSelectDeleteArgsOptional> = S extends undefined ? false : S extends boolean ? S : S extends UserSelectDeleteArgs ? S['select'] : true;
export declare type ExtractUserIncludeDeleteArgs<S extends undefined | boolean | UserIncludeDeleteArgsOptional> = S extends undefined ? false : S extends boolean ? S : S extends UserIncludeDeleteArgs ? S['include'] : true;
/**
 * User deleteMany
 */
export declare type UserDeleteManyArgs = {
    where?: UserWhereInput | null;
};
/**
 * User without action
 */
export declare type UserArgs = {
    select?: UserSelect | null;
    include?: UserInclude | null;
};
export declare type UserArgsRequired = {
    select: UserSelect;
    include: UserInclude;
};
export declare type UserSelectArgs = {
    select: UserSelect;
};
export declare type UserSelectArgsOptional = {
    select?: UserSelect | null;
};
export declare type UserIncludeArgs = {
    include: UserInclude;
};
export declare type UserIncludeArgsOptional = {
    include?: UserInclude | null;
};
export declare type ExtractUserSelectArgs<S extends undefined | boolean | UserSelectArgsOptional> = S extends undefined ? false : S extends boolean ? S : S extends UserSelectArgs ? S['select'] : true;
export declare type ExtractUserIncludeArgs<S extends undefined | boolean | UserIncludeArgsOptional> = S extends undefined ? false : S extends boolean ? S : S extends UserIncludeArgs ? S['include'] : true;
/**
 * Model Post
 */
export declare type Post = {
    id: number;
    rating: number;
    status: PostStatus;
};
export declare type PostScalars = 'id' | 'rating' | 'status';
export declare type PostSelect = {
    id?: boolean;
    authors?: boolean | FindManyUserSelectArgsOptional;
    rating?: boolean;
    status?: boolean;
};
export declare type PostInclude = {
    authors?: boolean | FindManyUserIncludeArgsOptional;
};
declare type PostDefault = {
    id: true;
    rating: true;
    status: true;
};
declare type PostGetSelectPayload<S extends boolean | PostSelect> = S extends true ? Post : S extends PostSelect ? {
    [P in CleanupNever<MergeTruthyValues<{}, S>>]: P extends PostScalars ? Post[P] : P extends 'authors' ? Array<UserGetSelectPayload<ExtractFindManyUserSelectArgs<S[P]>>> : never;
} : never;
declare type PostGetIncludePayload<S extends boolean | PostInclude> = S extends true ? Post : S extends PostInclude ? {
    [P in CleanupNever<MergeTruthyValues<PostDefault, S>>]: P extends PostScalars ? Post[P] : P extends 'authors' ? Array<UserGetIncludePayload<ExtractFindManyUserIncludeArgs<S[P]>>> : never;
} : never;
export interface PostDelegate {
    <T extends FindManyPostArgs>(args?: Subset<T, FindManyPostArgs>): T extends FindManyPostArgsRequired ? 'Please either choose \`select\` or \`include\`' : T extends FindManyPostSelectArgs ? Promise<Array<PostGetSelectPayload<ExtractFindManyPostSelectArgs<T>>>> : T extends FindManyPostIncludeArgs ? Promise<Array<PostGetIncludePayload<ExtractFindManyPostIncludeArgs<T>>>> : Promise<Array<Post>>;
    findOne<T extends FindOnePostArgs>(args: Subset<T, FindOnePostArgs>): T extends FindOnePostArgsRequired ? 'Please either choose \`select\` or \`include\`' : T extends FindOnePostSelectArgs ? Promise<PostGetSelectPayload<ExtractFindOnePostSelectArgs<T>>> : T extends FindOnePostIncludeArgs ? Promise<PostGetIncludePayload<ExtractFindOnePostIncludeArgs<T>>> : PostClient<Post>;
    findMany<T extends FindManyPostArgs>(args?: Subset<T, FindManyPostArgs>): T extends FindManyPostArgsRequired ? 'Please either choose \`select\` or \`include\`' : T extends FindManyPostSelectArgs ? Promise<Array<PostGetSelectPayload<ExtractFindManyPostSelectArgs<T>>>> : T extends FindManyPostIncludeArgs ? Promise<Array<PostGetIncludePayload<ExtractFindManyPostIncludeArgs<T>>>> : Promise<Array<Post>>;
    create<T extends PostCreateArgs>(args: Subset<T, PostCreateArgs>): T extends PostCreateArgsRequired ? 'Please either choose \`select\` or \`include\`' : T extends PostSelectCreateArgs ? Promise<PostGetSelectPayload<ExtractPostSelectCreateArgs<T>>> : T extends PostIncludeCreateArgs ? Promise<PostGetIncludePayload<ExtractPostIncludeCreateArgs<T>>> : PostClient<Post>;
    delete<T extends PostDeleteArgs>(args: Subset<T, PostDeleteArgs>): T extends PostDeleteArgsRequired ? 'Please either choose \`select\` or \`include\`' : T extends PostSelectDeleteArgs ? Promise<PostGetSelectPayload<ExtractPostSelectDeleteArgs<T>>> : T extends PostIncludeDeleteArgs ? Promise<PostGetIncludePayload<ExtractPostIncludeDeleteArgs<T>>> : PostClient<Post>;
    update<T extends PostUpdateArgs>(args: Subset<T, PostUpdateArgs>): T extends PostUpdateArgsRequired ? 'Please either choose \`select\` or \`include\`' : T extends PostSelectUpdateArgs ? Promise<PostGetSelectPayload<ExtractPostSelectUpdateArgs<T>>> : T extends PostIncludeUpdateArgs ? Promise<PostGetIncludePayload<ExtractPostIncludeUpdateArgs<T>>> : PostClient<Post>;
    deleteMany<T extends PostDeleteManyArgs>(args: Subset<T, PostDeleteManyArgs>): Promise<BatchPayload>;
    updateMany<T extends PostUpdateManyArgs>(args: Subset<T, PostUpdateManyArgs>): Promise<BatchPayload>;
    upsert<T extends PostUpsertArgs>(args: Subset<T, PostUpsertArgs>): T extends PostUpsertArgsRequired ? 'Please either choose \`select\` or \`include\`' : T extends PostSelectUpsertArgs ? Promise<PostGetSelectPayload<ExtractPostSelectUpsertArgs<T>>> : T extends PostIncludeUpsertArgs ? Promise<PostGetIncludePayload<ExtractPostIncludeUpsertArgs<T>>> : PostClient<Post>;
    count(): Promise<number>;
}
export declare class PostClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _path;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: DMMFClass, _fetcher: PhotonFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _path: string[], _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PhotonPromise';
    authors<T extends FindManyUserArgs = {}>(args?: Subset<T, FindManyUserArgs>): T extends FindManyUserArgsRequired ? 'Please either choose \`select\` or \`include\`' : T extends FindManyUserSelectArgs ? Promise<Array<UserGetSelectPayload<ExtractFindManyUserSelectArgs<T>>>> : T extends FindManyUserIncludeArgs ? Promise<Array<UserGetIncludePayload<ExtractFindManyUserIncludeArgs<T>>>> : Promise<Array<User>>;
    private readonly _document;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}
/**
 * Post findOne
 */
export declare type FindOnePostArgs = {
    select?: PostSelect | null;
    include?: PostInclude | null;
    where: PostWhereUniqueInput;
};
export declare type FindOnePostArgsRequired = {
    select: PostSelect;
    include: PostInclude;
    where: PostWhereUniqueInput;
};
export declare type FindOnePostSelectArgs = {
    select: PostSelect;
    where: PostWhereUniqueInput;
};
export declare type FindOnePostSelectArgsOptional = {
    select?: PostSelect | null;
    where: PostWhereUniqueInput;
};
export declare type FindOnePostIncludeArgs = {
    include: PostInclude;
    where: PostWhereUniqueInput;
};
export declare type FindOnePostIncludeArgsOptional = {
    include?: PostInclude | null;
    where: PostWhereUniqueInput;
};
export declare type ExtractFindOnePostSelectArgs<S extends undefined | boolean | FindOnePostSelectArgsOptional> = S extends undefined ? false : S extends boolean ? S : S extends FindOnePostSelectArgs ? S['select'] : true;
export declare type ExtractFindOnePostIncludeArgs<S extends undefined | boolean | FindOnePostIncludeArgsOptional> = S extends undefined ? false : S extends boolean ? S : S extends FindOnePostIncludeArgs ? S['include'] : true;
/**
 * Post findMany
 */
export declare type FindManyPostArgs = {
    select?: PostSelect | null;
    include?: PostInclude | null;
    where?: PostWhereInput | null;
    orderBy?: PostOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
};
export declare type FindManyPostArgsRequired = {
    select: PostSelect;
    include: PostInclude;
    where?: PostWhereInput | null;
    orderBy?: PostOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
};
export declare type FindManyPostSelectArgs = {
    select: PostSelect;
    where?: PostWhereInput | null;
    orderBy?: PostOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
};
export declare type FindManyPostSelectArgsOptional = {
    select?: PostSelect | null;
    where?: PostWhereInput | null;
    orderBy?: PostOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
};
export declare type FindManyPostIncludeArgs = {
    include: PostInclude;
    where?: PostWhereInput | null;
    orderBy?: PostOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
};
export declare type FindManyPostIncludeArgsOptional = {
    include?: PostInclude | null;
    where?: PostWhereInput | null;
    orderBy?: PostOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
};
export declare type ExtractFindManyPostSelectArgs<S extends undefined | boolean | FindManyPostSelectArgsOptional> = S extends undefined ? false : S extends boolean ? S : S extends FindManyPostSelectArgs ? S['select'] : true;
export declare type ExtractFindManyPostIncludeArgs<S extends undefined | boolean | FindManyPostIncludeArgsOptional> = S extends undefined ? false : S extends boolean ? S : S extends FindManyPostIncludeArgs ? S['include'] : true;
/**
 * Post create
 */
export declare type PostCreateArgs = {
    select?: PostSelect | null;
    include?: PostInclude | null;
    data: PostCreateInput;
};
export declare type PostCreateArgsRequired = {
    select: PostSelect;
    include: PostInclude;
    data: PostCreateInput;
};
export declare type PostSelectCreateArgs = {
    select: PostSelect;
    data: PostCreateInput;
};
export declare type PostSelectCreateArgsOptional = {
    select?: PostSelect | null;
    data: PostCreateInput;
};
export declare type PostIncludeCreateArgs = {
    include: PostInclude;
    data: PostCreateInput;
};
export declare type PostIncludeCreateArgsOptional = {
    include?: PostInclude | null;
    data: PostCreateInput;
};
export declare type ExtractPostSelectCreateArgs<S extends undefined | boolean | PostSelectCreateArgsOptional> = S extends undefined ? false : S extends boolean ? S : S extends PostSelectCreateArgs ? S['select'] : true;
export declare type ExtractPostIncludeCreateArgs<S extends undefined | boolean | PostIncludeCreateArgsOptional> = S extends undefined ? false : S extends boolean ? S : S extends PostIncludeCreateArgs ? S['include'] : true;
/**
 * Post update
 */
export declare type PostUpdateArgs = {
    select?: PostSelect | null;
    include?: PostInclude | null;
    data: PostUpdateInput;
    where: PostWhereUniqueInput;
};
export declare type PostUpdateArgsRequired = {
    select: PostSelect;
    include: PostInclude;
    data: PostUpdateInput;
    where: PostWhereUniqueInput;
};
export declare type PostSelectUpdateArgs = {
    select: PostSelect;
    data: PostUpdateInput;
    where: PostWhereUniqueInput;
};
export declare type PostSelectUpdateArgsOptional = {
    select?: PostSelect | null;
    data: PostUpdateInput;
    where: PostWhereUniqueInput;
};
export declare type PostIncludeUpdateArgs = {
    include: PostInclude;
    data: PostUpdateInput;
    where: PostWhereUniqueInput;
};
export declare type PostIncludeUpdateArgsOptional = {
    include?: PostInclude | null;
    data: PostUpdateInput;
    where: PostWhereUniqueInput;
};
export declare type ExtractPostSelectUpdateArgs<S extends undefined | boolean | PostSelectUpdateArgsOptional> = S extends undefined ? false : S extends boolean ? S : S extends PostSelectUpdateArgs ? S['select'] : true;
export declare type ExtractPostIncludeUpdateArgs<S extends undefined | boolean | PostIncludeUpdateArgsOptional> = S extends undefined ? false : S extends boolean ? S : S extends PostIncludeUpdateArgs ? S['include'] : true;
/**
 * Post updateMany
 */
export declare type PostUpdateManyArgs = {
    data: PostUpdateManyMutationInput;
    where?: PostWhereInput | null;
};
/**
 * Post upsert
 */
export declare type PostUpsertArgs = {
    select?: PostSelect | null;
    include?: PostInclude | null;
    where: PostWhereUniqueInput;
    create: PostCreateInput;
    update: PostUpdateInput;
};
export declare type PostUpsertArgsRequired = {
    select: PostSelect;
    include: PostInclude;
    where: PostWhereUniqueInput;
    create: PostCreateInput;
    update: PostUpdateInput;
};
export declare type PostSelectUpsertArgs = {
    select: PostSelect;
    where: PostWhereUniqueInput;
    create: PostCreateInput;
    update: PostUpdateInput;
};
export declare type PostSelectUpsertArgsOptional = {
    select?: PostSelect | null;
    where: PostWhereUniqueInput;
    create: PostCreateInput;
    update: PostUpdateInput;
};
export declare type PostIncludeUpsertArgs = {
    include: PostInclude;
    where: PostWhereUniqueInput;
    create: PostCreateInput;
    update: PostUpdateInput;
};
export declare type PostIncludeUpsertArgsOptional = {
    include?: PostInclude | null;
    where: PostWhereUniqueInput;
    create: PostCreateInput;
    update: PostUpdateInput;
};
export declare type ExtractPostSelectUpsertArgs<S extends undefined | boolean | PostSelectUpsertArgsOptional> = S extends undefined ? false : S extends boolean ? S : S extends PostSelectUpsertArgs ? S['select'] : true;
export declare type ExtractPostIncludeUpsertArgs<S extends undefined | boolean | PostIncludeUpsertArgsOptional> = S extends undefined ? false : S extends boolean ? S : S extends PostIncludeUpsertArgs ? S['include'] : true;
/**
 * Post delete
 */
export declare type PostDeleteArgs = {
    select?: PostSelect | null;
    include?: PostInclude | null;
    where: PostWhereUniqueInput;
};
export declare type PostDeleteArgsRequired = {
    select: PostSelect;
    include: PostInclude;
    where: PostWhereUniqueInput;
};
export declare type PostSelectDeleteArgs = {
    select: PostSelect;
    where: PostWhereUniqueInput;
};
export declare type PostSelectDeleteArgsOptional = {
    select?: PostSelect | null;
    where: PostWhereUniqueInput;
};
export declare type PostIncludeDeleteArgs = {
    include: PostInclude;
    where: PostWhereUniqueInput;
};
export declare type PostIncludeDeleteArgsOptional = {
    include?: PostInclude | null;
    where: PostWhereUniqueInput;
};
export declare type ExtractPostSelectDeleteArgs<S extends undefined | boolean | PostSelectDeleteArgsOptional> = S extends undefined ? false : S extends boolean ? S : S extends PostSelectDeleteArgs ? S['select'] : true;
export declare type ExtractPostIncludeDeleteArgs<S extends undefined | boolean | PostIncludeDeleteArgsOptional> = S extends undefined ? false : S extends boolean ? S : S extends PostIncludeDeleteArgs ? S['include'] : true;
/**
 * Post deleteMany
 */
export declare type PostDeleteManyArgs = {
    where?: PostWhereInput | null;
};
/**
 * Post without action
 */
export declare type PostArgs = {
    select?: PostSelect | null;
    include?: PostInclude | null;
};
export declare type PostArgsRequired = {
    select: PostSelect;
    include: PostInclude;
};
export declare type PostSelectArgs = {
    select: PostSelect;
};
export declare type PostSelectArgsOptional = {
    select?: PostSelect | null;
};
export declare type PostIncludeArgs = {
    include: PostInclude;
};
export declare type PostIncludeArgsOptional = {
    include?: PostInclude | null;
};
export declare type ExtractPostSelectArgs<S extends undefined | boolean | PostSelectArgsOptional> = S extends undefined ? false : S extends boolean ? S : S extends PostSelectArgs ? S['select'] : true;
export declare type ExtractPostIncludeArgs<S extends undefined | boolean | PostIncludeArgsOptional> = S extends undefined ? false : S extends boolean ? S : S extends PostIncludeArgs ? S['include'] : true;
/**
 * Deep Input Types
 */
export declare type PostWhereInput = {
    id?: number | IntFilter | null;
    authors?: UserFilter | null;
    rating?: number | FloatFilter | null;
    status?: PostStatus | PostStatusFilter | null;
    AND?: Enumerable<PostWhereInput> | null;
    OR?: Enumerable<PostWhereInput> | null;
    NOT?: Enumerable<PostWhereInput> | null;
};
export declare type UserWhereInput = {
    id?: string | StringFilter | null;
    posts?: PostFilter | null;
    firstName?: string | StringFilter | null;
    lastName?: string | StringFilter | null;
    AND?: Enumerable<UserWhereInput> | null;
    OR?: Enumerable<UserWhereInput> | null;
    NOT?: Enumerable<UserWhereInput> | null;
    bubble?: BubbleWhereInput | null;
};
export declare type BubbleWhereInput = {
    id?: string | UUIDFilter | null;
    createdAt?: string | Date | DateTimeFilter | null;
    members?: UserFilter | null;
    AND?: Enumerable<BubbleWhereInput> | null;
    OR?: Enumerable<BubbleWhereInput> | null;
    NOT?: Enumerable<BubbleWhereInput> | null;
};
export declare type BubbleWhereUniqueInput = {
    id?: string | null;
};
export declare type UserWhereUniqueInput = {
    id?: string | null;
};
export declare type PostWhereUniqueInput = {
    id?: number | null;
};
export declare type PostCreateWithoutAuthorsInput = {
    rating: number;
    status: PostStatus;
};
export declare type PostCreateManyWithoutPostsInput = {
    create?: Enumerable<PostCreateWithoutAuthorsInput> | null;
    connect?: Enumerable<PostWhereUniqueInput> | null;
};
export declare type UserCreateWithoutBubbleInput = {
    id?: string | null;
    firstName: string;
    lastName: string;
    posts?: PostCreateManyWithoutPostsInput | null;
};
export declare type UserCreateManyWithoutMembersInput = {
    create?: Enumerable<UserCreateWithoutBubbleInput> | null;
    connect?: Enumerable<UserWhereUniqueInput> | null;
};
export declare type BubbleCreateInput = {
    id?: string | null;
    createdAt?: string | Date | null;
    members?: UserCreateManyWithoutMembersInput | null;
};
export declare type PostUpdateWithoutAuthorsDataInput = {
    id?: number | null;
    rating?: number | null;
    status?: PostStatus | null;
};
export declare type PostUpdateWithWhereUniqueWithoutAuthorsInput = {
    where: PostWhereUniqueInput;
    data: PostUpdateWithoutAuthorsDataInput;
};
export declare type PostScalarWhereInput = {
    id?: number | IntFilter | null;
    authors?: UserFilter | null;
    rating?: number | FloatFilter | null;
    status?: PostStatus | PostStatusFilter | null;
    AND?: Enumerable<PostScalarWhereInput> | null;
    OR?: Enumerable<PostScalarWhereInput> | null;
    NOT?: Enumerable<PostScalarWhereInput> | null;
};
export declare type PostUpdateManyDataInput = {
    id?: number | null;
    rating?: number | null;
    status?: PostStatus | null;
};
export declare type PostUpdateManyWithWhereNestedInput = {
    where: PostScalarWhereInput;
    data: PostUpdateManyDataInput;
};
export declare type PostUpsertWithWhereUniqueWithoutAuthorsInput = {
    where: PostWhereUniqueInput;
    update: PostUpdateWithoutAuthorsDataInput;
    create: PostCreateWithoutAuthorsInput;
};
export declare type PostUpdateManyWithoutAuthorsInput = {
    create?: Enumerable<PostCreateWithoutAuthorsInput> | null;
    connect?: Enumerable<PostWhereUniqueInput> | null;
    set?: Enumerable<PostWhereUniqueInput> | null;
    disconnect?: Enumerable<PostWhereUniqueInput> | null;
    delete?: Enumerable<PostWhereUniqueInput> | null;
    update?: Enumerable<PostUpdateWithWhereUniqueWithoutAuthorsInput> | null;
    updateMany?: Enumerable<PostUpdateManyWithWhereNestedInput> | null;
    deleteMany?: Enumerable<PostScalarWhereInput> | null;
    upsert?: Enumerable<PostUpsertWithWhereUniqueWithoutAuthorsInput> | null;
};
export declare type UserUpdateWithoutBubbleDataInput = {
    id?: string | null;
    firstName?: string | null;
    lastName?: string | null;
    posts?: PostUpdateManyWithoutAuthorsInput | null;
};
export declare type UserUpdateWithWhereUniqueWithoutBubbleInput = {
    where: UserWhereUniqueInput;
    data: UserUpdateWithoutBubbleDataInput;
};
export declare type UserScalarWhereInput = {
    id?: string | StringFilter | null;
    posts?: PostFilter | null;
    firstName?: string | StringFilter | null;
    lastName?: string | StringFilter | null;
    AND?: Enumerable<UserScalarWhereInput> | null;
    OR?: Enumerable<UserScalarWhereInput> | null;
    NOT?: Enumerable<UserScalarWhereInput> | null;
};
export declare type UserUpdateManyDataInput = {
    id?: string | null;
    firstName?: string | null;
    lastName?: string | null;
};
export declare type UserUpdateManyWithWhereNestedInput = {
    where: UserScalarWhereInput;
    data: UserUpdateManyDataInput;
};
export declare type UserUpsertWithWhereUniqueWithoutBubbleInput = {
    where: UserWhereUniqueInput;
    update: UserUpdateWithoutBubbleDataInput;
    create: UserCreateWithoutBubbleInput;
};
export declare type UserUpdateManyWithoutBubbleInput = {
    create?: Enumerable<UserCreateWithoutBubbleInput> | null;
    connect?: Enumerable<UserWhereUniqueInput> | null;
    set?: Enumerable<UserWhereUniqueInput> | null;
    disconnect?: Enumerable<UserWhereUniqueInput> | null;
    delete?: Enumerable<UserWhereUniqueInput> | null;
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutBubbleInput> | null;
    updateMany?: Enumerable<UserUpdateManyWithWhereNestedInput> | null;
    deleteMany?: Enumerable<UserScalarWhereInput> | null;
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutBubbleInput> | null;
};
export declare type BubbleUpdateInput = {
    id?: string | null;
    createdAt?: string | Date | null;
    members?: UserUpdateManyWithoutBubbleInput | null;
};
export declare type BubbleUpdateManyMutationInput = {
    id?: string | null;
    createdAt?: string | Date | null;
};
export declare type BubbleCreateWithoutMembersInput = {
    id?: string | null;
    createdAt?: string | Date | null;
};
export declare type BubbleCreateOneWithoutBubbleInput = {
    create?: BubbleCreateWithoutMembersInput | null;
    connect?: BubbleWhereUniqueInput | null;
};
export declare type UserCreateInput = {
    id?: string | null;
    firstName: string;
    lastName: string;
    posts?: PostCreateManyWithoutPostsInput | null;
    bubble?: BubbleCreateOneWithoutBubbleInput | null;
};
export declare type BubbleUpdateWithoutMembersDataInput = {
    id?: string | null;
    createdAt?: string | Date | null;
};
export declare type BubbleUpsertWithoutMembersInput = {
    update: BubbleUpdateWithoutMembersDataInput;
    create: BubbleCreateWithoutMembersInput;
};
export declare type BubbleUpdateOneWithoutMembersInput = {
    create?: BubbleCreateWithoutMembersInput | null;
    connect?: BubbleWhereUniqueInput | null;
    disconnect?: boolean | null;
    delete?: boolean | null;
    update?: BubbleUpdateWithoutMembersDataInput | null;
    upsert?: BubbleUpsertWithoutMembersInput | null;
};
export declare type UserUpdateInput = {
    id?: string | null;
    firstName?: string | null;
    lastName?: string | null;
    posts?: PostUpdateManyWithoutAuthorsInput | null;
    bubble?: BubbleUpdateOneWithoutMembersInput | null;
};
export declare type UserUpdateManyMutationInput = {
    id?: string | null;
    firstName?: string | null;
    lastName?: string | null;
};
export declare type UserCreateWithoutPostsInput = {
    id?: string | null;
    firstName: string;
    lastName: string;
    bubble?: BubbleCreateOneWithoutBubbleInput | null;
};
export declare type UserCreateManyWithoutAuthorsInput = {
    create?: Enumerable<UserCreateWithoutPostsInput> | null;
    connect?: Enumerable<UserWhereUniqueInput> | null;
};
export declare type PostCreateInput = {
    rating: number;
    status: PostStatus;
    authors?: UserCreateManyWithoutAuthorsInput | null;
};
export declare type UserUpdateWithoutPostsDataInput = {
    id?: string | null;
    firstName?: string | null;
    lastName?: string | null;
    bubble?: BubbleUpdateOneWithoutMembersInput | null;
};
export declare type UserUpdateWithWhereUniqueWithoutPostsInput = {
    where: UserWhereUniqueInput;
    data: UserUpdateWithoutPostsDataInput;
};
export declare type UserUpsertWithWhereUniqueWithoutPostsInput = {
    where: UserWhereUniqueInput;
    update: UserUpdateWithoutPostsDataInput;
    create: UserCreateWithoutPostsInput;
};
export declare type UserUpdateManyWithoutPostsInput = {
    create?: Enumerable<UserCreateWithoutPostsInput> | null;
    connect?: Enumerable<UserWhereUniqueInput> | null;
    set?: Enumerable<UserWhereUniqueInput> | null;
    disconnect?: Enumerable<UserWhereUniqueInput> | null;
    delete?: Enumerable<UserWhereUniqueInput> | null;
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutPostsInput> | null;
    updateMany?: Enumerable<UserUpdateManyWithWhereNestedInput> | null;
    deleteMany?: Enumerable<UserScalarWhereInput> | null;
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutPostsInput> | null;
};
export declare type PostUpdateInput = {
    id?: number | null;
    rating?: number | null;
    status?: PostStatus | null;
    authors?: UserUpdateManyWithoutPostsInput | null;
};
export declare type PostUpdateManyMutationInput = {
    id?: number | null;
    rating?: number | null;
    status?: PostStatus | null;
};
export declare type IntFilter = {
    equals?: number | null;
    not?: number | IntFilter | null;
    in?: Enumerable<number> | null;
    notIn?: Enumerable<number> | null;
    lt?: number | null;
    lte?: number | null;
    gt?: number | null;
    gte?: number | null;
};
export declare type UserFilter = {
    every?: UserWhereInput | null;
    some?: UserWhereInput | null;
    none?: UserWhereInput | null;
};
export declare type FloatFilter = {
    equals?: number | null;
    not?: number | FloatFilter | null;
    in?: Enumerable<number> | null;
    notIn?: Enumerable<number> | null;
    lt?: number | null;
    lte?: number | null;
    gt?: number | null;
    gte?: number | null;
};
export declare type PostStatusFilter = {};
export declare type StringFilter = {
    equals?: string | null;
    not?: string | StringFilter | null;
    in?: Enumerable<string> | null;
    notIn?: Enumerable<string> | null;
    lt?: string | null;
    lte?: string | null;
    gt?: string | null;
    gte?: string | null;
    contains?: string | null;
    startsWith?: string | null;
    endsWith?: string | null;
};
export declare type PostFilter = {
    every?: PostWhereInput | null;
    some?: PostWhereInput | null;
    none?: PostWhereInput | null;
};
export declare type UUIDFilter = {
    equals?: string | null;
    not?: string | UUIDFilter | null;
    in?: Enumerable<string> | null;
    notIn?: Enumerable<string> | null;
    lt?: string | null;
    lte?: string | null;
    gt?: string | null;
    gte?: string | null;
    contains?: string | null;
    startsWith?: string | null;
    endsWith?: string | null;
};
export declare type DateTimeFilter = {
    equals?: string | Date | null;
    not?: string | Date | DateTimeFilter | null;
    in?: Enumerable<string | Date> | null;
    notIn?: Enumerable<string | Date> | null;
    lt?: string | Date | null;
    lte?: string | Date | null;
    gt?: string | Date | null;
    gte?: string | Date | null;
};
export declare type BubbleOrderByInput = {
    id?: OrderByArg | null;
    createdAt?: OrderByArg | null;
};
export declare type UserOrderByInput = {
    id?: OrderByArg | null;
    firstName?: OrderByArg | null;
    lastName?: OrderByArg | null;
};
export declare type PostOrderByInput = {
    id?: OrderByArg | null;
    rating?: OrderByArg | null;
    status?: OrderByArg | null;
};
/**
 * Batch Payload for updateMany & deleteMany
 */
export declare type BatchPayload = {
    count: number;
};
/**
 * DMMF
 */
export declare const dmmf: DMMF.Document;
export {};
"
`;
