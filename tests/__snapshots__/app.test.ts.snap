// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`integrates together: console.log output 1`] = `""`;

exports[`integrates together: graphql schema 1`] = `
"### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type BatchPayload {
  count: Int!
}

type Bubble {
  createdAt: DateTime!
  id: String!
  members(first: Int, orderBy: BubbleMembersOrderByInput, where: BubbleMembersWhereInput): [User!]!
}

input BubbleCreateOneWithoutMembersInput {
  connect: BubbleWhereUniqueInput
  create: BubbleCreateWithoutMembersInput
}

input BubbleCreateWithoutMembersInput {
  createdAt: DateTime
  id: String
}

input BubbleMembersOrderByInput {
  firstName: OrderByArg
}

input BubbleMembersWhereInput {
  id: StringFilter
}

input BubbleWhereInput {
  AND: [BubbleWhereInput!]
  createdAt: DateTimeFilter
  id: UUIDFilter
  members: UserFilter
  NOT: [BubbleWhereInput!]
  OR: [BubbleWhereInput!]
}

input BubbleWhereUniqueInput {
  id: String
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Mutation {
  createOnePost(data: PostCreateInput!): Post!
  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
}

enum OrderByArg {
  asc
  desc
}

type Post {
  authors: [User!]!
  status: PostStatus!
}

input PostCreateInput {
  authors: UserCreateManyWithoutPostsInput
  rating: Float!
  status: PostStatus!
}

input PostFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

input PostOrderByInput {
  id: OrderByArg
  rating: OrderByArg
  status: OrderByArg
}

enum PostStatus {
  DRAFT
  PUBLISHED
}

input PostUpdateManyMutationInput {
  id: Int
  rating: Float
  status: PostStatus
}

input PostWhereInput {
  AND: [PostWhereInput!]
  authors: UserFilter
  id: IntFilter
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  rating: FloatFilter
  status: PostStatus
}

input PostWhereUniqueInput {
  id: Int
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, skip: Int): [User!]!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  firstName: String!
  id: String!
  posts(after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int, last: Int, orderBy: PostOrderByInput, skip: Int, where: PostWhereInput): [Post!]!
}

input UserCreateManyWithoutPostsInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutPostsInput!]
}

input UserCreateWithoutPostsInput {
  bubble: BubbleCreateOneWithoutMembersInput
  firstName: String!
  id: String
  lastName: String!
}

input UserFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  bubble: BubbleWhereInput
  firstName: StringFilter
  id: StringFilter
  lastName: StringFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  posts: PostFilter
}

input UserWhereUniqueInput {
  id: String
}

scalar UUID

input UUIDFilter {
  contains: UUID
  endsWith: UUID
  equals: UUID
  gt: UUID
  gte: UUID
  in: [UUID!]
  lt: UUID
  lte: UUID
  not: UUID
  notIn: [UUID!]
  startsWith: UUID
}
"
`;

exports[`integrates together: nexus core typegen 1`] = `
"/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */





declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  BubbleCreateOneWithoutMembersInput: { // input type
    connect?: NexusGenInputs['BubbleWhereUniqueInput'] | null; // BubbleWhereUniqueInput
    create?: NexusGenInputs['BubbleCreateWithoutMembersInput'] | null; // BubbleCreateWithoutMembersInput
  }
  BubbleCreateWithoutMembersInput: { // input type
    createdAt?: any | null; // DateTime
    id?: string | null; // String
  }
  BubbleMembersOrderByInput: { // input type
    firstName?: NexusGenEnums['OrderByArg'] | null; // OrderByArg
  }
  BubbleMembersWhereInput: { // input type
    id?: NexusGenInputs['StringFilter'] | null; // StringFilter
  }
  BubbleWhereInput: { // input type
    AND?: NexusGenInputs['BubbleWhereInput'][] | null; // [BubbleWhereInput!]
    createdAt?: NexusGenInputs['DateTimeFilter'] | null; // DateTimeFilter
    id?: NexusGenInputs['UUIDFilter'] | null; // UUIDFilter
    members?: NexusGenInputs['UserFilter'] | null; // UserFilter
    NOT?: NexusGenInputs['BubbleWhereInput'][] | null; // [BubbleWhereInput!]
    OR?: NexusGenInputs['BubbleWhereInput'][] | null; // [BubbleWhereInput!]
  }
  BubbleWhereUniqueInput: { // input type
    id?: string | null; // String
  }
  DateTimeFilter: { // input type
    equals?: any | null; // DateTime
    gt?: any | null; // DateTime
    gte?: any | null; // DateTime
    in?: any[] | null; // [DateTime!]
    lt?: any | null; // DateTime
    lte?: any | null; // DateTime
    not?: any | null; // DateTime
    notIn?: any[] | null; // [DateTime!]
  }
  FloatFilter: { // input type
    equals?: number | null; // Float
    gt?: number | null; // Float
    gte?: number | null; // Float
    in?: number[] | null; // [Float!]
    lt?: number | null; // Float
    lte?: number | null; // Float
    not?: number | null; // Float
    notIn?: number[] | null; // [Float!]
  }
  IntFilter: { // input type
    equals?: number | null; // Int
    gt?: number | null; // Int
    gte?: number | null; // Int
    in?: number[] | null; // [Int!]
    lt?: number | null; // Int
    lte?: number | null; // Int
    not?: number | null; // Int
    notIn?: number[] | null; // [Int!]
  }
  PostCreateInput: { // input type
    authors?: NexusGenInputs['UserCreateManyWithoutPostsInput'] | null; // UserCreateManyWithoutPostsInput
    rating: number; // Float!
    status: NexusGenEnums['PostStatus']; // PostStatus!
  }
  PostFilter: { // input type
    every?: NexusGenInputs['PostWhereInput'] | null; // PostWhereInput
    none?: NexusGenInputs['PostWhereInput'] | null; // PostWhereInput
    some?: NexusGenInputs['PostWhereInput'] | null; // PostWhereInput
  }
  PostOrderByInput: { // input type
    id?: NexusGenEnums['OrderByArg'] | null; // OrderByArg
    rating?: NexusGenEnums['OrderByArg'] | null; // OrderByArg
    status?: NexusGenEnums['OrderByArg'] | null; // OrderByArg
  }
  PostUpdateManyMutationInput: { // input type
    id?: number | null; // Int
    rating?: number | null; // Float
    status?: NexusGenEnums['PostStatus'] | null; // PostStatus
  }
  PostWhereInput: { // input type
    AND?: NexusGenInputs['PostWhereInput'][] | null; // [PostWhereInput!]
    authors?: NexusGenInputs['UserFilter'] | null; // UserFilter
    id?: NexusGenInputs['IntFilter'] | null; // IntFilter
    NOT?: NexusGenInputs['PostWhereInput'][] | null; // [PostWhereInput!]
    OR?: NexusGenInputs['PostWhereInput'][] | null; // [PostWhereInput!]
    rating?: NexusGenInputs['FloatFilter'] | null; // FloatFilter
    status?: NexusGenEnums['PostStatus'] | null; // PostStatus
  }
  PostWhereUniqueInput: { // input type
    id?: number | null; // Int
  }
  StringFilter: { // input type
    contains?: string | null; // String
    endsWith?: string | null; // String
    equals?: string | null; // String
    gt?: string | null; // String
    gte?: string | null; // String
    in?: string[] | null; // [String!]
    lt?: string | null; // String
    lte?: string | null; // String
    not?: string | null; // String
    notIn?: string[] | null; // [String!]
    startsWith?: string | null; // String
  }
  UUIDFilter: { // input type
    contains?: any | null; // UUID
    endsWith?: any | null; // UUID
    equals?: any | null; // UUID
    gt?: any | null; // UUID
    gte?: any | null; // UUID
    in?: any[] | null; // [UUID!]
    lt?: any | null; // UUID
    lte?: any | null; // UUID
    not?: any | null; // UUID
    notIn?: any[] | null; // [UUID!]
    startsWith?: any | null; // UUID
  }
  UserCreateManyWithoutPostsInput: { // input type
    connect?: NexusGenInputs['UserWhereUniqueInput'][] | null; // [UserWhereUniqueInput!]
    create?: NexusGenInputs['UserCreateWithoutPostsInput'][] | null; // [UserCreateWithoutPostsInput!]
  }
  UserCreateWithoutPostsInput: { // input type
    bubble?: NexusGenInputs['BubbleCreateOneWithoutMembersInput'] | null; // BubbleCreateOneWithoutMembersInput
    firstName: string; // String!
    id?: string | null; // String
    lastName: string; // String!
  }
  UserFilter: { // input type
    every?: NexusGenInputs['UserWhereInput'] | null; // UserWhereInput
    none?: NexusGenInputs['UserWhereInput'] | null; // UserWhereInput
    some?: NexusGenInputs['UserWhereInput'] | null; // UserWhereInput
  }
  UserWhereInput: { // input type
    AND?: NexusGenInputs['UserWhereInput'][] | null; // [UserWhereInput!]
    bubble?: NexusGenInputs['BubbleWhereInput'] | null; // BubbleWhereInput
    firstName?: NexusGenInputs['StringFilter'] | null; // StringFilter
    id?: NexusGenInputs['StringFilter'] | null; // StringFilter
    lastName?: NexusGenInputs['StringFilter'] | null; // StringFilter
    NOT?: NexusGenInputs['UserWhereInput'][] | null; // [UserWhereInput!]
    OR?: NexusGenInputs['UserWhereInput'][] | null; // [UserWhereInput!]
    posts?: NexusGenInputs['PostFilter'] | null; // PostFilter
  }
  UserWhereUniqueInput: { // input type
    id?: string | null; // String
  }
}

export interface NexusGenEnums {
  OrderByArg: \\"asc\\" | \\"desc\\"
  PostStatus: \\"DRAFT\\" | \\"PUBLISHED\\"
}

export interface NexusGenRootTypes {
  BatchPayload: { // root type
    count: number; // Int!
  }
  Bubble: { // root type
    createdAt: any; // DateTime!
    id: string; // String!
  }
  Mutation: {};
  Post: { // root type
    status: NexusGenEnums['PostStatus']; // PostStatus!
  }
  Query: {};
  User: { // root type
    firstName: string; // String!
    id: string; // String!
  }
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  DateTime: any;
  UUID: any;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  BubbleCreateOneWithoutMembersInput: NexusGenInputs['BubbleCreateOneWithoutMembersInput'];
  BubbleCreateWithoutMembersInput: NexusGenInputs['BubbleCreateWithoutMembersInput'];
  BubbleMembersOrderByInput: NexusGenInputs['BubbleMembersOrderByInput'];
  BubbleMembersWhereInput: NexusGenInputs['BubbleMembersWhereInput'];
  BubbleWhereInput: NexusGenInputs['BubbleWhereInput'];
  BubbleWhereUniqueInput: NexusGenInputs['BubbleWhereUniqueInput'];
  DateTimeFilter: NexusGenInputs['DateTimeFilter'];
  FloatFilter: NexusGenInputs['FloatFilter'];
  IntFilter: NexusGenInputs['IntFilter'];
  PostCreateInput: NexusGenInputs['PostCreateInput'];
  PostFilter: NexusGenInputs['PostFilter'];
  PostOrderByInput: NexusGenInputs['PostOrderByInput'];
  PostUpdateManyMutationInput: NexusGenInputs['PostUpdateManyMutationInput'];
  PostWhereInput: NexusGenInputs['PostWhereInput'];
  PostWhereUniqueInput: NexusGenInputs['PostWhereUniqueInput'];
  StringFilter: NexusGenInputs['StringFilter'];
  UUIDFilter: NexusGenInputs['UUIDFilter'];
  UserCreateManyWithoutPostsInput: NexusGenInputs['UserCreateManyWithoutPostsInput'];
  UserCreateWithoutPostsInput: NexusGenInputs['UserCreateWithoutPostsInput'];
  UserFilter: NexusGenInputs['UserFilter'];
  UserWhereInput: NexusGenInputs['UserWhereInput'];
  UserWhereUniqueInput: NexusGenInputs['UserWhereUniqueInput'];
  OrderByArg: NexusGenEnums['OrderByArg'];
  PostStatus: NexusGenEnums['PostStatus'];
}

export interface NexusGenFieldTypes {
  BatchPayload: { // field return type
    count: number; // Int!
  }
  Bubble: { // field return type
    createdAt: any; // DateTime!
    id: string; // String!
    members: NexusGenRootTypes['User'][]; // [User!]!
  }
  Mutation: { // field return type
    createOnePost: NexusGenRootTypes['Post']; // Post!
    updateManyPost: NexusGenRootTypes['BatchPayload']; // BatchPayload!
  }
  Post: { // field return type
    authors: NexusGenRootTypes['User'][]; // [User!]!
    status: NexusGenEnums['PostStatus']; // PostStatus!
  }
  Query: { // field return type
    user: NexusGenRootTypes['User'] | null; // User
    users: NexusGenRootTypes['User'][]; // [User!]!
  }
  User: { // field return type
    firstName: string; // String!
    id: string; // String!
    posts: NexusGenRootTypes['Post'][]; // [Post!]!
  }
}

export interface NexusGenArgTypes {
  Bubble: {
    members: { // args
      first?: number | null; // Int
      orderBy?: NexusGenInputs['BubbleMembersOrderByInput'] | null; // BubbleMembersOrderByInput
      where?: NexusGenInputs['BubbleMembersWhereInput'] | null; // BubbleMembersWhereInput
    }
  }
  Mutation: {
    createOnePost: { // args
      data: NexusGenInputs['PostCreateInput']; // PostCreateInput!
    }
    updateManyPost: { // args
      data: NexusGenInputs['PostUpdateManyMutationInput']; // PostUpdateManyMutationInput!
      where?: NexusGenInputs['PostWhereInput'] | null; // PostWhereInput
    }
  }
  Query: {
    user: { // args
      where: NexusGenInputs['UserWhereUniqueInput']; // UserWhereUniqueInput!
    }
    users: { // args
      after?: NexusGenInputs['UserWhereUniqueInput'] | null; // UserWhereUniqueInput
      before?: NexusGenInputs['UserWhereUniqueInput'] | null; // UserWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
      skip?: number | null; // Int
    }
  }
  User: {
    posts: { // args
      after?: NexusGenInputs['PostWhereUniqueInput'] | null; // PostWhereUniqueInput
      before?: NexusGenInputs['PostWhereUniqueInput'] | null; // PostWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
      orderBy?: NexusGenInputs['PostOrderByInput'] | null; // PostOrderByInput
      skip?: number | null; // Int
      where?: NexusGenInputs['PostWhereInput'] | null; // PostWhereInput
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = \\"BatchPayload\\" | \\"Bubble\\" | \\"Mutation\\" | \\"Post\\" | \\"Query\\" | \\"User\\";

export type NexusGenInputNames = \\"BubbleCreateOneWithoutMembersInput\\" | \\"BubbleCreateWithoutMembersInput\\" | \\"BubbleMembersOrderByInput\\" | \\"BubbleMembersWhereInput\\" | \\"BubbleWhereInput\\" | \\"BubbleWhereUniqueInput\\" | \\"DateTimeFilter\\" | \\"FloatFilter\\" | \\"IntFilter\\" | \\"PostCreateInput\\" | \\"PostFilter\\" | \\"PostOrderByInput\\" | \\"PostUpdateManyMutationInput\\" | \\"PostWhereInput\\" | \\"PostWhereUniqueInput\\" | \\"StringFilter\\" | \\"UUIDFilter\\" | \\"UserCreateManyWithoutPostsInput\\" | \\"UserCreateWithoutPostsInput\\" | \\"UserFilter\\" | \\"UserWhereInput\\" | \\"UserWhereUniqueInput\\";

export type NexusGenEnumNames = \\"OrderByArg\\" | \\"PostStatus\\";

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = \\"Boolean\\" | \\"DateTime\\" | \\"Float\\" | \\"ID\\" | \\"Int\\" | \\"String\\" | \\"UUID\\";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}"
`;

exports[`integrates together: nexus prisma typegen 1`] = `
"import * as prisma from '@prisma/client';
import { core } from 'nexus';
import { GraphQLResolveInfo } from 'graphql';

// Types helpers
  type IsModelNameExistsInGraphQLTypes<
  ReturnType extends any
> = ReturnType extends core.GetGen<'objectNames'> ? true : false;

type NexusPrismaScalarOpts = {
  alias?: string;
};

type Pagination = {
  first?: boolean;
  last?: boolean;
  before?: boolean;
  after?: boolean;
  skip?: boolean;
};

type RootObjectTypes = Pick<
  core.GetGen<'rootTypes'>,
  core.GetGen<'objectNames'>
>;

/**
 * Determine if \`B\` is a subset (or equivalent to) of \`A\`.
*/
type IsSubset<A, B> = keyof A extends never
  ? false
  : B extends A
  ? true
  : false;

type OmitByValue<T, ValueType> = Pick<
  T,
  { [Key in keyof T]: T[Key] extends ValueType ? never : Key }[keyof T]
>;

type GetSubsetTypes<ModelName extends any> = keyof OmitByValue<
  {
    [P in keyof RootObjectTypes]: ModelName extends keyof ModelTypes
      ? IsSubset<RootObjectTypes[P], ModelTypes[ModelName]> extends true
        ? RootObjectTypes[P]
        : never
      : never;
  },
  never
>;

type SubsetTypes<ModelName extends any> = GetSubsetTypes<
  ModelName
> extends never
  ? \`ERROR: No subset types are available. Please make sure that one of your GraphQL type is a subset of your t.model('<ModelName>')\`
  : GetSubsetTypes<ModelName>;

type DynamicRequiredType<ReturnType extends any> = IsModelNameExistsInGraphQLTypes<
  ReturnType
> extends true
  ? { type?: SubsetTypes<ReturnType> }
  : { type: SubsetTypes<ReturnType> };

type GetNexusPrismaInput<
  ModelName extends any,
  MethodName extends any,
  InputName extends 'filtering' | 'ordering'
> = ModelName extends keyof NexusPrismaInputs
  ? MethodName extends keyof NexusPrismaInputs[ModelName]
    ? NexusPrismaInputs[ModelName][MethodName][InputName]
    : never
  : never;

/**
 *  Represents arguments required by Prisma Client JS that will
 *  be derived from a request's input (args, context, and info)
 *  and omitted from the GraphQL API. The object itself maps the
 *  names of these args to a function that takes an object representing
 *  the request's input and returns the value to pass to the prisma
 *  arg of the same name.
 */
export type LocalComputedInputs<MethodName extends any> = Record<
  string,
  (params: LocalMutationResolverParams<MethodName>) => unknown
>

export type GlobalComputedInputs = Record<
  string,
  (params: GlobalMutationResolverParams) => unknown
>

type BaseMutationResolverParams = {
  info: GraphQLResolveInfo
  ctx: Context
}

export type GlobalMutationResolverParams = BaseMutationResolverParams & {
  args: Record<string, any> & { data: unknown }
}

export type LocalMutationResolverParams<
  MethodName extends any
> = BaseMutationResolverParams & {
  args: MethodName extends keyof core.GetGen2<'argTypes', 'Mutation'>
    ? core.GetGen3<'argTypes', 'Mutation', MethodName>
    : any
}

export type Context = core.GetGen<'context'>

type NexusPrismaRelationOpts<
  ModelName extends any,
  MethodName extends any,
  ReturnType extends any
> = GetNexusPrismaInput<
  // If GetNexusPrismaInput returns never, it means there are no filtering/ordering args for it.
  ModelName,
  MethodName,
  'filtering'
> extends never
  ? {
      alias?: string;
      upfilteredKey?: string;
      computedInputs?: LocalComputedInputs<MethodName>;
    } & DynamicRequiredType<ReturnType> : {
      computedInputs?: LocalComputedInputs<MethodName>;
      upfilteredKey?: string;
      filtering?:
        | boolean
        | Partial<
            Record<
              GetNexusPrismaInput<ModelName, MethodName, 'filtering'>,
              boolean
            >
          >;
      ordering?:
        | boolean
        | Partial<
            Record<
              GetNexusPrismaInput<ModelName, MethodName, 'ordering'>,
              boolean
            >
          >;
      pagination?: boolean | Pagination;
    } & DynamicRequiredType<ReturnType>;

type IsScalar<TypeName extends any> = TypeName extends core.GetGen<'scalarNames'>
  ? true
  : false;

type IsObject<Name extends any> = Name extends core.GetGen<'objectNames'>
  ? true
  : false

type IsEnum<Name extends any> = Name extends core.GetGen<'enumNames'>
  ? true
  : false

type IsInputObject<Name extends any> = Name extends core.GetGen<'inputNames'>
  ? true
  : false

/**
 * The kind that a GraphQL type may be.
 */
type Kind = 'Enum' | 'Object' | 'Scalar' | 'InputObject'

/**
 * Helper to safely reference a Kind type. For example instead of the following
 * which would admit a typo:
 *
 * \`\`\`ts
 * type Foo = Bar extends 'scalar' ? ...
 * \`\`\`
 *
 * You can do this which guarantees a correct reference:
 *
 * \`\`\`ts
 * type Foo = Bar extends AKind<'Scalar'> ? ...
 * \`\`\`
 *
 */
type AKind<T extends Kind> = T

type GetKind<Name extends any> = IsEnum<Name> extends true
  ? 'Enum'
  : IsScalar<Name> extends true
  ? 'Scalar'
  : IsObject<Name> extends true
  ? 'Object'
  : IsInputObject<Name> extends true
  ? 'InputObject'
  // FIXME should be \`never\`, but GQL objects named differently
  // than backing type fall into this branch
  : 'Object'

type NexusPrismaFields<ModelName extends keyof NexusPrismaTypes> = {
  [MethodName in keyof NexusPrismaTypes[ModelName]]: NexusPrismaMethod<
    ModelName,
    MethodName,
    GetKind<NexusPrismaTypes[ModelName][MethodName]> // Is the return type a scalar?
  >;
};

type NexusPrismaMethod<
  ModelName extends keyof NexusPrismaTypes,
  MethodName extends keyof NexusPrismaTypes[ModelName],
  ThisKind extends Kind,
  ReturnType extends any = NexusPrismaTypes[ModelName][MethodName]
> =
  ThisKind extends AKind<'Enum'>
  ? () => NexusPrismaFields<ModelName>
  : ThisKind extends AKind<'Scalar'>
  ? (opts?: NexusPrismaScalarOpts) => NexusPrismaFields<ModelName> // Return optional scalar opts
  : IsModelNameExistsInGraphQLTypes<ReturnType> extends true // If model name has a mapped graphql types
  ? (
      opts?: NexusPrismaRelationOpts<ModelName, MethodName, ReturnType>
    ) => NexusPrismaFields<ModelName> // Then make opts optional
  : (
      opts: NexusPrismaRelationOpts<ModelName, MethodName, ReturnType>
    ) => NexusPrismaFields<ModelName>; // Else force use input the related graphql type -> { type: '...' }

type GetNexusPrismaMethod<
  TypeName extends string
> = TypeName extends keyof NexusPrismaMethods
  ? NexusPrismaMethods[TypeName]
  : <CustomTypeName extends keyof ModelTypes>(
      typeName: CustomTypeName
    ) => NexusPrismaMethods[CustomTypeName];

type GetNexusPrisma<
  TypeName extends string,
  ModelOrCrud extends 'model' | 'crud'
> = ModelOrCrud extends 'model'
  ? TypeName extends 'Mutation'
    ? never
    : TypeName extends 'Query'
    ? never
    : GetNexusPrismaMethod<TypeName>
  : ModelOrCrud extends 'crud'
  ? TypeName extends 'Mutation'
    ? GetNexusPrismaMethod<TypeName>
    : TypeName extends 'Query'
    ? GetNexusPrismaMethod<TypeName>
    : never
  : never;
  

// Generated
interface ModelTypes {
  Bubble: prisma.Bubble
  User: prisma.User
  Post: prisma.Post
}
  
interface NexusPrismaInputs {
  Query: {
    bubbles: {
  filtering: 'id' | 'createdAt' | 'members' | 'AND' | 'OR' | 'NOT'
  ordering: 'id' | 'createdAt'
}
    users: {
  filtering: 'id' | 'posts' | 'firstName' | 'lastName' | 'AND' | 'OR' | 'NOT' | 'bubble'
  ordering: 'id' | 'firstName' | 'lastName'
}
    posts: {
  filtering: 'id' | 'authors' | 'rating' | 'status' | 'AND' | 'OR' | 'NOT'
  ordering: 'id' | 'rating' | 'status'
}

  },
    Bubble: {
    members: {
  filtering: 'id' | 'posts' | 'firstName' | 'lastName' | 'AND' | 'OR' | 'NOT' | 'bubble'
  ordering: 'id' | 'firstName' | 'lastName'
}

  },  User: {
    posts: {
  filtering: 'id' | 'authors' | 'rating' | 'status' | 'AND' | 'OR' | 'NOT'
  ordering: 'id' | 'rating' | 'status'
}

  },  Post: {
    authors: {
  filtering: 'id' | 'posts' | 'firstName' | 'lastName' | 'AND' | 'OR' | 'NOT' | 'bubble'
  ordering: 'id' | 'firstName' | 'lastName'
}

  }
}

interface NexusPrismaTypes {
  Query: {
    bubble: 'Bubble'
    bubbles: 'Bubble'
    user: 'User'
    users: 'User'
    post: 'Post'
    posts: 'Post'

  },
  Mutation: {
    createOneBubble: 'Bubble'
    updateOneBubble: 'Bubble'
    updateManyBubble: 'BatchPayload'
    deleteOneBubble: 'Bubble'
    deleteManyBubble: 'BatchPayload'
    upsertOneBubble: 'Bubble'
    createOneUser: 'User'
    updateOneUser: 'User'
    updateManyUser: 'BatchPayload'
    deleteOneUser: 'User'
    deleteManyUser: 'BatchPayload'
    upsertOneUser: 'User'
    createOnePost: 'Post'
    updateOnePost: 'Post'
    updateManyPost: 'BatchPayload'
    deleteOnePost: 'Post'
    deleteManyPost: 'BatchPayload'
    upsertOnePost: 'Post'

  },
  Bubble: {
    id: 'String'
    createdAt: 'DateTime'
    members: 'User'

},  User: {
    id: 'String'
    posts: 'Post'
    firstName: 'String'
    lastName: 'String'
    bubble: 'Bubble'

},  Post: {
    id: 'Int'
    authors: 'User'
    rating: 'Float'
    status: 'PostStatus'

}
}

interface NexusPrismaMethods {
  Bubble: NexusPrismaFields<'Bubble'>
  User: NexusPrismaFields<'User'>
  Post: NexusPrismaFields<'Post'>
  Query: NexusPrismaFields<'Query'>
  Mutation: NexusPrismaFields<'Mutation'>
}
  

declare global {
  type NexusPrisma<
    TypeName extends string,
    ModelOrCrud extends 'model' | 'crud'
  > = GetNexusPrisma<TypeName, ModelOrCrud>;
}
  "
`;

exports[`integrates together: photon source code 1`] = `
"
Object.defineProperty(exports, \\"__esModule\\", { value: true });

const {
  DMMF,
  DMMFClass,
  deepGet,
  deepSet,
  makeDocument,
  Engine,
  debugLib,
  transformDocument,
  chalk,
  printStack,
  mergeBy,
  unpack,
  stripAnsi,
  parseDotenv,
  sqlTemplateTag,
  Dataloader,
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  lowerCase
} = require('./runtime')

/**
 * Query Engine version: latest
 */

const path = require('path')
const fs = require('fs')

const debug = debugLib('prisma-client')

exports.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
exports.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError;
exports.PrismaClientRustPanicError = PrismaClientRustPanicError;
exports.PrismaClientInitializationError = PrismaClientInitializationError;
exports.PrismaClientValidationError = PrismaClientValidationError;

class PrismaClientFetcher {
  constructor(prisma, enableDebug = false, hooks) {
    this.prisma = prisma;
    this.debug = enableDebug;
    this.hooks = hooks;
    this.dataloader = new Dataloader(async (requests) => {
      // TODO: More elaborate logic to only batch certain queries together
      // We should e.g. make sure, that findOne queries are batched together
      await this.prisma.connect();
      const queries = requests.map(r => String(r.document))
      debug('Requests:')
      debug(queries)
      const results = await this.prisma.engine.request(queries)
      debug('Results:')
      debug(results)
      return results
    })
  }
  async request({ document, dataPath = [], rootField, typeName, isList, callsite, collectTimestamps, clientMethod }) {
    if (this.hooks && this.hooks.beforeRequest) {
      const query = String(document);
      this.hooks.beforeRequest({ query, path: dataPath, rootField, typeName, document });
    }
    try {
      collectTimestamps && collectTimestamps.record(\\"Pre-prismaClientConnect\\");
      collectTimestamps && collectTimestamps.record(\\"Post-prismaClientConnect\\");
      collectTimestamps && collectTimestamps.record(\\"Pre-engine_request\\");
      const result = await this.dataloader.request({ document });
      collectTimestamps && collectTimestamps.record(\\"Post-engine_request\\");
      collectTimestamps && collectTimestamps.record(\\"Pre-unpack\\");
      const unpackResult = this.unpack(document, result, dataPath, rootField, isList);
      collectTimestamps && collectTimestamps.record(\\"Post-unpack\\");
      return unpackResult;
    } catch (e) {
      debug(e.stack);
      if (callsite) {
        const { stack } = printStack({
          callsite,
          originalMethod: clientMethod,
          onUs: e.isPanic
        });
        const message = stack + e.message;
        if (e.code) {
          throw new PrismaClientKnownRequestError(this.sanitizeMessage(message), e.code, e.meta);
        }
        if (e instanceof PrismaClientUnknownRequestError) {
          throw new PrismaClientUnknownRequestError(this.sanitizeMessage(message));
        } else if (e instanceof PrismaClientInitializationError) {
          throw new PrismaClientInitializationError(this.sanitizeMessage(message));
        } else if (e instanceof PrismaClientRustPanicError) {
          throw new PrismaClientRustPanicError(this.sanitizeMessage(message));
        }
      } else {
        if (e.code) {
          throw new PrismaClientKnownRequestError(this.sanitizeMessage(e.message), e.code, e.meta);
        }
        if (e.isPanic) {
          throw new PrismaClientRustPanicError(e.message);
        } else {
          if (e instanceof PrismaClientUnknownRequestError) {
            throw new PrismaClientUnknownRequestError(this.sanitizeMessage(message));
          } else if (e instanceof PrismaClientInitializationError) {
            throw new PrismaClientInitializationError(this.sanitizeMessage(message));
          } else if (e instanceof PrismaClientRustPanicError) {
            throw new PrismaClientRustPanicError(this.sanitizeMessage(message));
          }
        }
      }
    }
  }
  sanitizeMessage(message) {
    if (this.prisma.errorFormat && this.prisma.errorFormat !== 'pretty') {
      return stripAnsi(message);
    }
    return message;
  }
  unpack(document, data, path, rootField, isList) {
    if (data.data) {
      data = data.data
    }
    const getPath = [];
    if (rootField) {
      getPath.push(rootField);
    }
    getPath.push(...path.filter(p => p !== 'select' && p !== 'include'));
    return unpack({ document, data, path: getPath });
  }
}

class CollectTimestamps {
  constructor(startName) {
    this.records = [];
    this.start = undefined;
    this.additionalResults = {};
    this.start = { name: startName, value: process.hrtime() };
  }
  record(name) {
    this.records.push({ name, value: process.hrtime() });
  }
  elapsed(start, end) {
    const diff = [end[0] - start[0], end[1] - start[1]];
    const nanoseconds = (diff[0] * 1e9) + diff[1];
    const milliseconds = nanoseconds / 1e6;
    return milliseconds;
  }
  addResults(results) {
    Object.assign(this.additionalResults, results);
  }
  getResults() {
    const results = this.records.reduce((acc, record) => {
      const name = record.name.split('-')[1];
      if (acc[name]) {
        acc[name] = this.elapsed(acc[name], record.value);
      }
      else {
        acc[name] = record.value;
      }
      return acc;
    }, {});
    Object.assign(results, {
      total: this.elapsed(this.start.value, this.records[this.records.length - 1].value),
      ...this.additionalResults
    });
    return results;
  }
}


/**
 * Build tool annotations
 * In order to make \`ncc\` and \`node-file-trace\` happy.
**/

path.join(__dirname, 'runtime/__NON_DETERMINISTIC_CONTENT__');

/**
 * Client
**/

// tested in getLogLevel.test.ts
function getLogLevel(log) {
    return log.reduce((acc, curr) => {
        const currentLevel = typeof curr === 'string' ? curr : curr.level;
        if (currentLevel === 'query') {
            return acc;
        }
        if (!acc) {
            return currentLevel;
        }
        if (curr === 'info' || acc === 'info') {
            // info always has precedence
            return 'info';
        }
        return currentLevel;
    }, undefined);
}
exports.getLogLevel = getLogLevel;

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * \`\`\`
 * const prisma = new PrismaClient()
 * // Fetch zero or more Bubbles
 * const bubbles = await prisma.bubble.findMany()
 * \`\`\`
 *
 * 
 * Read more in our [docs](https://github.com/prisma/prisma2/blob/master/docs/prisma-client-js/api.md).
 */
class PrismaClient {
/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * \`\`\`
 * const prisma = new PrismaClient()
 * // Fetch zero or more Bubbles
 * const bubbles = await prisma.bubble.findMany()
 * \`\`\`
 *
 * 
 * Read more in our [docs](https://github.com/prisma/prisma2/blob/master/docs/prisma-client-js/api.md).
 */
  constructor(optionsArg) {
    const options = optionsArg || {}
    const internal = options.__internal || {}

    const useDebug = internal.debug === true
    if (useDebug) {
      debugLib.enable('prisma-client')
    }

    // datamodel = datamodel without datasources + printed datasources

    const predefinedDatasources = []

    const inputDatasources = Object.entries(options.datasources || {}).map(([name, url]) => ({ name, url }))
    const datasources = mergeBy(predefinedDatasources, inputDatasources, source => source.name)

    const engineConfig = internal.engine || {}

    if (options.errorFormat) {
      this.errorFormat = options.errorFormat
    } else if (process.env.NODE_ENV === 'production') {
      this.errorFormat = 'minimal'
    } else if (process.env.NO_COLOR) {
      this.errorFormat = 'colorless'
    } else {
      this.errorFormat = 'pretty'
    }

    this.measurePerformance = internal.measurePerformance || false

    const envFile = this.readEnv()

    this.engineConfig = {
      cwd: engineConfig.cwd || path.resolve(__dirname, \\"../../../tests/__app\\"),
      debug: useDebug,
      datamodelPath: path.resolve(__dirname, 'schema.prisma'),
      prismaPath: engineConfig.binaryPath || undefined,
      datasources,
      generator: {__NON_DETERMINISTIC_CONTENT__:true}
      showColors: this.errorFormat === 'pretty',
      logLevel: options.log && getLogLevel(options.log),
      logQueries: options.log && Boolean(options.log.find(o => typeof o === 'string' ? o === 'query' : o.level === 'query')),
      env: envFile,
      flags: options.forceTransactions ? ['--always_force_transactions'] : []
    }

    debug({ engineConfig: this.engineConfig })

    this.engine = new Engine(this.engineConfig)

    this.dmmf = new DMMFClass(dmmf)

    this.fetcher = new PrismaClientFetcher(this, false, internal.hooks)

    if (options.log) {
      for (const log of options.log) {
        const level = typeof log === 'string' ? log : log.emit === 'stdout' ? log.level : null
        if (level) {
          this.on(level, event => {
            const colorMap = {
              query: 'blue',
              info: 'cyan',
              warn: 'yellow'
            }
            console.error(chalk[colorMap[level]](\`prisma:\${level}\`.padEnd(13)) + (event.message || event.query))
          })
        }
      }
    }
  }

  /**
   * @private
   */
  readEnv() {
    const dotEnvPath = path.resolve(path.resolve(__dirname, \\"../../../tests/__app\\"), '.env')

    if (fs.existsSync(dotEnvPath)) {
      return parseDotenv(fs.readFileSync(dotEnvPath, 'utf-8'))
    }

    return {}
  }

  on(eventType, callback) {
    this.engine.on(eventType, event => {
      const fields = event.fields
      if (eventType === 'query') {
        callback({
          timestamp: event.timestamp,
          query: fields.query,
          params: fields.params,
          duration: fields.duration_ms,
          target: event.target
        })
      } else { // warn or info events
        callback({
          timestamp: event.timestamp,
          message: fields.message,
          target: event.target
        })
      }
    })
  }
  /**
   * Connect with the database
   */
  async connect() {
    if (this.disconnectionPromise) {
      debug('awaiting disconnection promise')
      await this.disconnectionPromise
    } else {
      debug('disconnection promise doesnt exist')
    }
    if (this.connectionPromise) {
      return this.connectionPromise
    }
    this.connectionPromise = this.engine.start()
    return this.connectionPromise
  }
  /**
   * @private
   */
  async runDisconnect() {
    debug('disconnectionPromise: stopping engine')
    await this.engine.stop()
    delete this.connectionPromise
    this.engine = new Engine(this.engineConfig)
    delete this.disconnectionPromise
  }
  /**
   * Disconnect from the database
   */
  async disconnect() {
    if (!this.disconnectionPromise) {
      this.disconnectionPromise = this.runDisconnect() 
    }
    return this.disconnectionPromise
  }
  /**
   * Makes a raw query
   */ 
  async raw(stringOrTemplateStringsArray, ...values) {
    let query = ''
    let parameters = undefined

    if (Array.isArray(stringOrTemplateStringsArray)) {
      // Called with prisma.raw\`\`
      const queryInstance = sqlTemplateTag.sqltag(stringOrTemplateStringsArray, ...values)
      query = queryInstance.sql
      parameters = JSON.stringify(queryInstance.values)
    } else {
      // Called with prisma.raw(string)
      query = stringOrTemplateStringsArray 
    }

    const document = makeDocument({
      dmmf: this.dmmf,
      rootField: \\"executeRaw\\",
      rootTypeName: 'mutation',
      select: {
        query,
        parameters
      }
    })

    document.validate({ query, parameters }, false, 'raw', this.errorFormat)
    
    return this.fetcher.request({ document, rootField: 'executeRaw', typeName: 'raw', isList: false })
  }

  /**
   * \`prisma.bubble\`: Exposes CRUD operations for the **Bubble** model.
   * Example usage:
   * \`\`\`ts
   * // Fetch zero or more Bubbles
   * const bubbles = await prisma.bubble.findMany()
   * \`\`\`
   */
  get bubble() {
    return BubbleDelegate(this.dmmf, this.fetcher, this.errorFormat, this.measurePerformance)
  }
  /**
   * \`prisma.user\`: Exposes CRUD operations for the **User** model.
   * Example usage:
   * \`\`\`ts
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * \`\`\`
   */
  get user() {
    return UserDelegate(this.dmmf, this.fetcher, this.errorFormat, this.measurePerformance)
  }
  /**
   * \`prisma.post\`: Exposes CRUD operations for the **Post** model.
   * Example usage:
   * \`\`\`ts
   * // Fetch zero or more Posts
   * const posts = await prisma.post.findMany()
   * \`\`\`
   */
  get post() {
    return PostDelegate(this.dmmf, this.fetcher, this.errorFormat, this.measurePerformance)
  }
}
exports.PrismaClient = PrismaClient



/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.OrderByArg = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.PostStatus = makeEnum({
  DRAFT: 'DRAFT',
  PUBLISHED: 'PUBLISHED'
});


function BubbleDelegate(dmmf, fetcher, errorFormat, measurePerformance) {
  const Bubble = {} 
  Bubble.findOne = (args) => args && args.select ? new BubbleClient(
    dmmf,
    fetcher,
    'query',
    'findOneBubble',
    'bubbles.findOne',
    args || {},
    [],
    errorFormat,
    measurePerformance
  ) : new BubbleClient(
    dmmf,
    fetcher,
    'query',
    'findOneBubble',
    'bubbles.findOne',
    args || {},
    [],
    errorFormat,
    measurePerformance
  )
  Bubble.findMany = (args) => new BubbleClient(
    dmmf,
    fetcher,
    'query',
    'findManyBubble',
    'bubbles.findMany',
    args || {},
    [],
    errorFormat,
    measurePerformance
  )
  Bubble.create = (args) => args && args.select ? new BubbleClient(
    dmmf,
    fetcher,
    'mutation',
    'createOneBubble',
    'bubbles.create',
    args || {},
    [],
    errorFormat,
    measurePerformance
  ) : new BubbleClient(
    dmmf,
    fetcher,
    'mutation',
    'createOneBubble',
    'bubbles.create',
    args || {},
    [],
    errorFormat,
    measurePerformance
  )
  Bubble.delete = (args) => args && args.select ? new BubbleClient(
    dmmf,
    fetcher,
    'mutation',
    'deleteOneBubble',
    'bubbles.delete',
    args || {},
    [],
    errorFormat,
    measurePerformance
  ) : new BubbleClient(
    dmmf,
    fetcher,
    'mutation',
    'deleteOneBubble',
    'bubbles.delete',
    args || {},
    [],
    errorFormat,
    measurePerformance
  )
  Bubble.update = (args) => args && args.select ? new BubbleClient(
    dmmf,
    fetcher,
    'mutation',
    'updateOneBubble',
    'bubbles.update',
    args || {},
    [],
    errorFormat,
    measurePerformance
  ) : new BubbleClient(
    dmmf,
    fetcher,
    'mutation',
    'updateOneBubble',
    'bubbles.update',
    args || {},
    [],
    errorFormat,
    measurePerformance
  )
  Bubble.deleteMany = (args) => new BubbleClient(
    dmmf,
    fetcher,
    'mutation',
    'deleteManyBubble',
    'bubbles.deleteMany',
    args || {},
    [],
    errorFormat,
    measurePerformance
  )
  Bubble.updateMany = (args) => new BubbleClient(
    dmmf,
    fetcher,
    'mutation',
    'updateManyBubble',
    'bubbles.updateMany',
    args || {},
    [],
    errorFormat,
    measurePerformance
  )
  Bubble.upsert = (args) => args && args.select ? new BubbleClient(
    dmmf,
    fetcher,
    'mutation',
    'upsertOneBubble',
    'bubbles.upsert',
    args || {},
    [],
    errorFormat,
    measurePerformance
  ) : new BubbleClient(
    dmmf,
    fetcher,
    'mutation',
    'upsertOneBubble',
    'bubbles.upsert',
    args || {},
    [],
    errorFormat,
    measurePerformance
  )
  Bubble.count = () => new BubbleClient(dmmf, fetcher, 'query', 'aggregateBubble', 'bubbles.count', {}, ['count'], errorFormat)
  return Bubble
}

class BubbleClient {
  constructor(_dmmf, _fetcher, _queryType, _rootField, _clientMethod, _args, _dataPath, _errorFormat, _measurePerformance, _isList) {
    this._dmmf = _dmmf;
    this._fetcher = _fetcher;
    this._queryType = _queryType;
    this._rootField = _rootField;
    this._clientMethod = _clientMethod;
    this._args = _args;
    this._dataPath = _dataPath;
    this._errorFormat = _errorFormat;
    this._measurePerformance = _measurePerformance;
    this._isList = _isList;
    if (this._measurePerformance) {
      // Timestamps for performance checks
      this._collectTimestamps = new CollectTimestamps(\\"PrismaClient\\");
    }
    // @ts-ignore
    if (process.env.NODE_ENV !== 'production' && this._errorFormat !== 'minimal') {
      const error = new Error();
      if (error && error.stack) {
        const stack = error.stack;
        this._callsite = stack;
      }
    }
  }

  members(args) {
    const prefix = this._dataPath.includes('select') ? 'select' : this._dataPath.includes('include') ? 'include' : 'select'
    const dataPath = [...this._dataPath, prefix, 'members']
    const newArgs = deepSet(this._args, dataPath, args || true)
    this._isList = true
    return new UserClient(this._dmmf, this._fetcher, this._queryType, this._rootField, this._clientMethod, newArgs, dataPath, this._errorFormat, this._measurePerformance, this._isList)
  }

  get _document() {
    const { _rootField: rootField } = this
    this._collectTimestamps && this._collectTimestamps.record(\\"Pre-makeDocument\\")
    const document = makeDocument({
      dmmf: this._dmmf,
      rootField,
      rootTypeName: this._queryType,
      select: this._args
    })
    this._collectTimestamps && this._collectTimestamps.record(\\"Post-makeDocument\\")
    try {
      this._collectTimestamps && this._collectTimestamps.record(\\"Pre-document.validate\\")
      document.validate(this._args, false, this._clientMethod, this._errorFormat)
      this._collectTimestamps && this._collectTimestamps.record(\\"Post-document.validate\\")
    } catch (e) {
      const x = e
      if (this._errorFormat !== 'minimal' && x.render) {
        if (this._callsite) {
          e.message = x.render(this._callsite)
        }
      }
      throw e
    }
    this._collectTimestamps && this._collectTimestamps.record(\\"Pre-transformDocument\\")
    const transformedDocument = transformDocument(document)
    this._collectTimestamps && this._collectTimestamps.record(\\"Post-transformDocument\\")
    return transformedDocument
  }

  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then(onfulfilled, onrejected) {
    if (!this._requestPromise){
      this._requestPromise = this._fetcher.request({
        document: this._document,
        dataPath: this._dataPath,
        rootField: this._rootField,
        typeName: 'Bubble',
        isList: this._isList,
        callsite: this._callsite,
        collectTimestamps: this._collectTimestamps,
        clientMethod: this._clientMethod
      })
    }
    return this._requestPromise.then(onfulfilled, onrejected)
  }

  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch(onrejected) {
    if (!this._requestPromise) {
      this._requestPromise = this._fetcher.request({
        document: this._document,
        dataPath: this._dataPath,
        rootField: this._rootField,
        typeName: 'Bubble',
        isList: this._isList,
        callsite: this._callsite,
        collectTimestamps: this._collectTimestamps,
        clientMethod: this._clientMethod
      })
    }
    return this._requestPromise.catch(onrejected)
  }

  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally) {
    if (!this._requestPromise) {
      this._requestPromise = this._fetcher.request({
        document: this._document,
        dataPath: this._dataPath,
        rootField: this._rootField,
        typeName: 'Bubble',
        isList: this._isList,
        callsite: this._callsite,
        collectTimestamps: this._collectTimestamps,
        clientMethod: this._clientMethod
      })
    }
    return this._requestPromise.finally(onfinally)
  }
}

exports.BubbleClient = BubbleClient

function UserDelegate(dmmf, fetcher, errorFormat, measurePerformance) {
  const User = {} 
  User.findOne = (args) => args && args.select ? new UserClient(
    dmmf,
    fetcher,
    'query',
    'findOneUser',
    'users.findOne',
    args || {},
    [],
    errorFormat,
    measurePerformance
  ) : new UserClient(
    dmmf,
    fetcher,
    'query',
    'findOneUser',
    'users.findOne',
    args || {},
    [],
    errorFormat,
    measurePerformance
  )
  User.findMany = (args) => new UserClient(
    dmmf,
    fetcher,
    'query',
    'findManyUser',
    'users.findMany',
    args || {},
    [],
    errorFormat,
    measurePerformance
  )
  User.create = (args) => args && args.select ? new UserClient(
    dmmf,
    fetcher,
    'mutation',
    'createOneUser',
    'users.create',
    args || {},
    [],
    errorFormat,
    measurePerformance
  ) : new UserClient(
    dmmf,
    fetcher,
    'mutation',
    'createOneUser',
    'users.create',
    args || {},
    [],
    errorFormat,
    measurePerformance
  )
  User.delete = (args) => args && args.select ? new UserClient(
    dmmf,
    fetcher,
    'mutation',
    'deleteOneUser',
    'users.delete',
    args || {},
    [],
    errorFormat,
    measurePerformance
  ) : new UserClient(
    dmmf,
    fetcher,
    'mutation',
    'deleteOneUser',
    'users.delete',
    args || {},
    [],
    errorFormat,
    measurePerformance
  )
  User.update = (args) => args && args.select ? new UserClient(
    dmmf,
    fetcher,
    'mutation',
    'updateOneUser',
    'users.update',
    args || {},
    [],
    errorFormat,
    measurePerformance
  ) : new UserClient(
    dmmf,
    fetcher,
    'mutation',
    'updateOneUser',
    'users.update',
    args || {},
    [],
    errorFormat,
    measurePerformance
  )
  User.deleteMany = (args) => new UserClient(
    dmmf,
    fetcher,
    'mutation',
    'deleteManyUser',
    'users.deleteMany',
    args || {},
    [],
    errorFormat,
    measurePerformance
  )
  User.updateMany = (args) => new UserClient(
    dmmf,
    fetcher,
    'mutation',
    'updateManyUser',
    'users.updateMany',
    args || {},
    [],
    errorFormat,
    measurePerformance
  )
  User.upsert = (args) => args && args.select ? new UserClient(
    dmmf,
    fetcher,
    'mutation',
    'upsertOneUser',
    'users.upsert',
    args || {},
    [],
    errorFormat,
    measurePerformance
  ) : new UserClient(
    dmmf,
    fetcher,
    'mutation',
    'upsertOneUser',
    'users.upsert',
    args || {},
    [],
    errorFormat,
    measurePerformance
  )
  User.count = () => new UserClient(dmmf, fetcher, 'query', 'aggregateUser', 'users.count', {}, ['count'], errorFormat)
  return User
}

class UserClient {
  constructor(_dmmf, _fetcher, _queryType, _rootField, _clientMethod, _args, _dataPath, _errorFormat, _measurePerformance, _isList) {
    this._dmmf = _dmmf;
    this._fetcher = _fetcher;
    this._queryType = _queryType;
    this._rootField = _rootField;
    this._clientMethod = _clientMethod;
    this._args = _args;
    this._dataPath = _dataPath;
    this._errorFormat = _errorFormat;
    this._measurePerformance = _measurePerformance;
    this._isList = _isList;
    if (this._measurePerformance) {
      // Timestamps for performance checks
      this._collectTimestamps = new CollectTimestamps(\\"PrismaClient\\");
    }
    // @ts-ignore
    if (process.env.NODE_ENV !== 'production' && this._errorFormat !== 'minimal') {
      const error = new Error();
      if (error && error.stack) {
        const stack = error.stack;
        this._callsite = stack;
      }
    }
  }

  posts(args) {
    const prefix = this._dataPath.includes('select') ? 'select' : this._dataPath.includes('include') ? 'include' : 'select'
    const dataPath = [...this._dataPath, prefix, 'posts']
    const newArgs = deepSet(this._args, dataPath, args || true)
    this._isList = true
    return new PostClient(this._dmmf, this._fetcher, this._queryType, this._rootField, this._clientMethod, newArgs, dataPath, this._errorFormat, this._measurePerformance, this._isList)
  }

  bubble(args) {
    const prefix = this._dataPath.includes('select') ? 'select' : this._dataPath.includes('include') ? 'include' : 'select'
    const dataPath = [...this._dataPath, prefix, 'bubble']
    const newArgs = deepSet(this._args, dataPath, args || true)
    this._isList = false
    return new BubbleClient(this._dmmf, this._fetcher, this._queryType, this._rootField, this._clientMethod, newArgs, dataPath, this._errorFormat, this._measurePerformance, this._isList)
  }

  get _document() {
    const { _rootField: rootField } = this
    this._collectTimestamps && this._collectTimestamps.record(\\"Pre-makeDocument\\")
    const document = makeDocument({
      dmmf: this._dmmf,
      rootField,
      rootTypeName: this._queryType,
      select: this._args
    })
    this._collectTimestamps && this._collectTimestamps.record(\\"Post-makeDocument\\")
    try {
      this._collectTimestamps && this._collectTimestamps.record(\\"Pre-document.validate\\")
      document.validate(this._args, false, this._clientMethod, this._errorFormat)
      this._collectTimestamps && this._collectTimestamps.record(\\"Post-document.validate\\")
    } catch (e) {
      const x = e
      if (this._errorFormat !== 'minimal' && x.render) {
        if (this._callsite) {
          e.message = x.render(this._callsite)
        }
      }
      throw e
    }
    this._collectTimestamps && this._collectTimestamps.record(\\"Pre-transformDocument\\")
    const transformedDocument = transformDocument(document)
    this._collectTimestamps && this._collectTimestamps.record(\\"Post-transformDocument\\")
    return transformedDocument
  }

  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then(onfulfilled, onrejected) {
    if (!this._requestPromise){
      this._requestPromise = this._fetcher.request({
        document: this._document,
        dataPath: this._dataPath,
        rootField: this._rootField,
        typeName: 'User',
        isList: this._isList,
        callsite: this._callsite,
        collectTimestamps: this._collectTimestamps,
        clientMethod: this._clientMethod
      })
    }
    return this._requestPromise.then(onfulfilled, onrejected)
  }

  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch(onrejected) {
    if (!this._requestPromise) {
      this._requestPromise = this._fetcher.request({
        document: this._document,
        dataPath: this._dataPath,
        rootField: this._rootField,
        typeName: 'User',
        isList: this._isList,
        callsite: this._callsite,
        collectTimestamps: this._collectTimestamps,
        clientMethod: this._clientMethod
      })
    }
    return this._requestPromise.catch(onrejected)
  }

  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally) {
    if (!this._requestPromise) {
      this._requestPromise = this._fetcher.request({
        document: this._document,
        dataPath: this._dataPath,
        rootField: this._rootField,
        typeName: 'User',
        isList: this._isList,
        callsite: this._callsite,
        collectTimestamps: this._collectTimestamps,
        clientMethod: this._clientMethod
      })
    }
    return this._requestPromise.finally(onfinally)
  }
}

exports.UserClient = UserClient

function PostDelegate(dmmf, fetcher, errorFormat, measurePerformance) {
  const Post = {} 
  Post.findOne = (args) => args && args.select ? new PostClient(
    dmmf,
    fetcher,
    'query',
    'findOnePost',
    'posts.findOne',
    args || {},
    [],
    errorFormat,
    measurePerformance
  ) : new PostClient(
    dmmf,
    fetcher,
    'query',
    'findOnePost',
    'posts.findOne',
    args || {},
    [],
    errorFormat,
    measurePerformance
  )
  Post.findMany = (args) => new PostClient(
    dmmf,
    fetcher,
    'query',
    'findManyPost',
    'posts.findMany',
    args || {},
    [],
    errorFormat,
    measurePerformance
  )
  Post.create = (args) => args && args.select ? new PostClient(
    dmmf,
    fetcher,
    'mutation',
    'createOnePost',
    'posts.create',
    args || {},
    [],
    errorFormat,
    measurePerformance
  ) : new PostClient(
    dmmf,
    fetcher,
    'mutation',
    'createOnePost',
    'posts.create',
    args || {},
    [],
    errorFormat,
    measurePerformance
  )
  Post.delete = (args) => args && args.select ? new PostClient(
    dmmf,
    fetcher,
    'mutation',
    'deleteOnePost',
    'posts.delete',
    args || {},
    [],
    errorFormat,
    measurePerformance
  ) : new PostClient(
    dmmf,
    fetcher,
    'mutation',
    'deleteOnePost',
    'posts.delete',
    args || {},
    [],
    errorFormat,
    measurePerformance
  )
  Post.update = (args) => args && args.select ? new PostClient(
    dmmf,
    fetcher,
    'mutation',
    'updateOnePost',
    'posts.update',
    args || {},
    [],
    errorFormat,
    measurePerformance
  ) : new PostClient(
    dmmf,
    fetcher,
    'mutation',
    'updateOnePost',
    'posts.update',
    args || {},
    [],
    errorFormat,
    measurePerformance
  )
  Post.deleteMany = (args) => new PostClient(
    dmmf,
    fetcher,
    'mutation',
    'deleteManyPost',
    'posts.deleteMany',
    args || {},
    [],
    errorFormat,
    measurePerformance
  )
  Post.updateMany = (args) => new PostClient(
    dmmf,
    fetcher,
    'mutation',
    'updateManyPost',
    'posts.updateMany',
    args || {},
    [],
    errorFormat,
    measurePerformance
  )
  Post.upsert = (args) => args && args.select ? new PostClient(
    dmmf,
    fetcher,
    'mutation',
    'upsertOnePost',
    'posts.upsert',
    args || {},
    [],
    errorFormat,
    measurePerformance
  ) : new PostClient(
    dmmf,
    fetcher,
    'mutation',
    'upsertOnePost',
    'posts.upsert',
    args || {},
    [],
    errorFormat,
    measurePerformance
  )
  Post.count = () => new PostClient(dmmf, fetcher, 'query', 'aggregatePost', 'posts.count', {}, ['count'], errorFormat)
  return Post
}

class PostClient {
  constructor(_dmmf, _fetcher, _queryType, _rootField, _clientMethod, _args, _dataPath, _errorFormat, _measurePerformance, _isList) {
    this._dmmf = _dmmf;
    this._fetcher = _fetcher;
    this._queryType = _queryType;
    this._rootField = _rootField;
    this._clientMethod = _clientMethod;
    this._args = _args;
    this._dataPath = _dataPath;
    this._errorFormat = _errorFormat;
    this._measurePerformance = _measurePerformance;
    this._isList = _isList;
    if (this._measurePerformance) {
      // Timestamps for performance checks
      this._collectTimestamps = new CollectTimestamps(\\"PrismaClient\\");
    }
    // @ts-ignore
    if (process.env.NODE_ENV !== 'production' && this._errorFormat !== 'minimal') {
      const error = new Error();
      if (error && error.stack) {
        const stack = error.stack;
        this._callsite = stack;
      }
    }
  }

  authors(args) {
    const prefix = this._dataPath.includes('select') ? 'select' : this._dataPath.includes('include') ? 'include' : 'select'
    const dataPath = [...this._dataPath, prefix, 'authors']
    const newArgs = deepSet(this._args, dataPath, args || true)
    this._isList = true
    return new UserClient(this._dmmf, this._fetcher, this._queryType, this._rootField, this._clientMethod, newArgs, dataPath, this._errorFormat, this._measurePerformance, this._isList)
  }

  get _document() {
    const { _rootField: rootField } = this
    this._collectTimestamps && this._collectTimestamps.record(\\"Pre-makeDocument\\")
    const document = makeDocument({
      dmmf: this._dmmf,
      rootField,
      rootTypeName: this._queryType,
      select: this._args
    })
    this._collectTimestamps && this._collectTimestamps.record(\\"Post-makeDocument\\")
    try {
      this._collectTimestamps && this._collectTimestamps.record(\\"Pre-document.validate\\")
      document.validate(this._args, false, this._clientMethod, this._errorFormat)
      this._collectTimestamps && this._collectTimestamps.record(\\"Post-document.validate\\")
    } catch (e) {
      const x = e
      if (this._errorFormat !== 'minimal' && x.render) {
        if (this._callsite) {
          e.message = x.render(this._callsite)
        }
      }
      throw e
    }
    this._collectTimestamps && this._collectTimestamps.record(\\"Pre-transformDocument\\")
    const transformedDocument = transformDocument(document)
    this._collectTimestamps && this._collectTimestamps.record(\\"Post-transformDocument\\")
    return transformedDocument
  }

  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then(onfulfilled, onrejected) {
    if (!this._requestPromise){
      this._requestPromise = this._fetcher.request({
        document: this._document,
        dataPath: this._dataPath,
        rootField: this._rootField,
        typeName: 'Post',
        isList: this._isList,
        callsite: this._callsite,
        collectTimestamps: this._collectTimestamps,
        clientMethod: this._clientMethod
      })
    }
    return this._requestPromise.then(onfulfilled, onrejected)
  }

  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch(onrejected) {
    if (!this._requestPromise) {
      this._requestPromise = this._fetcher.request({
        document: this._document,
        dataPath: this._dataPath,
        rootField: this._rootField,
        typeName: 'Post',
        isList: this._isList,
        callsite: this._callsite,
        collectTimestamps: this._collectTimestamps,
        clientMethod: this._clientMethod
      })
    }
    return this._requestPromise.catch(onrejected)
  }

  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally) {
    if (!this._requestPromise) {
      this._requestPromise = this._fetcher.request({
        document: this._document,
        dataPath: this._dataPath,
        rootField: this._rootField,
        typeName: 'Post',
        isList: this._isList,
        callsite: this._callsite,
        collectTimestamps: this._collectTimestamps,
        clientMethod: this._clientMethod
      })
    }
    return this._requestPromise.finally(onfinally)
  }
}

exports.PostClient = PostClient


/**
 * DMMF
 */
const dmmfString = '{\\"datamodel\\":{\\"enums\\":[{\\"name\\":\\"PostStatus\\",\\"values\\":[\\"DRAFT\\",\\"PUBLISHED\\"],\\"dbName\\":null}],\\"models\\":[{\\"name\\":\\"Bubble\\",\\"isEmbedded\\":false,\\"dbName\\":null,\\"fields\\":[{\\"name\\":\\"id\\",\\"kind\\":\\"scalar\\",\\"dbNames\\":[],\\"isList\\":false,\\"isRequired\\":true,\\"isUnique\\":false,\\"isId\\":true,\\"type\\":\\"String\\",\\"default\\":{\\"name\\":\\"uuid\\",\\"returnType\\":\\"String\\",\\"args\\":[]},\\"isGenerated\\":false,\\"isUpdatedAt\\":false},{\\"name\\":\\"createdAt\\",\\"kind\\":\\"scalar\\",\\"dbNames\\":[],\\"isList\\":false,\\"isRequired\\":true,\\"isUnique\\":false,\\"isId\\":false,\\"type\\":\\"DateTime\\",\\"default\\":{\\"name\\":\\"now\\",\\"returnType\\":\\"DateTime\\",\\"args\\":[]},\\"isGenerated\\":false,\\"isUpdatedAt\\":false},{\\"name\\":\\"members\\",\\"kind\\":\\"object\\",\\"dbNames\\":[],\\"isList\\":true,\\"isRequired\\":false,\\"isUnique\\":false,\\"isId\\":false,\\"type\\":\\"User\\",\\"relationName\\":\\"BubbleToUser\\",\\"relationToFields\\":[],\\"relationOnDelete\\":\\"NONE\\",\\"isGenerated\\":false,\\"isUpdatedAt\\":false}],\\"isGenerated\\":false,\\"idFields\\":[],\\"uniqueFields\\":[]},{\\"name\\":\\"User\\",\\"isEmbedded\\":false,\\"dbName\\":null,\\"fields\\":[{\\"name\\":\\"id\\",\\"kind\\":\\"scalar\\",\\"dbNames\\":[],\\"isList\\":false,\\"isRequired\\":true,\\"isUnique\\":false,\\"isId\\":true,\\"type\\":\\"String\\",\\"default\\":{\\"name\\":\\"cuid\\",\\"returnType\\":\\"String\\",\\"args\\":[]},\\"isGenerated\\":false,\\"isUpdatedAt\\":false},{\\"name\\":\\"posts\\",\\"kind\\":\\"object\\",\\"dbNames\\":[],\\"isList\\":true,\\"isRequired\\":false,\\"isUnique\\":false,\\"isId\\":false,\\"type\\":\\"Post\\",\\"relationName\\":\\"PostToUser\\",\\"relationToFields\\":[\\"id\\"],\\"relationOnDelete\\":\\"NONE\\",\\"isGenerated\\":false,\\"isUpdatedAt\\":false},{\\"name\\":\\"firstName\\",\\"kind\\":\\"scalar\\",\\"dbNames\\":[],\\"isList\\":false,\\"isRequired\\":true,\\"isUnique\\":false,\\"isId\\":false,\\"type\\":\\"String\\",\\"isGenerated\\":false,\\"isUpdatedAt\\":false},{\\"name\\":\\"lastName\\",\\"kind\\":\\"scalar\\",\\"dbNames\\":[],\\"isList\\":false,\\"isRequired\\":true,\\"isUnique\\":false,\\"isId\\":false,\\"type\\":\\"String\\",\\"isGenerated\\":false,\\"isUpdatedAt\\":false},{\\"name\\":\\"bubble\\",\\"kind\\":\\"object\\",\\"dbNames\\":[],\\"isList\\":false,\\"isRequired\\":false,\\"isUnique\\":false,\\"isId\\":false,\\"type\\":\\"Bubble\\",\\"relationName\\":\\"BubbleToUser\\",\\"relationToFields\\":[\\"id\\"],\\"relationOnDelete\\":\\"NONE\\",\\"isGenerated\\":true,\\"isUpdatedAt\\":false}],\\"isGenerated\\":false,\\"idFields\\":[],\\"uniqueFields\\":[]},{\\"name\\":\\"Post\\",\\"isEmbedded\\":false,\\"dbName\\":null,\\"fields\\":[{\\"name\\":\\"id\\",\\"kind\\":\\"scalar\\",\\"dbNames\\":[],\\"isList\\":false,\\"isRequired\\":true,\\"isUnique\\":false,\\"isId\\":true,\\"type\\":\\"Int\\",\\"default\\":{\\"name\\":\\"autoincrement\\",\\"returnType\\":\\"Int\\",\\"args\\":[]},\\"isGenerated\\":false,\\"isUpdatedAt\\":false},{\\"name\\":\\"authors\\",\\"kind\\":\\"object\\",\\"dbNames\\":[],\\"isList\\":true,\\"isRequired\\":false,\\"isUnique\\":false,\\"isId\\":false,\\"type\\":\\"User\\",\\"relationName\\":\\"PostToUser\\",\\"relationToFields\\":[\\"id\\"],\\"relationOnDelete\\":\\"NONE\\",\\"isGenerated\\":false,\\"isUpdatedAt\\":false},{\\"name\\":\\"rating\\",\\"kind\\":\\"scalar\\",\\"dbNames\\":[],\\"isList\\":false,\\"isRequired\\":true,\\"isUnique\\":false,\\"isId\\":false,\\"type\\":\\"Float\\",\\"isGenerated\\":false,\\"isUpdatedAt\\":false},{\\"name\\":\\"status\\",\\"kind\\":\\"enum\\",\\"dbNames\\":[],\\"isList\\":false,\\"isRequired\\":true,\\"isUnique\\":false,\\"isId\\":false,\\"type\\":\\"PostStatus\\",\\"isGenerated\\":false,\\"isUpdatedAt\\":false}],\\"isGenerated\\":false,\\"idFields\\":[],\\"uniqueFields\\":[]}]},\\"mappings\\":[{\\"model\\":\\"Bubble\\",\\"plural\\":\\"bubbles\\",\\"findOne\\":\\"findOneBubble\\",\\"findMany\\":\\"findManyBubble\\",\\"create\\":\\"createOneBubble\\",\\"delete\\":\\"deleteOneBubble\\",\\"update\\":\\"updateOneBubble\\",\\"deleteMany\\":\\"deleteManyBubble\\",\\"updateMany\\":\\"updateManyBubble\\",\\"upsert\\":\\"upsertOneBubble\\",\\"aggregate\\":\\"aggregateBubble\\"},{\\"model\\":\\"User\\",\\"plural\\":\\"users\\",\\"findOne\\":\\"findOneUser\\",\\"findMany\\":\\"findManyUser\\",\\"create\\":\\"createOneUser\\",\\"delete\\":\\"deleteOneUser\\",\\"update\\":\\"updateOneUser\\",\\"deleteMany\\":\\"deleteManyUser\\",\\"updateMany\\":\\"updateManyUser\\",\\"upsert\\":\\"upsertOneUser\\",\\"aggregate\\":\\"aggregateUser\\"},{\\"model\\":\\"Post\\",\\"plural\\":\\"posts\\",\\"findOne\\":\\"findOnePost\\",\\"findMany\\":\\"findManyPost\\",\\"create\\":\\"createOnePost\\",\\"delete\\":\\"deleteOnePost\\",\\"update\\":\\"updateOnePost\\",\\"deleteMany\\":\\"deleteManyPost\\",\\"updateMany\\":\\"updateManyPost\\",\\"upsert\\":\\"upsertOnePost\\",\\"aggregate\\":\\"aggregatePost\\"}],\\"schema\\":{\\"enums\\":[{\\"name\\":\\"OrderByArg\\",\\"values\\":[\\"asc\\",\\"desc\\"]},{\\"name\\":\\"PostStatus\\",\\"values\\":[\\"DRAFT\\",\\"PUBLISHED\\"]}],\\"outputTypes\\":[{\\"name\\":\\"Post\\",\\"fields\\":[{\\"name\\":\\"id\\",\\"args\\":[],\\"outputType\\":{\\"type\\":\\"Int\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":true,\\"isList\\":false}},{\\"name\\":\\"authors\\",\\"args\\":[{\\"name\\":\\"where\\",\\"inputType\\":[{\\"type\\":\\"UserWhereInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"orderBy\\",\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"type\\":\\"UserOrderByInput\\",\\"kind\\":\\"object\\"}]},{\\"name\\":\\"skip\\",\\"inputType\\":[{\\"type\\":\\"Int\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"after\\",\\"inputType\\":[{\\"type\\":\\"UserWhereUniqueInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"before\\",\\"inputType\\":[{\\"type\\":\\"UserWhereUniqueInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"first\\",\\"inputType\\":[{\\"type\\":\\"Int\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"last\\",\\"inputType\\":[{\\"type\\":\\"Int\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]}],\\"outputType\\":{\\"type\\":\\"User\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":true}},{\\"name\\":\\"rating\\",\\"args\\":[],\\"outputType\\":{\\"type\\":\\"Float\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":true,\\"isList\\":false}},{\\"name\\":\\"status\\",\\"args\\":[],\\"outputType\\":{\\"type\\":\\"PostStatus\\",\\"kind\\":\\"enum\\",\\"isRequired\\":true,\\"isList\\":false}}]},{\\"name\\":\\"User\\",\\"fields\\":[{\\"name\\":\\"id\\",\\"args\\":[],\\"outputType\\":{\\"type\\":\\"String\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":true,\\"isList\\":false}},{\\"name\\":\\"posts\\",\\"args\\":[{\\"name\\":\\"where\\",\\"inputType\\":[{\\"type\\":\\"PostWhereInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"orderBy\\",\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"type\\":\\"PostOrderByInput\\",\\"kind\\":\\"object\\"}]},{\\"name\\":\\"skip\\",\\"inputType\\":[{\\"type\\":\\"Int\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"after\\",\\"inputType\\":[{\\"type\\":\\"PostWhereUniqueInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"before\\",\\"inputType\\":[{\\"type\\":\\"PostWhereUniqueInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"first\\",\\"inputType\\":[{\\"type\\":\\"Int\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"last\\",\\"inputType\\":[{\\"type\\":\\"Int\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]}],\\"outputType\\":{\\"type\\":\\"Post\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":true}},{\\"name\\":\\"firstName\\",\\"args\\":[],\\"outputType\\":{\\"type\\":\\"String\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":true,\\"isList\\":false}},{\\"name\\":\\"lastName\\",\\"args\\":[],\\"outputType\\":{\\"type\\":\\"String\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":true,\\"isList\\":false}},{\\"name\\":\\"bubble\\",\\"args\\":[],\\"outputType\\":{\\"type\\":\\"Bubble\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}}]},{\\"name\\":\\"Bubble\\",\\"fields\\":[{\\"name\\":\\"id\\",\\"args\\":[],\\"outputType\\":{\\"type\\":\\"String\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":true,\\"isList\\":false}},{\\"name\\":\\"createdAt\\",\\"args\\":[],\\"outputType\\":{\\"type\\":\\"DateTime\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":true,\\"isList\\":false}},{\\"name\\":\\"members\\",\\"args\\":[{\\"name\\":\\"where\\",\\"inputType\\":[{\\"type\\":\\"UserWhereInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"orderBy\\",\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"type\\":\\"UserOrderByInput\\",\\"kind\\":\\"object\\"}]},{\\"name\\":\\"skip\\",\\"inputType\\":[{\\"type\\":\\"Int\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"after\\",\\"inputType\\":[{\\"type\\":\\"UserWhereUniqueInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"before\\",\\"inputType\\":[{\\"type\\":\\"UserWhereUniqueInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"first\\",\\"inputType\\":[{\\"type\\":\\"Int\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"last\\",\\"inputType\\":[{\\"type\\":\\"Int\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]}],\\"outputType\\":{\\"type\\":\\"User\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":true}}]},{\\"name\\":\\"AggregateBubble\\",\\"fields\\":[{\\"name\\":\\"count\\",\\"args\\":[],\\"outputType\\":{\\"type\\":\\"Int\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":true,\\"isList\\":false}}]},{\\"name\\":\\"AggregateUser\\",\\"fields\\":[{\\"name\\":\\"count\\",\\"args\\":[],\\"outputType\\":{\\"type\\":\\"Int\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":true,\\"isList\\":false}}]},{\\"name\\":\\"AggregatePost\\",\\"fields\\":[{\\"name\\":\\"count\\",\\"args\\":[],\\"outputType\\":{\\"type\\":\\"Int\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":true,\\"isList\\":false}}]},{\\"name\\":\\"Query\\",\\"fields\\":[{\\"name\\":\\"findManyBubble\\",\\"args\\":[{\\"name\\":\\"where\\",\\"inputType\\":[{\\"type\\":\\"BubbleWhereInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"orderBy\\",\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"type\\":\\"BubbleOrderByInput\\",\\"kind\\":\\"object\\"}]},{\\"name\\":\\"skip\\",\\"inputType\\":[{\\"type\\":\\"Int\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"after\\",\\"inputType\\":[{\\"type\\":\\"BubbleWhereUniqueInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"before\\",\\"inputType\\":[{\\"type\\":\\"BubbleWhereUniqueInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"first\\",\\"inputType\\":[{\\"type\\":\\"Int\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"last\\",\\"inputType\\":[{\\"type\\":\\"Int\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]}],\\"outputType\\":{\\"type\\":\\"Bubble\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":true}},{\\"name\\":\\"aggregateBubble\\",\\"args\\":[],\\"outputType\\":{\\"type\\":\\"AggregateBubble\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}},{\\"name\\":\\"findOneBubble\\",\\"args\\":[{\\"name\\":\\"where\\",\\"inputType\\":[{\\"type\\":\\"BubbleWhereUniqueInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}]}],\\"outputType\\":{\\"type\\":\\"Bubble\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}},{\\"name\\":\\"findManyUser\\",\\"args\\":[{\\"name\\":\\"where\\",\\"inputType\\":[{\\"type\\":\\"UserWhereInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"orderBy\\",\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"type\\":\\"UserOrderByInput\\",\\"kind\\":\\"object\\"}]},{\\"name\\":\\"skip\\",\\"inputType\\":[{\\"type\\":\\"Int\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"after\\",\\"inputType\\":[{\\"type\\":\\"UserWhereUniqueInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"before\\",\\"inputType\\":[{\\"type\\":\\"UserWhereUniqueInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"first\\",\\"inputType\\":[{\\"type\\":\\"Int\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"last\\",\\"inputType\\":[{\\"type\\":\\"Int\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]}],\\"outputType\\":{\\"type\\":\\"User\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":true}},{\\"name\\":\\"aggregateUser\\",\\"args\\":[],\\"outputType\\":{\\"type\\":\\"AggregateUser\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}},{\\"name\\":\\"findOneUser\\",\\"args\\":[{\\"name\\":\\"where\\",\\"inputType\\":[{\\"type\\":\\"UserWhereUniqueInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}]}],\\"outputType\\":{\\"type\\":\\"User\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}},{\\"name\\":\\"findManyPost\\",\\"args\\":[{\\"name\\":\\"where\\",\\"inputType\\":[{\\"type\\":\\"PostWhereInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"orderBy\\",\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"type\\":\\"PostOrderByInput\\",\\"kind\\":\\"object\\"}]},{\\"name\\":\\"skip\\",\\"inputType\\":[{\\"type\\":\\"Int\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"after\\",\\"inputType\\":[{\\"type\\":\\"PostWhereUniqueInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"before\\",\\"inputType\\":[{\\"type\\":\\"PostWhereUniqueInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"first\\",\\"inputType\\":[{\\"type\\":\\"Int\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"last\\",\\"inputType\\":[{\\"type\\":\\"Int\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]}],\\"outputType\\":{\\"type\\":\\"Post\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":true}},{\\"name\\":\\"aggregatePost\\",\\"args\\":[],\\"outputType\\":{\\"type\\":\\"AggregatePost\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}},{\\"name\\":\\"findOnePost\\",\\"args\\":[{\\"name\\":\\"where\\",\\"inputType\\":[{\\"type\\":\\"PostWhereUniqueInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}]}],\\"outputType\\":{\\"type\\":\\"Post\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}}]},{\\"name\\":\\"BatchPayload\\",\\"fields\\":[{\\"name\\":\\"count\\",\\"args\\":[],\\"outputType\\":{\\"type\\":\\"Int\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":true,\\"isList\\":false}}]},{\\"name\\":\\"Mutation\\",\\"fields\\":[{\\"name\\":\\"createOneBubble\\",\\"args\\":[{\\"name\\":\\"data\\",\\"inputType\\":[{\\"type\\":\\"BubbleCreateInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}]}],\\"outputType\\":{\\"type\\":\\"Bubble\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}},{\\"name\\":\\"deleteOneBubble\\",\\"args\\":[{\\"name\\":\\"where\\",\\"inputType\\":[{\\"type\\":\\"BubbleWhereUniqueInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}]}],\\"outputType\\":{\\"type\\":\\"Bubble\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}},{\\"name\\":\\"updateOneBubble\\",\\"args\\":[{\\"name\\":\\"data\\",\\"inputType\\":[{\\"type\\":\\"BubbleUpdateInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}]},{\\"name\\":\\"where\\",\\"inputType\\":[{\\"type\\":\\"BubbleWhereUniqueInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}]}],\\"outputType\\":{\\"type\\":\\"Bubble\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}},{\\"name\\":\\"upsertOneBubble\\",\\"args\\":[{\\"name\\":\\"where\\",\\"inputType\\":[{\\"type\\":\\"BubbleWhereUniqueInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}]},{\\"name\\":\\"create\\",\\"inputType\\":[{\\"type\\":\\"BubbleCreateInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}]},{\\"name\\":\\"update\\",\\"inputType\\":[{\\"type\\":\\"BubbleUpdateInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}]}],\\"outputType\\":{\\"type\\":\\"Bubble\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}},{\\"name\\":\\"updateManyBubble\\",\\"args\\":[{\\"name\\":\\"data\\",\\"inputType\\":[{\\"type\\":\\"BubbleUpdateManyMutationInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}]},{\\"name\\":\\"where\\",\\"inputType\\":[{\\"type\\":\\"BubbleWhereInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}]}],\\"outputType\\":{\\"type\\":\\"BatchPayload\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}},{\\"name\\":\\"deleteManyBubble\\",\\"args\\":[{\\"name\\":\\"where\\",\\"inputType\\":[{\\"type\\":\\"BubbleWhereInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}]}],\\"outputType\\":{\\"type\\":\\"BatchPayload\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}},{\\"name\\":\\"createOneUser\\",\\"args\\":[{\\"name\\":\\"data\\",\\"inputType\\":[{\\"type\\":\\"UserCreateInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}]}],\\"outputType\\":{\\"type\\":\\"User\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}},{\\"name\\":\\"deleteOneUser\\",\\"args\\":[{\\"name\\":\\"where\\",\\"inputType\\":[{\\"type\\":\\"UserWhereUniqueInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}]}],\\"outputType\\":{\\"type\\":\\"User\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}},{\\"name\\":\\"updateOneUser\\",\\"args\\":[{\\"name\\":\\"data\\",\\"inputType\\":[{\\"type\\":\\"UserUpdateInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}]},{\\"name\\":\\"where\\",\\"inputType\\":[{\\"type\\":\\"UserWhereUniqueInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}]}],\\"outputType\\":{\\"type\\":\\"User\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}},{\\"name\\":\\"upsertOneUser\\",\\"args\\":[{\\"name\\":\\"where\\",\\"inputType\\":[{\\"type\\":\\"UserWhereUniqueInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}]},{\\"name\\":\\"create\\",\\"inputType\\":[{\\"type\\":\\"UserCreateInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}]},{\\"name\\":\\"update\\",\\"inputType\\":[{\\"type\\":\\"UserUpdateInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}]}],\\"outputType\\":{\\"type\\":\\"User\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}},{\\"name\\":\\"updateManyUser\\",\\"args\\":[{\\"name\\":\\"data\\",\\"inputType\\":[{\\"type\\":\\"UserUpdateManyMutationInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}]},{\\"name\\":\\"where\\",\\"inputType\\":[{\\"type\\":\\"UserWhereInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}]}],\\"outputType\\":{\\"type\\":\\"BatchPayload\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}},{\\"name\\":\\"deleteManyUser\\",\\"args\\":[{\\"name\\":\\"where\\",\\"inputType\\":[{\\"type\\":\\"UserWhereInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}]}],\\"outputType\\":{\\"type\\":\\"BatchPayload\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}},{\\"name\\":\\"createOnePost\\",\\"args\\":[{\\"name\\":\\"data\\",\\"inputType\\":[{\\"type\\":\\"PostCreateInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}]}],\\"outputType\\":{\\"type\\":\\"Post\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}},{\\"name\\":\\"deleteOnePost\\",\\"args\\":[{\\"name\\":\\"where\\",\\"inputType\\":[{\\"type\\":\\"PostWhereUniqueInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}]}],\\"outputType\\":{\\"type\\":\\"Post\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}},{\\"name\\":\\"updateOnePost\\",\\"args\\":[{\\"name\\":\\"data\\",\\"inputType\\":[{\\"type\\":\\"PostUpdateInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}]},{\\"name\\":\\"where\\",\\"inputType\\":[{\\"type\\":\\"PostWhereUniqueInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}]}],\\"outputType\\":{\\"type\\":\\"Post\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}},{\\"name\\":\\"upsertOnePost\\",\\"args\\":[{\\"name\\":\\"where\\",\\"inputType\\":[{\\"type\\":\\"PostWhereUniqueInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}]},{\\"name\\":\\"create\\",\\"inputType\\":[{\\"type\\":\\"PostCreateInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}]},{\\"name\\":\\"update\\",\\"inputType\\":[{\\"type\\":\\"PostUpdateInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}]}],\\"outputType\\":{\\"type\\":\\"Post\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}},{\\"name\\":\\"updateManyPost\\",\\"args\\":[{\\"name\\":\\"data\\",\\"inputType\\":[{\\"type\\":\\"PostUpdateManyMutationInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}]},{\\"name\\":\\"where\\",\\"inputType\\":[{\\"type\\":\\"PostWhereInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}]}],\\"outputType\\":{\\"type\\":\\"BatchPayload\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}},{\\"name\\":\\"deleteManyPost\\",\\"args\\":[{\\"name\\":\\"where\\",\\"inputType\\":[{\\"type\\":\\"PostWhereInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}]}],\\"outputType\\":{\\"type\\":\\"BatchPayload\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}},{\\"name\\":\\"executeRaw\\",\\"args\\":[{\\"name\\":\\"query\\",\\"inputType\\":[{\\"type\\":\\"String\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":true,\\"isList\\":false}]},{\\"name\\":\\"parameters\\",\\"inputType\\":[{\\"type\\":\\"Json\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]}],\\"outputType\\":{\\"type\\":\\"Json\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":true,\\"isList\\":false}}]}],\\"inputTypes\\":[{\\"name\\":\\"PostWhereInput\\",\\"fields\\":[{\\"name\\":\\"id\\",\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"Int\\"},{\\"type\\":\\"IntFilter\\",\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"object\\"}],\\"isRelationFilter\\":false},{\\"name\\":\\"authors\\",\\"inputType\\":[{\\"type\\":\\"UserFilter\\",\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"object\\"}],\\"isRelationFilter\\":false,\\"nullEqualsUndefined\\":true},{\\"name\\":\\"rating\\",\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"Float\\"},{\\"type\\":\\"FloatFilter\\",\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"object\\"}],\\"isRelationFilter\\":false},{\\"name\\":\\"status\\",\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"enum\\",\\"type\\":\\"PostStatus\\"},{\\"type\\":\\"PostStatusFilter\\",\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"object\\"}],\\"isRelationFilter\\":false},{\\"name\\":\\"AND\\",\\"inputType\\":[{\\"type\\":\\"PostWhereInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":true}],\\"isRelationFilter\\":true},{\\"name\\":\\"OR\\",\\"inputType\\":[{\\"type\\":\\"PostWhereInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":true}],\\"isRelationFilter\\":true},{\\"name\\":\\"NOT\\",\\"inputType\\":[{\\"type\\":\\"PostWhereInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":true}],\\"isRelationFilter\\":true}],\\"isWhereType\\":true,\\"atLeastOne\\":false},{\\"name\\":\\"UserWhereInput\\",\\"fields\\":[{\\"name\\":\\"id\\",\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"String\\"},{\\"type\\":\\"StringFilter\\",\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"object\\"}],\\"isRelationFilter\\":false},{\\"name\\":\\"posts\\",\\"inputType\\":[{\\"type\\":\\"PostFilter\\",\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"object\\"}],\\"isRelationFilter\\":false,\\"nullEqualsUndefined\\":true},{\\"name\\":\\"firstName\\",\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"String\\"},{\\"type\\":\\"StringFilter\\",\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"object\\"}],\\"isRelationFilter\\":false},{\\"name\\":\\"lastName\\",\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"String\\"},{\\"type\\":\\"StringFilter\\",\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"object\\"}],\\"isRelationFilter\\":false},{\\"name\\":\\"AND\\",\\"inputType\\":[{\\"type\\":\\"UserWhereInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":true}],\\"isRelationFilter\\":true},{\\"name\\":\\"OR\\",\\"inputType\\":[{\\"type\\":\\"UserWhereInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":true}],\\"isRelationFilter\\":true},{\\"name\\":\\"NOT\\",\\"inputType\\":[{\\"type\\":\\"UserWhereInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":true}],\\"isRelationFilter\\":true},{\\"name\\":\\"bubble\\",\\"inputType\\":[{\\"type\\":\\"BubbleWhereInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}],\\"isRelationFilter\\":true}],\\"isWhereType\\":true,\\"atLeastOne\\":false},{\\"name\\":\\"BubbleWhereInput\\",\\"fields\\":[{\\"name\\":\\"id\\",\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"UUID\\"},{\\"type\\":\\"UUIDFilter\\",\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"object\\"}],\\"isRelationFilter\\":false},{\\"name\\":\\"createdAt\\",\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"DateTime\\"},{\\"type\\":\\"DateTimeFilter\\",\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"object\\"}],\\"isRelationFilter\\":false},{\\"name\\":\\"members\\",\\"inputType\\":[{\\"type\\":\\"UserFilter\\",\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"object\\"}],\\"isRelationFilter\\":false,\\"nullEqualsUndefined\\":true},{\\"name\\":\\"AND\\",\\"inputType\\":[{\\"type\\":\\"BubbleWhereInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":true}],\\"isRelationFilter\\":true},{\\"name\\":\\"OR\\",\\"inputType\\":[{\\"type\\":\\"BubbleWhereInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":true}],\\"isRelationFilter\\":true},{\\"name\\":\\"NOT\\",\\"inputType\\":[{\\"type\\":\\"BubbleWhereInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":true}],\\"isRelationFilter\\":true}],\\"isWhereType\\":true,\\"atLeastOne\\":false},{\\"name\\":\\"IdCompoundUniqueInput\\",\\"fields\\":[{\\"name\\":\\"id\\",\\"inputType\\":[{\\"type\\":\\"String\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":true,\\"isList\\":false}]}]},{\\"name\\":\\"BubbleWhereUniqueInput\\",\\"fields\\":[{\\"name\\":\\"id\\",\\"inputType\\":[{\\"type\\":\\"String\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]}],\\"atLeastOne\\":true},{\\"name\\":\\"UserWhereUniqueInput\\",\\"fields\\":[{\\"name\\":\\"id\\",\\"inputType\\":[{\\"type\\":\\"String\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]}],\\"atLeastOne\\":true},{\\"name\\":\\"PostWhereUniqueInput\\",\\"fields\\":[{\\"name\\":\\"id\\",\\"inputType\\":[{\\"type\\":\\"Int\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]}],\\"atLeastOne\\":true},{\\"name\\":\\"PostCreateWithoutAuthorsInput\\",\\"fields\\":[{\\"name\\":\\"rating\\",\\"inputType\\":[{\\"type\\":\\"Float\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":true,\\"isList\\":false}]},{\\"name\\":\\"status\\",\\"inputType\\":[{\\"type\\":\\"PostStatus\\",\\"kind\\":\\"enum\\",\\"isRequired\\":true,\\"isList\\":false}]}]},{\\"name\\":\\"PostCreateManyWithoutAuthorsInput\\",\\"fields\\":[{\\"name\\":\\"create\\",\\"inputType\\":[{\\"type\\":\\"PostCreateWithoutAuthorsInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":true}]},{\\"name\\":\\"connect\\",\\"inputType\\":[{\\"type\\":\\"PostWhereUniqueInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":true}]}]},{\\"name\\":\\"UserCreateWithoutBubbleInput\\",\\"fields\\":[{\\"name\\":\\"id\\",\\"inputType\\":[{\\"type\\":\\"String\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"firstName\\",\\"inputType\\":[{\\"type\\":\\"String\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":true,\\"isList\\":false}]},{\\"name\\":\\"lastName\\",\\"inputType\\":[{\\"type\\":\\"String\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":true,\\"isList\\":false}]},{\\"name\\":\\"posts\\",\\"inputType\\":[{\\"type\\":\\"PostCreateManyWithoutAuthorsInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}]}]},{\\"name\\":\\"UserCreateManyWithoutBubbleInput\\",\\"fields\\":[{\\"name\\":\\"create\\",\\"inputType\\":[{\\"type\\":\\"UserCreateWithoutBubbleInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":true}]},{\\"name\\":\\"connect\\",\\"inputType\\":[{\\"type\\":\\"UserWhereUniqueInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":true}]}]},{\\"name\\":\\"BubbleCreateInput\\",\\"fields\\":[{\\"name\\":\\"id\\",\\"inputType\\":[{\\"type\\":\\"String\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"createdAt\\",\\"inputType\\":[{\\"type\\":\\"DateTime\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"members\\",\\"inputType\\":[{\\"type\\":\\"UserCreateManyWithoutBubbleInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}]}]},{\\"name\\":\\"PostUpdateWithoutAuthorsDataInput\\",\\"fields\\":[{\\"name\\":\\"id\\",\\"inputType\\":[{\\"type\\":\\"Int\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"rating\\",\\"inputType\\":[{\\"type\\":\\"Float\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"status\\",\\"inputType\\":[{\\"type\\":\\"PostStatus\\",\\"kind\\":\\"enum\\",\\"isRequired\\":false,\\"isList\\":false}]}]},{\\"name\\":\\"PostUpdateWithWhereUniqueWithoutAuthorsInput\\",\\"fields\\":[{\\"name\\":\\"where\\",\\"inputType\\":[{\\"type\\":\\"PostWhereUniqueInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}]},{\\"name\\":\\"data\\",\\"inputType\\":[{\\"type\\":\\"PostUpdateWithoutAuthorsDataInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}]}]},{\\"name\\":\\"PostScalarWhereInput\\",\\"fields\\":[{\\"name\\":\\"id\\",\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"Int\\"},{\\"type\\":\\"IntFilter\\",\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"object\\"}],\\"isRelationFilter\\":false},{\\"name\\":\\"authors\\",\\"inputType\\":[{\\"type\\":\\"UserFilter\\",\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"object\\"}],\\"isRelationFilter\\":false,\\"nullEqualsUndefined\\":true},{\\"name\\":\\"rating\\",\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"Float\\"},{\\"type\\":\\"FloatFilter\\",\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"object\\"}],\\"isRelationFilter\\":false},{\\"name\\":\\"status\\",\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"enum\\",\\"type\\":\\"PostStatus\\"},{\\"type\\":\\"PostStatusFilter\\",\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"object\\"}],\\"isRelationFilter\\":false},{\\"name\\":\\"AND\\",\\"inputType\\":[{\\"type\\":\\"PostScalarWhereInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":true}],\\"isRelationFilter\\":true},{\\"name\\":\\"OR\\",\\"inputType\\":[{\\"type\\":\\"PostScalarWhereInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":true}],\\"isRelationFilter\\":true},{\\"name\\":\\"NOT\\",\\"inputType\\":[{\\"type\\":\\"PostScalarWhereInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":true}],\\"isRelationFilter\\":true}],\\"isWhereType\\":true,\\"atLeastOne\\":false},{\\"name\\":\\"PostUpdateManyDataInput\\",\\"fields\\":[{\\"name\\":\\"id\\",\\"inputType\\":[{\\"type\\":\\"Int\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"rating\\",\\"inputType\\":[{\\"type\\":\\"Float\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"status\\",\\"inputType\\":[{\\"type\\":\\"PostStatus\\",\\"kind\\":\\"enum\\",\\"isRequired\\":false,\\"isList\\":false}]}]},{\\"name\\":\\"PostUpdateManyWithWhereNestedInput\\",\\"fields\\":[{\\"name\\":\\"where\\",\\"inputType\\":[{\\"type\\":\\"PostScalarWhereInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}]},{\\"name\\":\\"data\\",\\"inputType\\":[{\\"type\\":\\"PostUpdateManyDataInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}]}]},{\\"name\\":\\"PostUpsertWithWhereUniqueWithoutAuthorsInput\\",\\"fields\\":[{\\"name\\":\\"where\\",\\"inputType\\":[{\\"type\\":\\"PostWhereUniqueInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}]},{\\"name\\":\\"update\\",\\"inputType\\":[{\\"type\\":\\"PostUpdateWithoutAuthorsDataInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}]},{\\"name\\":\\"create\\",\\"inputType\\":[{\\"type\\":\\"PostCreateWithoutAuthorsInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}]}]},{\\"name\\":\\"PostUpdateManyWithoutAuthorsInput\\",\\"fields\\":[{\\"name\\":\\"create\\",\\"inputType\\":[{\\"type\\":\\"PostCreateWithoutAuthorsInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":true}]},{\\"name\\":\\"connect\\",\\"inputType\\":[{\\"type\\":\\"PostWhereUniqueInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":true}]},{\\"name\\":\\"set\\",\\"inputType\\":[{\\"type\\":\\"PostWhereUniqueInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":true}]},{\\"name\\":\\"disconnect\\",\\"inputType\\":[{\\"type\\":\\"PostWhereUniqueInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":true}]},{\\"name\\":\\"delete\\",\\"inputType\\":[{\\"type\\":\\"PostWhereUniqueInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":true}]},{\\"name\\":\\"update\\",\\"inputType\\":[{\\"type\\":\\"PostUpdateWithWhereUniqueWithoutAuthorsInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":true}]},{\\"name\\":\\"updateMany\\",\\"inputType\\":[{\\"type\\":\\"PostUpdateManyWithWhereNestedInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":true}]},{\\"name\\":\\"deleteMany\\",\\"inputType\\":[{\\"type\\":\\"PostScalarWhereInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":true}]},{\\"name\\":\\"upsert\\",\\"inputType\\":[{\\"type\\":\\"PostUpsertWithWhereUniqueWithoutAuthorsInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":true}]}]},{\\"name\\":\\"UserUpdateWithoutBubbleDataInput\\",\\"fields\\":[{\\"name\\":\\"id\\",\\"inputType\\":[{\\"type\\":\\"String\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"firstName\\",\\"inputType\\":[{\\"type\\":\\"String\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"lastName\\",\\"inputType\\":[{\\"type\\":\\"String\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"posts\\",\\"inputType\\":[{\\"type\\":\\"PostUpdateManyWithoutAuthorsInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}]}]},{\\"name\\":\\"UserUpdateWithWhereUniqueWithoutBubbleInput\\",\\"fields\\":[{\\"name\\":\\"where\\",\\"inputType\\":[{\\"type\\":\\"UserWhereUniqueInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}]},{\\"name\\":\\"data\\",\\"inputType\\":[{\\"type\\":\\"UserUpdateWithoutBubbleDataInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}]}]},{\\"name\\":\\"UserScalarWhereInput\\",\\"fields\\":[{\\"name\\":\\"id\\",\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"String\\"},{\\"type\\":\\"StringFilter\\",\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"object\\"}],\\"isRelationFilter\\":false},{\\"name\\":\\"posts\\",\\"inputType\\":[{\\"type\\":\\"PostFilter\\",\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"object\\"}],\\"isRelationFilter\\":false,\\"nullEqualsUndefined\\":true},{\\"name\\":\\"firstName\\",\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"String\\"},{\\"type\\":\\"StringFilter\\",\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"object\\"}],\\"isRelationFilter\\":false},{\\"name\\":\\"lastName\\",\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"String\\"},{\\"type\\":\\"StringFilter\\",\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"object\\"}],\\"isRelationFilter\\":false},{\\"name\\":\\"AND\\",\\"inputType\\":[{\\"type\\":\\"UserScalarWhereInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":true}],\\"isRelationFilter\\":true},{\\"name\\":\\"OR\\",\\"inputType\\":[{\\"type\\":\\"UserScalarWhereInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":true}],\\"isRelationFilter\\":true},{\\"name\\":\\"NOT\\",\\"inputType\\":[{\\"type\\":\\"UserScalarWhereInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":true}],\\"isRelationFilter\\":true}],\\"isWhereType\\":true,\\"atLeastOne\\":false},{\\"name\\":\\"UserUpdateManyDataInput\\",\\"fields\\":[{\\"name\\":\\"id\\",\\"inputType\\":[{\\"type\\":\\"String\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"firstName\\",\\"inputType\\":[{\\"type\\":\\"String\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"lastName\\",\\"inputType\\":[{\\"type\\":\\"String\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]}]},{\\"name\\":\\"UserUpdateManyWithWhereNestedInput\\",\\"fields\\":[{\\"name\\":\\"where\\",\\"inputType\\":[{\\"type\\":\\"UserScalarWhereInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}]},{\\"name\\":\\"data\\",\\"inputType\\":[{\\"type\\":\\"UserUpdateManyDataInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}]}]},{\\"name\\":\\"UserUpsertWithWhereUniqueWithoutBubbleInput\\",\\"fields\\":[{\\"name\\":\\"where\\",\\"inputType\\":[{\\"type\\":\\"UserWhereUniqueInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}]},{\\"name\\":\\"update\\",\\"inputType\\":[{\\"type\\":\\"UserUpdateWithoutBubbleDataInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}]},{\\"name\\":\\"create\\",\\"inputType\\":[{\\"type\\":\\"UserCreateWithoutBubbleInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}]}]},{\\"name\\":\\"UserUpdateManyWithoutBubbleInput\\",\\"fields\\":[{\\"name\\":\\"create\\",\\"inputType\\":[{\\"type\\":\\"UserCreateWithoutBubbleInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":true}]},{\\"name\\":\\"connect\\",\\"inputType\\":[{\\"type\\":\\"UserWhereUniqueInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":true}]},{\\"name\\":\\"set\\",\\"inputType\\":[{\\"type\\":\\"UserWhereUniqueInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":true}]},{\\"name\\":\\"disconnect\\",\\"inputType\\":[{\\"type\\":\\"UserWhereUniqueInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":true}]},{\\"name\\":\\"delete\\",\\"inputType\\":[{\\"type\\":\\"UserWhereUniqueInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":true}]},{\\"name\\":\\"update\\",\\"inputType\\":[{\\"type\\":\\"UserUpdateWithWhereUniqueWithoutBubbleInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":true}]},{\\"name\\":\\"updateMany\\",\\"inputType\\":[{\\"type\\":\\"UserUpdateManyWithWhereNestedInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":true}]},{\\"name\\":\\"deleteMany\\",\\"inputType\\":[{\\"type\\":\\"UserScalarWhereInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":true}]},{\\"name\\":\\"upsert\\",\\"inputType\\":[{\\"type\\":\\"UserUpsertWithWhereUniqueWithoutBubbleInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":true}]}]},{\\"name\\":\\"BubbleUpdateInput\\",\\"fields\\":[{\\"name\\":\\"id\\",\\"inputType\\":[{\\"type\\":\\"String\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"createdAt\\",\\"inputType\\":[{\\"type\\":\\"DateTime\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"members\\",\\"inputType\\":[{\\"type\\":\\"UserUpdateManyWithoutBubbleInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}]}]},{\\"name\\":\\"BubbleUpdateManyMutationInput\\",\\"fields\\":[{\\"name\\":\\"id\\",\\"inputType\\":[{\\"type\\":\\"String\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"createdAt\\",\\"inputType\\":[{\\"type\\":\\"DateTime\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]}]},{\\"name\\":\\"BubbleCreateWithoutMembersInput\\",\\"fields\\":[{\\"name\\":\\"id\\",\\"inputType\\":[{\\"type\\":\\"String\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"createdAt\\",\\"inputType\\":[{\\"type\\":\\"DateTime\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]}]},{\\"name\\":\\"BubbleCreateOneWithoutMembersInput\\",\\"fields\\":[{\\"name\\":\\"create\\",\\"inputType\\":[{\\"type\\":\\"BubbleCreateWithoutMembersInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"connect\\",\\"inputType\\":[{\\"type\\":\\"BubbleWhereUniqueInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}]}]},{\\"name\\":\\"UserCreateInput\\",\\"fields\\":[{\\"name\\":\\"id\\",\\"inputType\\":[{\\"type\\":\\"String\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"firstName\\",\\"inputType\\":[{\\"type\\":\\"String\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":true,\\"isList\\":false}]},{\\"name\\":\\"lastName\\",\\"inputType\\":[{\\"type\\":\\"String\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":true,\\"isList\\":false}]},{\\"name\\":\\"posts\\",\\"inputType\\":[{\\"type\\":\\"PostCreateManyWithoutAuthorsInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"bubble\\",\\"inputType\\":[{\\"type\\":\\"BubbleCreateOneWithoutMembersInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}]}]},{\\"name\\":\\"BubbleUpdateWithoutMembersDataInput\\",\\"fields\\":[{\\"name\\":\\"id\\",\\"inputType\\":[{\\"type\\":\\"String\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"createdAt\\",\\"inputType\\":[{\\"type\\":\\"DateTime\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]}]},{\\"name\\":\\"BubbleUpsertWithoutMembersInput\\",\\"fields\\":[{\\"name\\":\\"update\\",\\"inputType\\":[{\\"type\\":\\"BubbleUpdateWithoutMembersDataInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}]},{\\"name\\":\\"create\\",\\"inputType\\":[{\\"type\\":\\"BubbleCreateWithoutMembersInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}]}]},{\\"name\\":\\"BubbleUpdateOneWithoutMembersInput\\",\\"fields\\":[{\\"name\\":\\"create\\",\\"inputType\\":[{\\"type\\":\\"BubbleCreateWithoutMembersInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"connect\\",\\"inputType\\":[{\\"type\\":\\"BubbleWhereUniqueInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"disconnect\\",\\"inputType\\":[{\\"type\\":\\"Boolean\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"delete\\",\\"inputType\\":[{\\"type\\":\\"Boolean\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"update\\",\\"inputType\\":[{\\"type\\":\\"BubbleUpdateWithoutMembersDataInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"upsert\\",\\"inputType\\":[{\\"type\\":\\"BubbleUpsertWithoutMembersInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}]}]},{\\"name\\":\\"UserUpdateInput\\",\\"fields\\":[{\\"name\\":\\"id\\",\\"inputType\\":[{\\"type\\":\\"String\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"firstName\\",\\"inputType\\":[{\\"type\\":\\"String\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"lastName\\",\\"inputType\\":[{\\"type\\":\\"String\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"posts\\",\\"inputType\\":[{\\"type\\":\\"PostUpdateManyWithoutAuthorsInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"bubble\\",\\"inputType\\":[{\\"type\\":\\"BubbleUpdateOneWithoutMembersInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}]}]},{\\"name\\":\\"UserUpdateManyMutationInput\\",\\"fields\\":[{\\"name\\":\\"id\\",\\"inputType\\":[{\\"type\\":\\"String\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"firstName\\",\\"inputType\\":[{\\"type\\":\\"String\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"lastName\\",\\"inputType\\":[{\\"type\\":\\"String\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]}]},{\\"name\\":\\"UserCreateWithoutPostsInput\\",\\"fields\\":[{\\"name\\":\\"id\\",\\"inputType\\":[{\\"type\\":\\"String\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"firstName\\",\\"inputType\\":[{\\"type\\":\\"String\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":true,\\"isList\\":false}]},{\\"name\\":\\"lastName\\",\\"inputType\\":[{\\"type\\":\\"String\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":true,\\"isList\\":false}]},{\\"name\\":\\"bubble\\",\\"inputType\\":[{\\"type\\":\\"BubbleCreateOneWithoutMembersInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}]}]},{\\"name\\":\\"UserCreateManyWithoutPostsInput\\",\\"fields\\":[{\\"name\\":\\"create\\",\\"inputType\\":[{\\"type\\":\\"UserCreateWithoutPostsInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":true}]},{\\"name\\":\\"connect\\",\\"inputType\\":[{\\"type\\":\\"UserWhereUniqueInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":true}]}]},{\\"name\\":\\"PostCreateInput\\",\\"fields\\":[{\\"name\\":\\"rating\\",\\"inputType\\":[{\\"type\\":\\"Float\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":true,\\"isList\\":false}]},{\\"name\\":\\"status\\",\\"inputType\\":[{\\"type\\":\\"PostStatus\\",\\"kind\\":\\"enum\\",\\"isRequired\\":true,\\"isList\\":false}]},{\\"name\\":\\"authors\\",\\"inputType\\":[{\\"type\\":\\"UserCreateManyWithoutPostsInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}]}]},{\\"name\\":\\"UserUpdateWithoutPostsDataInput\\",\\"fields\\":[{\\"name\\":\\"id\\",\\"inputType\\":[{\\"type\\":\\"String\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"firstName\\",\\"inputType\\":[{\\"type\\":\\"String\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"lastName\\",\\"inputType\\":[{\\"type\\":\\"String\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"bubble\\",\\"inputType\\":[{\\"type\\":\\"BubbleUpdateOneWithoutMembersInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}]}]},{\\"name\\":\\"UserUpdateWithWhereUniqueWithoutPostsInput\\",\\"fields\\":[{\\"name\\":\\"where\\",\\"inputType\\":[{\\"type\\":\\"UserWhereUniqueInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}]},{\\"name\\":\\"data\\",\\"inputType\\":[{\\"type\\":\\"UserUpdateWithoutPostsDataInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}]}]},{\\"name\\":\\"UserUpsertWithWhereUniqueWithoutPostsInput\\",\\"fields\\":[{\\"name\\":\\"where\\",\\"inputType\\":[{\\"type\\":\\"UserWhereUniqueInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}]},{\\"name\\":\\"update\\",\\"inputType\\":[{\\"type\\":\\"UserUpdateWithoutPostsDataInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}]},{\\"name\\":\\"create\\",\\"inputType\\":[{\\"type\\":\\"UserCreateWithoutPostsInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":true,\\"isList\\":false}]}]},{\\"name\\":\\"UserUpdateManyWithoutPostsInput\\",\\"fields\\":[{\\"name\\":\\"create\\",\\"inputType\\":[{\\"type\\":\\"UserCreateWithoutPostsInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":true}]},{\\"name\\":\\"connect\\",\\"inputType\\":[{\\"type\\":\\"UserWhereUniqueInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":true}]},{\\"name\\":\\"set\\",\\"inputType\\":[{\\"type\\":\\"UserWhereUniqueInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":true}]},{\\"name\\":\\"disconnect\\",\\"inputType\\":[{\\"type\\":\\"UserWhereUniqueInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":true}]},{\\"name\\":\\"delete\\",\\"inputType\\":[{\\"type\\":\\"UserWhereUniqueInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":true}]},{\\"name\\":\\"update\\",\\"inputType\\":[{\\"type\\":\\"UserUpdateWithWhereUniqueWithoutPostsInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":true}]},{\\"name\\":\\"updateMany\\",\\"inputType\\":[{\\"type\\":\\"UserUpdateManyWithWhereNestedInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":true}]},{\\"name\\":\\"deleteMany\\",\\"inputType\\":[{\\"type\\":\\"UserScalarWhereInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":true}]},{\\"name\\":\\"upsert\\",\\"inputType\\":[{\\"type\\":\\"UserUpsertWithWhereUniqueWithoutPostsInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":true}]}]},{\\"name\\":\\"PostUpdateInput\\",\\"fields\\":[{\\"name\\":\\"id\\",\\"inputType\\":[{\\"type\\":\\"Int\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"rating\\",\\"inputType\\":[{\\"type\\":\\"Float\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"status\\",\\"inputType\\":[{\\"type\\":\\"PostStatus\\",\\"kind\\":\\"enum\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"authors\\",\\"inputType\\":[{\\"type\\":\\"UserUpdateManyWithoutPostsInput\\",\\"kind\\":\\"object\\",\\"isRequired\\":false,\\"isList\\":false}]}]},{\\"name\\":\\"PostUpdateManyMutationInput\\",\\"fields\\":[{\\"name\\":\\"id\\",\\"inputType\\":[{\\"type\\":\\"Int\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"rating\\",\\"inputType\\":[{\\"type\\":\\"Float\\",\\"kind\\":\\"scalar\\",\\"isRequired\\":false,\\"isList\\":false}]},{\\"name\\":\\"status\\",\\"inputType\\":[{\\"type\\":\\"PostStatus\\",\\"kind\\":\\"enum\\",\\"isRequired\\":false,\\"isList\\":false}]}]},{\\"name\\":\\"IntFilter\\",\\"fields\\":[{\\"name\\":\\"equals\\",\\"isRelationFilter\\":false,\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"Int\\"}]},{\\"name\\":\\"not\\",\\"isRelationFilter\\":false,\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"Int\\"},{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"IntFilter\\"}]},{\\"name\\":\\"in\\",\\"isRelationFilter\\":false,\\"inputType\\":[{\\"isList\\":true,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"Int\\"}]},{\\"name\\":\\"notIn\\",\\"isRelationFilter\\":false,\\"inputType\\":[{\\"isList\\":true,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"Int\\"}]},{\\"name\\":\\"lt\\",\\"isRelationFilter\\":false,\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"Int\\"}]},{\\"name\\":\\"lte\\",\\"isRelationFilter\\":false,\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"Int\\"}]},{\\"name\\":\\"gt\\",\\"isRelationFilter\\":false,\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"Int\\"}]},{\\"name\\":\\"gte\\",\\"isRelationFilter\\":false,\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"Int\\"}]}],\\"atLeastOne\\":false},{\\"name\\":\\"UserFilter\\",\\"fields\\":[{\\"name\\":\\"every\\",\\"isRelationFilter\\":true,\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"object\\",\\"type\\":\\"UserWhereInput\\"}]},{\\"name\\":\\"some\\",\\"isRelationFilter\\":true,\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"object\\",\\"type\\":\\"UserWhereInput\\"}]},{\\"name\\":\\"none\\",\\"isRelationFilter\\":true,\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"object\\",\\"type\\":\\"UserWhereInput\\"}]}],\\"atLeastOne\\":false},{\\"name\\":\\"FloatFilter\\",\\"fields\\":[{\\"name\\":\\"equals\\",\\"isRelationFilter\\":false,\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"Float\\"}]},{\\"name\\":\\"not\\",\\"isRelationFilter\\":false,\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"Float\\"},{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"FloatFilter\\"}]},{\\"name\\":\\"in\\",\\"isRelationFilter\\":false,\\"inputType\\":[{\\"isList\\":true,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"Float\\"}]},{\\"name\\":\\"notIn\\",\\"isRelationFilter\\":false,\\"inputType\\":[{\\"isList\\":true,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"Float\\"}]},{\\"name\\":\\"lt\\",\\"isRelationFilter\\":false,\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"Float\\"}]},{\\"name\\":\\"lte\\",\\"isRelationFilter\\":false,\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"Float\\"}]},{\\"name\\":\\"gt\\",\\"isRelationFilter\\":false,\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"Float\\"}]},{\\"name\\":\\"gte\\",\\"isRelationFilter\\":false,\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"Float\\"}]}],\\"atLeastOne\\":false},{\\"name\\":\\"PostStatusFilter\\",\\"fields\\":[{\\"name\\":\\"equals\\",\\"isRelationFilter\\":false,\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"enum\\",\\"type\\":\\"PostStatus\\"}]},{\\"name\\":\\"not\\",\\"isRelationFilter\\":false,\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"enum\\",\\"type\\":\\"PostStatus\\"},{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"enum\\",\\"type\\":\\"PostStatusFilter\\"}]},{\\"name\\":\\"in\\",\\"isRelationFilter\\":false,\\"inputType\\":[{\\"isList\\":true,\\"isRequired\\":false,\\"kind\\":\\"enum\\",\\"type\\":\\"PostStatus\\"}]},{\\"name\\":\\"notIn\\",\\"isRelationFilter\\":false,\\"inputType\\":[{\\"isList\\":true,\\"isRequired\\":false,\\"kind\\":\\"enum\\",\\"type\\":\\"PostStatus\\"}]}],\\"atLeastOne\\":false},{\\"name\\":\\"StringFilter\\",\\"fields\\":[{\\"name\\":\\"equals\\",\\"isRelationFilter\\":false,\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"String\\"}]},{\\"name\\":\\"not\\",\\"isRelationFilter\\":false,\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"String\\"},{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"StringFilter\\"}]},{\\"name\\":\\"in\\",\\"isRelationFilter\\":false,\\"inputType\\":[{\\"isList\\":true,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"String\\"}]},{\\"name\\":\\"notIn\\",\\"isRelationFilter\\":false,\\"inputType\\":[{\\"isList\\":true,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"String\\"}]},{\\"name\\":\\"lt\\",\\"isRelationFilter\\":false,\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"String\\"}]},{\\"name\\":\\"lte\\",\\"isRelationFilter\\":false,\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"String\\"}]},{\\"name\\":\\"gt\\",\\"isRelationFilter\\":false,\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"String\\"}]},{\\"name\\":\\"gte\\",\\"isRelationFilter\\":false,\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"String\\"}]},{\\"name\\":\\"contains\\",\\"isRelationFilter\\":false,\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"String\\"}]},{\\"name\\":\\"startsWith\\",\\"isRelationFilter\\":false,\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"String\\"}]},{\\"name\\":\\"endsWith\\",\\"isRelationFilter\\":false,\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"String\\"}]}],\\"atLeastOne\\":false},{\\"name\\":\\"PostFilter\\",\\"fields\\":[{\\"name\\":\\"every\\",\\"isRelationFilter\\":true,\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"object\\",\\"type\\":\\"PostWhereInput\\"}]},{\\"name\\":\\"some\\",\\"isRelationFilter\\":true,\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"object\\",\\"type\\":\\"PostWhereInput\\"}]},{\\"name\\":\\"none\\",\\"isRelationFilter\\":true,\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"object\\",\\"type\\":\\"PostWhereInput\\"}]}],\\"atLeastOne\\":false},{\\"name\\":\\"UUIDFilter\\",\\"fields\\":[{\\"name\\":\\"equals\\",\\"isRelationFilter\\":false,\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"UUID\\"}]},{\\"name\\":\\"not\\",\\"isRelationFilter\\":false,\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"UUID\\"},{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"UUIDFilter\\"}]},{\\"name\\":\\"in\\",\\"isRelationFilter\\":false,\\"inputType\\":[{\\"isList\\":true,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"UUID\\"}]},{\\"name\\":\\"notIn\\",\\"isRelationFilter\\":false,\\"inputType\\":[{\\"isList\\":true,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"UUID\\"}]},{\\"name\\":\\"lt\\",\\"isRelationFilter\\":false,\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"UUID\\"}]},{\\"name\\":\\"lte\\",\\"isRelationFilter\\":false,\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"UUID\\"}]},{\\"name\\":\\"gt\\",\\"isRelationFilter\\":false,\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"UUID\\"}]},{\\"name\\":\\"gte\\",\\"isRelationFilter\\":false,\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"UUID\\"}]},{\\"name\\":\\"contains\\",\\"isRelationFilter\\":false,\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"UUID\\"}]},{\\"name\\":\\"startsWith\\",\\"isRelationFilter\\":false,\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"UUID\\"}]},{\\"name\\":\\"endsWith\\",\\"isRelationFilter\\":false,\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"UUID\\"}]}],\\"atLeastOne\\":false},{\\"name\\":\\"DateTimeFilter\\",\\"fields\\":[{\\"name\\":\\"equals\\",\\"isRelationFilter\\":false,\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"DateTime\\"}]},{\\"name\\":\\"not\\",\\"isRelationFilter\\":false,\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"DateTime\\"},{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"DateTimeFilter\\"}]},{\\"name\\":\\"in\\",\\"isRelationFilter\\":false,\\"inputType\\":[{\\"isList\\":true,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"DateTime\\"}]},{\\"name\\":\\"notIn\\",\\"isRelationFilter\\":false,\\"inputType\\":[{\\"isList\\":true,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"DateTime\\"}]},{\\"name\\":\\"lt\\",\\"isRelationFilter\\":false,\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"DateTime\\"}]},{\\"name\\":\\"lte\\",\\"isRelationFilter\\":false,\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"DateTime\\"}]},{\\"name\\":\\"gt\\",\\"isRelationFilter\\":false,\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"DateTime\\"}]},{\\"name\\":\\"gte\\",\\"isRelationFilter\\":false,\\"inputType\\":[{\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"scalar\\",\\"type\\":\\"DateTime\\"}]}],\\"atLeastOne\\":false},{\\"name\\":\\"BubbleOrderByInput\\",\\"atLeastOne\\":true,\\"atMostOne\\":true,\\"isOrderType\\":true,\\"fields\\":[{\\"name\\":\\"id\\",\\"inputType\\":[{\\"type\\":\\"OrderByArg\\",\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"enum\\"}],\\"isRelationFilter\\":false},{\\"name\\":\\"createdAt\\",\\"inputType\\":[{\\"type\\":\\"OrderByArg\\",\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"enum\\"}],\\"isRelationFilter\\":false}]},{\\"name\\":\\"UserOrderByInput\\",\\"atLeastOne\\":true,\\"atMostOne\\":true,\\"isOrderType\\":true,\\"fields\\":[{\\"name\\":\\"id\\",\\"inputType\\":[{\\"type\\":\\"OrderByArg\\",\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"enum\\"}],\\"isRelationFilter\\":false},{\\"name\\":\\"firstName\\",\\"inputType\\":[{\\"type\\":\\"OrderByArg\\",\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"enum\\"}],\\"isRelationFilter\\":false},{\\"name\\":\\"lastName\\",\\"inputType\\":[{\\"type\\":\\"OrderByArg\\",\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"enum\\"}],\\"isRelationFilter\\":false}]},{\\"name\\":\\"PostOrderByInput\\",\\"atLeastOne\\":true,\\"atMostOne\\":true,\\"isOrderType\\":true,\\"fields\\":[{\\"name\\":\\"id\\",\\"inputType\\":[{\\"type\\":\\"OrderByArg\\",\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"enum\\"}],\\"isRelationFilter\\":false},{\\"name\\":\\"rating\\",\\"inputType\\":[{\\"type\\":\\"OrderByArg\\",\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"enum\\"}],\\"isRelationFilter\\":false},{\\"name\\":\\"status\\",\\"inputType\\":[{\\"type\\":\\"OrderByArg\\",\\"isList\\":false,\\"isRequired\\":false,\\"kind\\":\\"enum\\"}],\\"isRelationFilter\\":false}]}]}}'

// We are parsing 2 times, as we want independent objects, because
// DMMFClass introduces circular references in the dmmf object
const dmmf = JSON.parse(dmmfString)
exports.dmmf = JSON.parse(dmmfString)
    "
`;

exports[`integrates together: photon typescript declaration 1`] = `
"import {
  DMMF,
  DMMFClass,
  Engine,
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
} from './runtime';

export { PrismaClientKnownRequestError }
export { PrismaClientUnknownRequestError }
export { PrismaClientRustPanicError }
export { PrismaClientInitializationError }
export { PrismaClientValidationError }

/**
 * Query Engine version: latest
 */

/**
 * Utility Types
 */

/**
 * Get the type of the value, that the Promise holds.
 */
export declare type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

/**
 * Get the return type of a function which returns a Promise.
 */
export declare type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


export declare type Enumerable<T> = T | Array<T>;
export declare type MergeTruthyValues<R extends object, S extends object> = {
  [key in keyof S | keyof R]: key extends false ? never : key extends keyof S ? S[key] extends false ? never : S[key] : key extends keyof R ? R[key] : never;
};
export declare type CleanupNever<T> = {
  [key in keyof T]: T[key] extends never ? never : key;
}[keyof T];
/**
 * Subset
 * @desc From \`T\` pick properties that exist in \`U\`. Simple version of Intersection
 */
export declare type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};
declare class PrismaClientFetcher {
  private readonly prisma;
  private readonly debug;
  private readonly hooks?;
  constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
  request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string, collectTimestamps?: any): Promise<T>;
  sanitizeMessage(message: string): string;
  protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
}


/**
 * Client
**/


export type Datasources = {

}

export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

export interface PrismaClientOptions {
  datasources?: Datasources

  /**
   * @default \\"pretty\\"
   */
  errorFormat?: ErrorFormat

  log?: Array<LogLevel | LogDefinition>

  /**
   * You probably don't want to use this. \`__internal\` is used by internal tooling.
   */
  __internal?: {
    debug?: boolean
    hooks?: Hooks
    engine?: {
      cwd?: string
      binaryPath?: string
    }
    measurePerformance?: boolean
  }

  /**
   * Useful for pgbouncer
   */
  forceTransactions?: boolean
}

export type Hooks = {
  beforeRequest?: (options: {query: string, path: string[], rootField?: string, typeName?: string, document: any}) => any
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
export type GetEvents<T extends Array<LogLevel | LogDefinition>> = GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]>

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */

// tested in getLogLevel.test.ts
export declare function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * \`\`\`
 * const prisma = new PrismaClient()
 * // Fetch zero or more Bubbles
 * const bubbles = await prisma.bubble.findMany()
 * \`\`\`
 *
 * 
 * Read more in our [docs](https://github.com/prisma/prisma2/blob/master/docs/prisma-client-js/api.md).
 */
export declare class PrismaClient<T extends PrismaClientOptions = {}, U = keyof T extends 'log' ? T['log'] extends Array<LogLevel | LogDefinition> ? GetEvents<T['log']> : never : never> {
  /**
   * @private
   */
  private fetcher;
  /**
   * @private
   */
  private readonly dmmf;
  /**
   * @private
   */
  private connectionPromise?;
  /**
   * @private
   */
  private disconnectionPromise?;
  /**
   * @private
   */
  private readonly engineConfig;
  /**
   * @private
   */
  private readonly measurePerformance;
  /**
   * @private
   */
  private engine: Engine;
  /**
   * @private
   */
  private errorFormat: ErrorFormat;

  /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * \`\`\`
   * const prisma = new PrismaClient()
   * // Fetch zero or more Bubbles
   * const bubbles = await prisma.bubble.findMany()
   * \`\`\`
   *
   * 
   * Read more in our [docs](https://github.com/prisma/prisma2/blob/master/docs/prisma-client-js/api.md).
   */
  constructor(optionsArg?: T);
  on<V extends U>(eventType: V, callback: V extends never ? never : (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * Connect with the database
   */
  connect(): Promise<void>;
  /**
   * @private
   */
  private runDisconnect;
  /**
   * Disconnect from the database
   */
  disconnect(): Promise<any>;
  /**
   * Makes a raw query
   * @example
   * \`\`\`
   * // Fetch all entries from the \`User\` table
   * const result = await prisma.raw\`SELECT * FROM User;\`
   * // Or
   * const result = await prisma.raw('SELECT * FROM User;')
   * 
   * // With parameters use prisma.raw\`\`, values will be escaped automatically
   * const userId = '1'
   * const result = await prisma.raw\`SELECT * FROM User WHERE id = \${userId};\`
  * \`\`\`
  * 
  * Read more in our [docs](https://github.com/prisma/prisma2/blob/master/docs/prisma-client-js/api.md#raw-database-access).
  */
  raw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<T>;

  /**
   * \`prisma.bubble\`: Exposes CRUD operations for the **Bubble** model.
    * Example usage:
    * \`\`\`ts
    * // Fetch zero or more Bubbles
    * const bubbles = await prisma.bubble.findMany()
    * \`\`\`
    */
  get bubble(): BubbleDelegate;

  /**
   * \`prisma.user\`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * \`\`\`ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * \`\`\`
    */
  get user(): UserDelegate;

  /**
   * \`prisma.post\`: Exposes CRUD operations for the **Post** model.
    * Example usage:
    * \`\`\`ts
    * // Fetch zero or more Posts
    * const posts = await prisma.post.findMany()
    * \`\`\`
    */
  get post(): PostDelegate;
}



/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export declare const OrderByArg: {
  asc: 'asc',
  desc: 'desc'
};

export declare type OrderByArg = (typeof OrderByArg)[keyof typeof OrderByArg]


export declare const PostStatus: {
  DRAFT: 'DRAFT',
  PUBLISHED: 'PUBLISHED'
};

export declare type PostStatus = (typeof PostStatus)[keyof typeof PostStatus]



/**
 * Model Bubble
 */

export type Bubble = {
  id: string
  createdAt: Date
}

export type BubbleScalars = 'id' | 'createdAt'
  

export type BubbleSelect = {
  id?: boolean
  createdAt?: boolean
  members?: boolean | FindManyUserSelectArgsOptional
}

export type BubbleInclude = {
  members?: boolean | FindManyUserIncludeArgsOptional
}

type BubbleDefault = {
  id: true
  createdAt: true
}


export type BubbleGetSelectPayload<S extends boolean | BubbleSelect> = S extends true
  ? Bubble
  : S extends BubbleSelect
  ? {
      [P in CleanupNever<MergeTruthyValues<{}, S>>]: P extends BubbleScalars
        ? Bubble[P]
        : P extends 'members'
        ? Array<UserGetSelectPayload<ExtractFindManyUserSelectArgs<S[P]>>>
        : never
    }
   : never

export type BubbleGetIncludePayload<S extends boolean | BubbleInclude> = S extends true
  ? Bubble
  : S extends BubbleInclude
  ? {
      [P in CleanupNever<MergeTruthyValues<BubbleDefault, S>>]: P extends BubbleScalars
        ? Bubble[P]
        : P extends 'members'
        ? Array<UserGetIncludePayload<ExtractFindManyUserIncludeArgs<S[P]>>>
        : never
    }
   : never

export interface BubbleDelegate {
  /**
   * Find zero or one Bubble.
   * @param {FindOneBubbleArgs} args - Arguments to find a Bubble
   * @example
   * // Get one Bubble
   * const bubble = await prisma.bubble.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneBubbleArgs>(
    args: Subset<T, FindOneBubbleArgs>
  ): T extends FindOneBubbleArgsRequired ? 'Please either choose \`select\` or \`include\`' : T extends FindOneBubbleSelectArgs ? Promise<BubbleGetSelectPayload<ExtractFindOneBubbleSelectArgs<T>> | null>
  : T extends FindOneBubbleIncludeArgs ? Promise<BubbleGetIncludePayload<ExtractFindOneBubbleIncludeArgs<T>> | null> : BubbleClient<Bubble | null>
  /**
   * Find zero or more Bubbles.
   * @param {FindManyBubbleArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Bubbles
   * const bubbles = await prisma.bubble.findMany()
   * 
   * // Get first 10 Bubbles
   * const bubbles = await prisma.bubble.findMany({ first: 10 })
   * 
   * // Only select the \`id\`
   * const bubbleWithIdOnly = await prisma.bubble.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyBubbleArgs>(
    args?: Subset<T, FindManyBubbleArgs>
  ): T extends FindManyBubbleArgsRequired ? 'Please either choose \`select\` or \`include\`' : T extends FindManyBubbleSelectArgs
  ? Promise<Array<BubbleGetSelectPayload<ExtractFindManyBubbleSelectArgs<T>>>> : T extends FindManyBubbleIncludeArgs
  ? Promise<Array<BubbleGetIncludePayload<ExtractFindManyBubbleIncludeArgs<T>>>> : Promise<Array<Bubble>>
  /**
   * Create a Bubble.
   * @param {BubbleCreateArgs} args - Arguments to create a Bubble.
   * @example
   * // Create one Bubble
   * const user = await prisma.bubble.create({
   *   data: {
   *     // ... data to create a Bubble
   *   }
   * })
   * 
  **/
  create<T extends BubbleCreateArgs>(
    args: Subset<T, BubbleCreateArgs>
  ): T extends BubbleCreateArgsRequired ? 'Please either choose \`select\` or \`include\`' : T extends BubbleSelectCreateArgs ? Promise<BubbleGetSelectPayload<ExtractBubbleSelectCreateArgs<T>>>
  : T extends BubbleIncludeCreateArgs ? Promise<BubbleGetIncludePayload<ExtractBubbleIncludeCreateArgs<T>>> : BubbleClient<Bubble>
  /**
   * Delete a Bubble.
   * @param {BubbleDeleteArgs} args - Arguments to delete one Bubble.
   * @example
   * // Delete one Bubble
   * const user = await prisma.bubble.delete({
   *   where: {
   *     // ... filter to delete one Bubble
   *   }
   * })
   * 
  **/
  delete<T extends BubbleDeleteArgs>(
    args: Subset<T, BubbleDeleteArgs>
  ): T extends BubbleDeleteArgsRequired ? 'Please either choose \`select\` or \`include\`' : T extends BubbleSelectDeleteArgs ? Promise<BubbleGetSelectPayload<ExtractBubbleSelectDeleteArgs<T>>>
  : T extends BubbleIncludeDeleteArgs ? Promise<BubbleGetIncludePayload<ExtractBubbleIncludeDeleteArgs<T>>> : BubbleClient<Bubble>
  /**
   * Update one Bubble.
   * @param {BubbleUpdateArgs} args - Arguments to update one Bubble.
   * @example
   * // Update one Bubble
   * const bubble = await prisma.bubble.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provider data here
   *   }
   * })
   * 
  **/
  update<T extends BubbleUpdateArgs>(
    args: Subset<T, BubbleUpdateArgs>
  ): T extends BubbleUpdateArgsRequired ? 'Please either choose \`select\` or \`include\`' : T extends BubbleSelectUpdateArgs ? Promise<BubbleGetSelectPayload<ExtractBubbleSelectUpdateArgs<T>>>
  : T extends BubbleIncludeUpdateArgs ? Promise<BubbleGetIncludePayload<ExtractBubbleIncludeUpdateArgs<T>>> : BubbleClient<Bubble>
  /**
   * Delete zero or more Bubbles.
   * @param {BubbleDeleteManyArgs} args - Arguments to filter Bubbles to delete.
   * @example
   * // Delete a few Bubbles
   * const { count } = await prisma.bubble.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends BubbleDeleteManyArgs>(
    args: Subset<T, BubbleDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Bubbles.
   * @param {BubbleUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Bubbles
   * const bubble = await prisma.bubble.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provider data here
   *   }
   * })
   * 
  **/
  updateMany<T extends BubbleUpdateManyArgs>(
    args: Subset<T, BubbleUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Bubble.
   * @param {BubbleUpsertArgs} args - Arguments to update or create a Bubble.
   * @example
   * // Update or create a Bubble
   * const bubble = await prisma.bubble.upsert({
   *   create: {
   *     // ... data to create a Bubble
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Bubble we want to update
   *   }
   * })
  **/
  upsert<T extends BubbleUpsertArgs>(
    args: Subset<T, BubbleUpsertArgs>
  ): T extends BubbleUpsertArgsRequired ? 'Please either choose \`select\` or \`include\`' : T extends BubbleSelectUpsertArgs ? Promise<BubbleGetSelectPayload<ExtractBubbleSelectUpsertArgs<T>>>
  : T extends BubbleIncludeUpsertArgs ? Promise<BubbleGetIncludePayload<ExtractBubbleIncludeUpsertArgs<T>>> : BubbleClient<Bubble>
  /**
   * 
   */
  count(): Promise<number>
}

export declare class BubbleClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  private _collectTimestamps?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  members<T extends FindManyUserArgs = {}>(args?: Subset<T, FindManyUserArgs>): T extends FindManyUserArgsRequired ? 'Please either choose \`select\` or \`include\`' : T extends FindManyUserSelectArgs
  ? Promise<Array<UserGetSelectPayload<ExtractFindManyUserSelectArgs<T>>>> : T extends FindManyUserIncludeArgs
  ? Promise<Array<UserGetIncludePayload<ExtractFindManyUserIncludeArgs<T>>>> : Promise<Array<User>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Bubble findOne
 */
export type FindOneBubbleArgs = {
  /**
   * Select specific fields to fetch from the Bubble
  **/
  select?: BubbleSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: BubbleInclude | null
  /**
   * Filter, which Bubble to fetch.
  **/
  where: BubbleWhereUniqueInput
}

export type FindOneBubbleArgsRequired = {
  /**
   * Select specific fields to fetch from the Bubble
  **/
  select: BubbleSelect
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: BubbleInclude
  /**
   * Filter, which Bubble to fetch.
  **/
  where: BubbleWhereUniqueInput
}

export type FindOneBubbleSelectArgs = {
  /**
   * Select specific fields to fetch from the Bubble
  **/
  select: BubbleSelect
  /**
   * Filter, which Bubble to fetch.
  **/
  where: BubbleWhereUniqueInput
}

export type FindOneBubbleSelectArgsOptional = {
  /**
   * Select specific fields to fetch from the Bubble
  **/
  select?: BubbleSelect | null
  /**
   * Filter, which Bubble to fetch.
  **/
  where: BubbleWhereUniqueInput
}

export type FindOneBubbleIncludeArgs = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: BubbleInclude
  /**
   * Filter, which Bubble to fetch.
  **/
  where: BubbleWhereUniqueInput
}

export type FindOneBubbleIncludeArgsOptional = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: BubbleInclude | null
  /**
   * Filter, which Bubble to fetch.
  **/
  where: BubbleWhereUniqueInput
}

export type ExtractFindOneBubbleSelectArgs<S extends undefined | boolean | FindOneBubbleSelectArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends FindOneBubbleSelectArgs
  ? S['select']
  : true

export type ExtractFindOneBubbleIncludeArgs<S extends undefined | boolean | FindOneBubbleIncludeArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends FindOneBubbleIncludeArgs
  ? S['include']
  : true



/**
 * Bubble findMany
 */
export type FindManyBubbleArgs = {
  /**
   * Select specific fields to fetch from the Bubble
  **/
  select?: BubbleSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: BubbleInclude | null
  /**
   * Filter, which Bubbles to fetch.
  **/
  where?: BubbleWhereInput | null
  /**
   * Determine the order of the Bubbles to fetch.
  **/
  orderBy?: BubbleOrderByInput | null
  /**
   * Skip the first \`n\` Bubbles.
  **/
  skip?: number | null
  /**
   * Get all Bubbles that come after the Bubble you provide with the current order.
  **/
  after?: BubbleWhereUniqueInput | null
  /**
   * Get all Bubbles that come before the Bubble you provide with the current order.
  **/
  before?: BubbleWhereUniqueInput | null
  /**
   * Get the first \`n\` Bubbles.
  **/
  first?: number | null
  /**
   * Get the last \`n\` Bubbles.
  **/
  last?: number | null
}

export type FindManyBubbleArgsRequired = {
  /**
   * Select specific fields to fetch from the Bubble
  **/
  select: BubbleSelect
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: BubbleInclude
  /**
   * Filter, which Bubbles to fetch.
  **/
  where?: BubbleWhereInput | null
  /**
   * Determine the order of the Bubbles to fetch.
  **/
  orderBy?: BubbleOrderByInput | null
  /**
   * Skip the first \`n\` Bubbles.
  **/
  skip?: number | null
  /**
   * Get all Bubbles that come after the Bubble you provide with the current order.
  **/
  after?: BubbleWhereUniqueInput | null
  /**
   * Get all Bubbles that come before the Bubble you provide with the current order.
  **/
  before?: BubbleWhereUniqueInput | null
  /**
   * Get the first \`n\` Bubbles.
  **/
  first?: number | null
  /**
   * Get the last \`n\` Bubbles.
  **/
  last?: number | null
}

export type FindManyBubbleSelectArgs = {
  /**
   * Select specific fields to fetch from the Bubble
  **/
  select: BubbleSelect
  /**
   * Filter, which Bubbles to fetch.
  **/
  where?: BubbleWhereInput | null
  /**
   * Determine the order of the Bubbles to fetch.
  **/
  orderBy?: BubbleOrderByInput | null
  /**
   * Skip the first \`n\` Bubbles.
  **/
  skip?: number | null
  /**
   * Get all Bubbles that come after the Bubble you provide with the current order.
  **/
  after?: BubbleWhereUniqueInput | null
  /**
   * Get all Bubbles that come before the Bubble you provide with the current order.
  **/
  before?: BubbleWhereUniqueInput | null
  /**
   * Get the first \`n\` Bubbles.
  **/
  first?: number | null
  /**
   * Get the last \`n\` Bubbles.
  **/
  last?: number | null
}

export type FindManyBubbleSelectArgsOptional = {
  /**
   * Select specific fields to fetch from the Bubble
  **/
  select?: BubbleSelect | null
  /**
   * Filter, which Bubbles to fetch.
  **/
  where?: BubbleWhereInput | null
  /**
   * Determine the order of the Bubbles to fetch.
  **/
  orderBy?: BubbleOrderByInput | null
  /**
   * Skip the first \`n\` Bubbles.
  **/
  skip?: number | null
  /**
   * Get all Bubbles that come after the Bubble you provide with the current order.
  **/
  after?: BubbleWhereUniqueInput | null
  /**
   * Get all Bubbles that come before the Bubble you provide with the current order.
  **/
  before?: BubbleWhereUniqueInput | null
  /**
   * Get the first \`n\` Bubbles.
  **/
  first?: number | null
  /**
   * Get the last \`n\` Bubbles.
  **/
  last?: number | null
}

export type FindManyBubbleIncludeArgs = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: BubbleInclude
  /**
   * Filter, which Bubbles to fetch.
  **/
  where?: BubbleWhereInput | null
  /**
   * Determine the order of the Bubbles to fetch.
  **/
  orderBy?: BubbleOrderByInput | null
  /**
   * Skip the first \`n\` Bubbles.
  **/
  skip?: number | null
  /**
   * Get all Bubbles that come after the Bubble you provide with the current order.
  **/
  after?: BubbleWhereUniqueInput | null
  /**
   * Get all Bubbles that come before the Bubble you provide with the current order.
  **/
  before?: BubbleWhereUniqueInput | null
  /**
   * Get the first \`n\` Bubbles.
  **/
  first?: number | null
  /**
   * Get the last \`n\` Bubbles.
  **/
  last?: number | null
}

export type FindManyBubbleIncludeArgsOptional = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: BubbleInclude | null
  /**
   * Filter, which Bubbles to fetch.
  **/
  where?: BubbleWhereInput | null
  /**
   * Determine the order of the Bubbles to fetch.
  **/
  orderBy?: BubbleOrderByInput | null
  /**
   * Skip the first \`n\` Bubbles.
  **/
  skip?: number | null
  /**
   * Get all Bubbles that come after the Bubble you provide with the current order.
  **/
  after?: BubbleWhereUniqueInput | null
  /**
   * Get all Bubbles that come before the Bubble you provide with the current order.
  **/
  before?: BubbleWhereUniqueInput | null
  /**
   * Get the first \`n\` Bubbles.
  **/
  first?: number | null
  /**
   * Get the last \`n\` Bubbles.
  **/
  last?: number | null
}

export type ExtractFindManyBubbleSelectArgs<S extends undefined | boolean | FindManyBubbleSelectArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends FindManyBubbleSelectArgs
  ? S['select']
  : true

export type ExtractFindManyBubbleIncludeArgs<S extends undefined | boolean | FindManyBubbleIncludeArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends FindManyBubbleIncludeArgs
  ? S['include']
  : true



/**
 * Bubble create
 */
export type BubbleCreateArgs = {
  /**
   * Select specific fields to fetch from the Bubble
  **/
  select?: BubbleSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: BubbleInclude | null
  /**
   * The data needed to create a Bubble.
  **/
  data: BubbleCreateInput
}

export type BubbleCreateArgsRequired = {
  /**
   * Select specific fields to fetch from the Bubble
  **/
  select: BubbleSelect
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: BubbleInclude
  /**
   * The data needed to create a Bubble.
  **/
  data: BubbleCreateInput
}

export type BubbleSelectCreateArgs = {
  /**
   * Select specific fields to fetch from the Bubble
  **/
  select: BubbleSelect
  /**
   * The data needed to create a Bubble.
  **/
  data: BubbleCreateInput
}

export type BubbleSelectCreateArgsOptional = {
  /**
   * Select specific fields to fetch from the Bubble
  **/
  select?: BubbleSelect | null
  /**
   * The data needed to create a Bubble.
  **/
  data: BubbleCreateInput
}

export type BubbleIncludeCreateArgs = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: BubbleInclude
  /**
   * The data needed to create a Bubble.
  **/
  data: BubbleCreateInput
}

export type BubbleIncludeCreateArgsOptional = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: BubbleInclude | null
  /**
   * The data needed to create a Bubble.
  **/
  data: BubbleCreateInput
}

export type ExtractBubbleSelectCreateArgs<S extends undefined | boolean | BubbleSelectCreateArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends BubbleSelectCreateArgs
  ? S['select']
  : true

export type ExtractBubbleIncludeCreateArgs<S extends undefined | boolean | BubbleIncludeCreateArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends BubbleIncludeCreateArgs
  ? S['include']
  : true



/**
 * Bubble update
 */
export type BubbleUpdateArgs = {
  /**
   * Select specific fields to fetch from the Bubble
  **/
  select?: BubbleSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: BubbleInclude | null
  /**
   * The data needed to update a Bubble.
  **/
  data: BubbleUpdateInput
  /**
   * Choose, which Bubble to update.
  **/
  where: BubbleWhereUniqueInput
}

export type BubbleUpdateArgsRequired = {
  /**
   * Select specific fields to fetch from the Bubble
  **/
  select: BubbleSelect
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: BubbleInclude
  /**
   * The data needed to update a Bubble.
  **/
  data: BubbleUpdateInput
  /**
   * Choose, which Bubble to update.
  **/
  where: BubbleWhereUniqueInput
}

export type BubbleSelectUpdateArgs = {
  /**
   * Select specific fields to fetch from the Bubble
  **/
  select: BubbleSelect
  /**
   * The data needed to update a Bubble.
  **/
  data: BubbleUpdateInput
  /**
   * Choose, which Bubble to update.
  **/
  where: BubbleWhereUniqueInput
}

export type BubbleSelectUpdateArgsOptional = {
  /**
   * Select specific fields to fetch from the Bubble
  **/
  select?: BubbleSelect | null
  /**
   * The data needed to update a Bubble.
  **/
  data: BubbleUpdateInput
  /**
   * Choose, which Bubble to update.
  **/
  where: BubbleWhereUniqueInput
}

export type BubbleIncludeUpdateArgs = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: BubbleInclude
  /**
   * The data needed to update a Bubble.
  **/
  data: BubbleUpdateInput
  /**
   * Choose, which Bubble to update.
  **/
  where: BubbleWhereUniqueInput
}

export type BubbleIncludeUpdateArgsOptional = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: BubbleInclude | null
  /**
   * The data needed to update a Bubble.
  **/
  data: BubbleUpdateInput
  /**
   * Choose, which Bubble to update.
  **/
  where: BubbleWhereUniqueInput
}

export type ExtractBubbleSelectUpdateArgs<S extends undefined | boolean | BubbleSelectUpdateArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends BubbleSelectUpdateArgs
  ? S['select']
  : true

export type ExtractBubbleIncludeUpdateArgs<S extends undefined | boolean | BubbleIncludeUpdateArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends BubbleIncludeUpdateArgs
  ? S['include']
  : true



/**
 * Bubble updateMany
 */
export type BubbleUpdateManyArgs = {
  data: BubbleUpdateManyMutationInput
  where?: BubbleWhereInput | null
}


/**
 * Bubble upsert
 */
export type BubbleUpsertArgs = {
  /**
   * Select specific fields to fetch from the Bubble
  **/
  select?: BubbleSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: BubbleInclude | null
  /**
   * The filter to search for the Bubble to update in case it exists.
  **/
  where: BubbleWhereUniqueInput
  /**
   * In case the Bubble found by the \`where\` argument doesn't exist, create a new Bubble with this data.
  **/
  create: BubbleCreateInput
  /**
   * In case the Bubble was found with the provided \`where\` argument, update it with this data.
  **/
  update: BubbleUpdateInput
}

export type BubbleUpsertArgsRequired = {
  /**
   * Select specific fields to fetch from the Bubble
  **/
  select: BubbleSelect
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: BubbleInclude
  /**
   * The filter to search for the Bubble to update in case it exists.
  **/
  where: BubbleWhereUniqueInput
  /**
   * In case the Bubble found by the \`where\` argument doesn't exist, create a new Bubble with this data.
  **/
  create: BubbleCreateInput
  /**
   * In case the Bubble was found with the provided \`where\` argument, update it with this data.
  **/
  update: BubbleUpdateInput
}

export type BubbleSelectUpsertArgs = {
  /**
   * Select specific fields to fetch from the Bubble
  **/
  select: BubbleSelect
  /**
   * The filter to search for the Bubble to update in case it exists.
  **/
  where: BubbleWhereUniqueInput
  /**
   * In case the Bubble found by the \`where\` argument doesn't exist, create a new Bubble with this data.
  **/
  create: BubbleCreateInput
  /**
   * In case the Bubble was found with the provided \`where\` argument, update it with this data.
  **/
  update: BubbleUpdateInput
}

export type BubbleSelectUpsertArgsOptional = {
  /**
   * Select specific fields to fetch from the Bubble
  **/
  select?: BubbleSelect | null
  /**
   * The filter to search for the Bubble to update in case it exists.
  **/
  where: BubbleWhereUniqueInput
  /**
   * In case the Bubble found by the \`where\` argument doesn't exist, create a new Bubble with this data.
  **/
  create: BubbleCreateInput
  /**
   * In case the Bubble was found with the provided \`where\` argument, update it with this data.
  **/
  update: BubbleUpdateInput
}

export type BubbleIncludeUpsertArgs = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: BubbleInclude
  /**
   * The filter to search for the Bubble to update in case it exists.
  **/
  where: BubbleWhereUniqueInput
  /**
   * In case the Bubble found by the \`where\` argument doesn't exist, create a new Bubble with this data.
  **/
  create: BubbleCreateInput
  /**
   * In case the Bubble was found with the provided \`where\` argument, update it with this data.
  **/
  update: BubbleUpdateInput
}

export type BubbleIncludeUpsertArgsOptional = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: BubbleInclude | null
  /**
   * The filter to search for the Bubble to update in case it exists.
  **/
  where: BubbleWhereUniqueInput
  /**
   * In case the Bubble found by the \`where\` argument doesn't exist, create a new Bubble with this data.
  **/
  create: BubbleCreateInput
  /**
   * In case the Bubble was found with the provided \`where\` argument, update it with this data.
  **/
  update: BubbleUpdateInput
}

export type ExtractBubbleSelectUpsertArgs<S extends undefined | boolean | BubbleSelectUpsertArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends BubbleSelectUpsertArgs
  ? S['select']
  : true

export type ExtractBubbleIncludeUpsertArgs<S extends undefined | boolean | BubbleIncludeUpsertArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends BubbleIncludeUpsertArgs
  ? S['include']
  : true



/**
 * Bubble delete
 */
export type BubbleDeleteArgs = {
  /**
   * Select specific fields to fetch from the Bubble
  **/
  select?: BubbleSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: BubbleInclude | null
  /**
   * Filter which Bubble to delete.
  **/
  where: BubbleWhereUniqueInput
}

export type BubbleDeleteArgsRequired = {
  /**
   * Select specific fields to fetch from the Bubble
  **/
  select: BubbleSelect
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: BubbleInclude
  /**
   * Filter which Bubble to delete.
  **/
  where: BubbleWhereUniqueInput
}

export type BubbleSelectDeleteArgs = {
  /**
   * Select specific fields to fetch from the Bubble
  **/
  select: BubbleSelect
  /**
   * Filter which Bubble to delete.
  **/
  where: BubbleWhereUniqueInput
}

export type BubbleSelectDeleteArgsOptional = {
  /**
   * Select specific fields to fetch from the Bubble
  **/
  select?: BubbleSelect | null
  /**
   * Filter which Bubble to delete.
  **/
  where: BubbleWhereUniqueInput
}

export type BubbleIncludeDeleteArgs = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: BubbleInclude
  /**
   * Filter which Bubble to delete.
  **/
  where: BubbleWhereUniqueInput
}

export type BubbleIncludeDeleteArgsOptional = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: BubbleInclude | null
  /**
   * Filter which Bubble to delete.
  **/
  where: BubbleWhereUniqueInput
}

export type ExtractBubbleSelectDeleteArgs<S extends undefined | boolean | BubbleSelectDeleteArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends BubbleSelectDeleteArgs
  ? S['select']
  : true

export type ExtractBubbleIncludeDeleteArgs<S extends undefined | boolean | BubbleIncludeDeleteArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends BubbleIncludeDeleteArgs
  ? S['include']
  : true



/**
 * Bubble deleteMany
 */
export type BubbleDeleteManyArgs = {
  where?: BubbleWhereInput | null
}


/**
 * Bubble without action
 */
export type BubbleArgs = {
  /**
   * Select specific fields to fetch from the Bubble
  **/
  select?: BubbleSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: BubbleInclude | null
}

export type BubbleArgsRequired = {
  /**
   * Select specific fields to fetch from the Bubble
  **/
  select: BubbleSelect
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: BubbleInclude
}

export type BubbleSelectArgs = {
  /**
   * Select specific fields to fetch from the Bubble
  **/
  select: BubbleSelect
}

export type BubbleSelectArgsOptional = {
  /**
   * Select specific fields to fetch from the Bubble
  **/
  select?: BubbleSelect | null
}

export type BubbleIncludeArgs = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: BubbleInclude
}

export type BubbleIncludeArgsOptional = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: BubbleInclude | null
}

export type ExtractBubbleSelectArgs<S extends undefined | boolean | BubbleSelectArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends BubbleSelectArgs
  ? S['select']
  : true

export type ExtractBubbleIncludeArgs<S extends undefined | boolean | BubbleIncludeArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends BubbleIncludeArgs
  ? S['include']
  : true




/**
 * Model User
 */

export type User = {
  id: string
  firstName: string
  lastName: string
}

export type UserScalars = 'id' | 'firstName' | 'lastName'
  

export type UserSelect = {
  id?: boolean
  posts?: boolean | FindManyPostSelectArgsOptional
  firstName?: boolean
  lastName?: boolean
  bubble?: boolean | BubbleSelectArgsOptional
}

export type UserInclude = {
  posts?: boolean | FindManyPostIncludeArgsOptional
  bubble?: boolean | BubbleIncludeArgsOptional
}

type UserDefault = {
  id: true
  firstName: true
  lastName: true
}


export type UserGetSelectPayload<S extends boolean | UserSelect> = S extends true
  ? User
  : S extends UserSelect
  ? {
      [P in CleanupNever<MergeTruthyValues<{}, S>>]: P extends UserScalars
        ? User[P]
        : P extends 'posts'
        ? Array<PostGetSelectPayload<ExtractFindManyPostSelectArgs<S[P]>>>
        : P extends 'bubble'
        ? BubbleGetSelectPayload<ExtractBubbleSelectArgs<S[P]>> | null
        : never
    }
   : never

export type UserGetIncludePayload<S extends boolean | UserInclude> = S extends true
  ? User
  : S extends UserInclude
  ? {
      [P in CleanupNever<MergeTruthyValues<UserDefault, S>>]: P extends UserScalars
        ? User[P]
        : P extends 'posts'
        ? Array<PostGetIncludePayload<ExtractFindManyPostIncludeArgs<S[P]>>>
        : P extends 'bubble'
        ? BubbleGetIncludePayload<ExtractBubbleIncludeArgs<S[P]>> | null
        : never
    }
   : never

export interface UserDelegate {
  /**
   * Find zero or one User.
   * @param {FindOneUserArgs} args - Arguments to find a User
   * @example
   * // Get one User
   * const user = await prisma.user.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneUserArgs>(
    args: Subset<T, FindOneUserArgs>
  ): T extends FindOneUserArgsRequired ? 'Please either choose \`select\` or \`include\`' : T extends FindOneUserSelectArgs ? Promise<UserGetSelectPayload<ExtractFindOneUserSelectArgs<T>> | null>
  : T extends FindOneUserIncludeArgs ? Promise<UserGetIncludePayload<ExtractFindOneUserIncludeArgs<T>> | null> : UserClient<User | null>
  /**
   * Find zero or more Users.
   * @param {FindManyUserArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Users
   * const users = await prisma.user.findMany()
   * 
   * // Get first 10 Users
   * const users = await prisma.user.findMany({ first: 10 })
   * 
   * // Only select the \`id\`
   * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyUserArgs>(
    args?: Subset<T, FindManyUserArgs>
  ): T extends FindManyUserArgsRequired ? 'Please either choose \`select\` or \`include\`' : T extends FindManyUserSelectArgs
  ? Promise<Array<UserGetSelectPayload<ExtractFindManyUserSelectArgs<T>>>> : T extends FindManyUserIncludeArgs
  ? Promise<Array<UserGetIncludePayload<ExtractFindManyUserIncludeArgs<T>>>> : Promise<Array<User>>
  /**
   * Create a User.
   * @param {UserCreateArgs} args - Arguments to create a User.
   * @example
   * // Create one User
   * const user = await prisma.user.create({
   *   data: {
   *     // ... data to create a User
   *   }
   * })
   * 
  **/
  create<T extends UserCreateArgs>(
    args: Subset<T, UserCreateArgs>
  ): T extends UserCreateArgsRequired ? 'Please either choose \`select\` or \`include\`' : T extends UserSelectCreateArgs ? Promise<UserGetSelectPayload<ExtractUserSelectCreateArgs<T>>>
  : T extends UserIncludeCreateArgs ? Promise<UserGetIncludePayload<ExtractUserIncludeCreateArgs<T>>> : UserClient<User>
  /**
   * Delete a User.
   * @param {UserDeleteArgs} args - Arguments to delete one User.
   * @example
   * // Delete one User
   * const user = await prisma.user.delete({
   *   where: {
   *     // ... filter to delete one User
   *   }
   * })
   * 
  **/
  delete<T extends UserDeleteArgs>(
    args: Subset<T, UserDeleteArgs>
  ): T extends UserDeleteArgsRequired ? 'Please either choose \`select\` or \`include\`' : T extends UserSelectDeleteArgs ? Promise<UserGetSelectPayload<ExtractUserSelectDeleteArgs<T>>>
  : T extends UserIncludeDeleteArgs ? Promise<UserGetIncludePayload<ExtractUserIncludeDeleteArgs<T>>> : UserClient<User>
  /**
   * Update one User.
   * @param {UserUpdateArgs} args - Arguments to update one User.
   * @example
   * // Update one User
   * const user = await prisma.user.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provider data here
   *   }
   * })
   * 
  **/
  update<T extends UserUpdateArgs>(
    args: Subset<T, UserUpdateArgs>
  ): T extends UserUpdateArgsRequired ? 'Please either choose \`select\` or \`include\`' : T extends UserSelectUpdateArgs ? Promise<UserGetSelectPayload<ExtractUserSelectUpdateArgs<T>>>
  : T extends UserIncludeUpdateArgs ? Promise<UserGetIncludePayload<ExtractUserIncludeUpdateArgs<T>>> : UserClient<User>
  /**
   * Delete zero or more Users.
   * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
   * @example
   * // Delete a few Users
   * const { count } = await prisma.user.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends UserDeleteManyArgs>(
    args: Subset<T, UserDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Users.
   * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Users
   * const user = await prisma.user.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provider data here
   *   }
   * })
   * 
  **/
  updateMany<T extends UserUpdateManyArgs>(
    args: Subset<T, UserUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one User.
   * @param {UserUpsertArgs} args - Arguments to update or create a User.
   * @example
   * // Update or create a User
   * const user = await prisma.user.upsert({
   *   create: {
   *     // ... data to create a User
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the User we want to update
   *   }
   * })
  **/
  upsert<T extends UserUpsertArgs>(
    args: Subset<T, UserUpsertArgs>
  ): T extends UserUpsertArgsRequired ? 'Please either choose \`select\` or \`include\`' : T extends UserSelectUpsertArgs ? Promise<UserGetSelectPayload<ExtractUserSelectUpsertArgs<T>>>
  : T extends UserIncludeUpsertArgs ? Promise<UserGetIncludePayload<ExtractUserIncludeUpsertArgs<T>>> : UserClient<User>
  /**
   * 
   */
  count(): Promise<number>
}

export declare class UserClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  private _collectTimestamps?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  posts<T extends FindManyPostArgs = {}>(args?: Subset<T, FindManyPostArgs>): T extends FindManyPostArgsRequired ? 'Please either choose \`select\` or \`include\`' : T extends FindManyPostSelectArgs
  ? Promise<Array<PostGetSelectPayload<ExtractFindManyPostSelectArgs<T>>>> : T extends FindManyPostIncludeArgs
  ? Promise<Array<PostGetIncludePayload<ExtractFindManyPostIncludeArgs<T>>>> : Promise<Array<Post>>;

  bubble<T extends BubbleArgs = {}>(args?: Subset<T, BubbleArgs>): T extends FindOneBubbleArgsRequired ? 'Please either choose \`select\` or \`include\`' : T extends BubbleSelectArgs ? Promise<BubbleGetSelectPayload<ExtractBubbleSelectArgs<T>> | null>
  : T extends BubbleIncludeArgs ? Promise<BubbleGetIncludePayload<ExtractBubbleIncludeArgs<T>> | null> : BubbleClient<Bubble | null>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * User findOne
 */
export type FindOneUserArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * Filter, which User to fetch.
  **/
  where: UserWhereUniqueInput
}

export type FindOneUserArgsRequired = {
  /**
   * Select specific fields to fetch from the User
  **/
  select: UserSelect
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: UserInclude
  /**
   * Filter, which User to fetch.
  **/
  where: UserWhereUniqueInput
}

export type FindOneUserSelectArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select: UserSelect
  /**
   * Filter, which User to fetch.
  **/
  where: UserWhereUniqueInput
}

export type FindOneUserSelectArgsOptional = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Filter, which User to fetch.
  **/
  where: UserWhereUniqueInput
}

export type FindOneUserIncludeArgs = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: UserInclude
  /**
   * Filter, which User to fetch.
  **/
  where: UserWhereUniqueInput
}

export type FindOneUserIncludeArgsOptional = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * Filter, which User to fetch.
  **/
  where: UserWhereUniqueInput
}

export type ExtractFindOneUserSelectArgs<S extends undefined | boolean | FindOneUserSelectArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends FindOneUserSelectArgs
  ? S['select']
  : true

export type ExtractFindOneUserIncludeArgs<S extends undefined | boolean | FindOneUserIncludeArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends FindOneUserIncludeArgs
  ? S['include']
  : true



/**
 * User findMany
 */
export type FindManyUserArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * Filter, which Users to fetch.
  **/
  where?: UserWhereInput | null
  /**
   * Determine the order of the Users to fetch.
  **/
  orderBy?: UserOrderByInput | null
  /**
   * Skip the first \`n\` Users.
  **/
  skip?: number | null
  /**
   * Get all Users that come after the User you provide with the current order.
  **/
  after?: UserWhereUniqueInput | null
  /**
   * Get all Users that come before the User you provide with the current order.
  **/
  before?: UserWhereUniqueInput | null
  /**
   * Get the first \`n\` Users.
  **/
  first?: number | null
  /**
   * Get the last \`n\` Users.
  **/
  last?: number | null
}

export type FindManyUserArgsRequired = {
  /**
   * Select specific fields to fetch from the User
  **/
  select: UserSelect
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: UserInclude
  /**
   * Filter, which Users to fetch.
  **/
  where?: UserWhereInput | null
  /**
   * Determine the order of the Users to fetch.
  **/
  orderBy?: UserOrderByInput | null
  /**
   * Skip the first \`n\` Users.
  **/
  skip?: number | null
  /**
   * Get all Users that come after the User you provide with the current order.
  **/
  after?: UserWhereUniqueInput | null
  /**
   * Get all Users that come before the User you provide with the current order.
  **/
  before?: UserWhereUniqueInput | null
  /**
   * Get the first \`n\` Users.
  **/
  first?: number | null
  /**
   * Get the last \`n\` Users.
  **/
  last?: number | null
}

export type FindManyUserSelectArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select: UserSelect
  /**
   * Filter, which Users to fetch.
  **/
  where?: UserWhereInput | null
  /**
   * Determine the order of the Users to fetch.
  **/
  orderBy?: UserOrderByInput | null
  /**
   * Skip the first \`n\` Users.
  **/
  skip?: number | null
  /**
   * Get all Users that come after the User you provide with the current order.
  **/
  after?: UserWhereUniqueInput | null
  /**
   * Get all Users that come before the User you provide with the current order.
  **/
  before?: UserWhereUniqueInput | null
  /**
   * Get the first \`n\` Users.
  **/
  first?: number | null
  /**
   * Get the last \`n\` Users.
  **/
  last?: number | null
}

export type FindManyUserSelectArgsOptional = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Filter, which Users to fetch.
  **/
  where?: UserWhereInput | null
  /**
   * Determine the order of the Users to fetch.
  **/
  orderBy?: UserOrderByInput | null
  /**
   * Skip the first \`n\` Users.
  **/
  skip?: number | null
  /**
   * Get all Users that come after the User you provide with the current order.
  **/
  after?: UserWhereUniqueInput | null
  /**
   * Get all Users that come before the User you provide with the current order.
  **/
  before?: UserWhereUniqueInput | null
  /**
   * Get the first \`n\` Users.
  **/
  first?: number | null
  /**
   * Get the last \`n\` Users.
  **/
  last?: number | null
}

export type FindManyUserIncludeArgs = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: UserInclude
  /**
   * Filter, which Users to fetch.
  **/
  where?: UserWhereInput | null
  /**
   * Determine the order of the Users to fetch.
  **/
  orderBy?: UserOrderByInput | null
  /**
   * Skip the first \`n\` Users.
  **/
  skip?: number | null
  /**
   * Get all Users that come after the User you provide with the current order.
  **/
  after?: UserWhereUniqueInput | null
  /**
   * Get all Users that come before the User you provide with the current order.
  **/
  before?: UserWhereUniqueInput | null
  /**
   * Get the first \`n\` Users.
  **/
  first?: number | null
  /**
   * Get the last \`n\` Users.
  **/
  last?: number | null
}

export type FindManyUserIncludeArgsOptional = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * Filter, which Users to fetch.
  **/
  where?: UserWhereInput | null
  /**
   * Determine the order of the Users to fetch.
  **/
  orderBy?: UserOrderByInput | null
  /**
   * Skip the first \`n\` Users.
  **/
  skip?: number | null
  /**
   * Get all Users that come after the User you provide with the current order.
  **/
  after?: UserWhereUniqueInput | null
  /**
   * Get all Users that come before the User you provide with the current order.
  **/
  before?: UserWhereUniqueInput | null
  /**
   * Get the first \`n\` Users.
  **/
  first?: number | null
  /**
   * Get the last \`n\` Users.
  **/
  last?: number | null
}

export type ExtractFindManyUserSelectArgs<S extends undefined | boolean | FindManyUserSelectArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends FindManyUserSelectArgs
  ? S['select']
  : true

export type ExtractFindManyUserIncludeArgs<S extends undefined | boolean | FindManyUserIncludeArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends FindManyUserIncludeArgs
  ? S['include']
  : true



/**
 * User create
 */
export type UserCreateArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * The data needed to create a User.
  **/
  data: UserCreateInput
}

export type UserCreateArgsRequired = {
  /**
   * Select specific fields to fetch from the User
  **/
  select: UserSelect
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: UserInclude
  /**
   * The data needed to create a User.
  **/
  data: UserCreateInput
}

export type UserSelectCreateArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select: UserSelect
  /**
   * The data needed to create a User.
  **/
  data: UserCreateInput
}

export type UserSelectCreateArgsOptional = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * The data needed to create a User.
  **/
  data: UserCreateInput
}

export type UserIncludeCreateArgs = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: UserInclude
  /**
   * The data needed to create a User.
  **/
  data: UserCreateInput
}

export type UserIncludeCreateArgsOptional = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * The data needed to create a User.
  **/
  data: UserCreateInput
}

export type ExtractUserSelectCreateArgs<S extends undefined | boolean | UserSelectCreateArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends UserSelectCreateArgs
  ? S['select']
  : true

export type ExtractUserIncludeCreateArgs<S extends undefined | boolean | UserIncludeCreateArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends UserIncludeCreateArgs
  ? S['include']
  : true



/**
 * User update
 */
export type UserUpdateArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * The data needed to update a User.
  **/
  data: UserUpdateInput
  /**
   * Choose, which User to update.
  **/
  where: UserWhereUniqueInput
}

export type UserUpdateArgsRequired = {
  /**
   * Select specific fields to fetch from the User
  **/
  select: UserSelect
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: UserInclude
  /**
   * The data needed to update a User.
  **/
  data: UserUpdateInput
  /**
   * Choose, which User to update.
  **/
  where: UserWhereUniqueInput
}

export type UserSelectUpdateArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select: UserSelect
  /**
   * The data needed to update a User.
  **/
  data: UserUpdateInput
  /**
   * Choose, which User to update.
  **/
  where: UserWhereUniqueInput
}

export type UserSelectUpdateArgsOptional = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * The data needed to update a User.
  **/
  data: UserUpdateInput
  /**
   * Choose, which User to update.
  **/
  where: UserWhereUniqueInput
}

export type UserIncludeUpdateArgs = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: UserInclude
  /**
   * The data needed to update a User.
  **/
  data: UserUpdateInput
  /**
   * Choose, which User to update.
  **/
  where: UserWhereUniqueInput
}

export type UserIncludeUpdateArgsOptional = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * The data needed to update a User.
  **/
  data: UserUpdateInput
  /**
   * Choose, which User to update.
  **/
  where: UserWhereUniqueInput
}

export type ExtractUserSelectUpdateArgs<S extends undefined | boolean | UserSelectUpdateArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends UserSelectUpdateArgs
  ? S['select']
  : true

export type ExtractUserIncludeUpdateArgs<S extends undefined | boolean | UserIncludeUpdateArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends UserIncludeUpdateArgs
  ? S['include']
  : true



/**
 * User updateMany
 */
export type UserUpdateManyArgs = {
  data: UserUpdateManyMutationInput
  where?: UserWhereInput | null
}


/**
 * User upsert
 */
export type UserUpsertArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * The filter to search for the User to update in case it exists.
  **/
  where: UserWhereUniqueInput
  /**
   * In case the User found by the \`where\` argument doesn't exist, create a new User with this data.
  **/
  create: UserCreateInput
  /**
   * In case the User was found with the provided \`where\` argument, update it with this data.
  **/
  update: UserUpdateInput
}

export type UserUpsertArgsRequired = {
  /**
   * Select specific fields to fetch from the User
  **/
  select: UserSelect
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: UserInclude
  /**
   * The filter to search for the User to update in case it exists.
  **/
  where: UserWhereUniqueInput
  /**
   * In case the User found by the \`where\` argument doesn't exist, create a new User with this data.
  **/
  create: UserCreateInput
  /**
   * In case the User was found with the provided \`where\` argument, update it with this data.
  **/
  update: UserUpdateInput
}

export type UserSelectUpsertArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select: UserSelect
  /**
   * The filter to search for the User to update in case it exists.
  **/
  where: UserWhereUniqueInput
  /**
   * In case the User found by the \`where\` argument doesn't exist, create a new User with this data.
  **/
  create: UserCreateInput
  /**
   * In case the User was found with the provided \`where\` argument, update it with this data.
  **/
  update: UserUpdateInput
}

export type UserSelectUpsertArgsOptional = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * The filter to search for the User to update in case it exists.
  **/
  where: UserWhereUniqueInput
  /**
   * In case the User found by the \`where\` argument doesn't exist, create a new User with this data.
  **/
  create: UserCreateInput
  /**
   * In case the User was found with the provided \`where\` argument, update it with this data.
  **/
  update: UserUpdateInput
}

export type UserIncludeUpsertArgs = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: UserInclude
  /**
   * The filter to search for the User to update in case it exists.
  **/
  where: UserWhereUniqueInput
  /**
   * In case the User found by the \`where\` argument doesn't exist, create a new User with this data.
  **/
  create: UserCreateInput
  /**
   * In case the User was found with the provided \`where\` argument, update it with this data.
  **/
  update: UserUpdateInput
}

export type UserIncludeUpsertArgsOptional = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * The filter to search for the User to update in case it exists.
  **/
  where: UserWhereUniqueInput
  /**
   * In case the User found by the \`where\` argument doesn't exist, create a new User with this data.
  **/
  create: UserCreateInput
  /**
   * In case the User was found with the provided \`where\` argument, update it with this data.
  **/
  update: UserUpdateInput
}

export type ExtractUserSelectUpsertArgs<S extends undefined | boolean | UserSelectUpsertArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends UserSelectUpsertArgs
  ? S['select']
  : true

export type ExtractUserIncludeUpsertArgs<S extends undefined | boolean | UserIncludeUpsertArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends UserIncludeUpsertArgs
  ? S['include']
  : true



/**
 * User delete
 */
export type UserDeleteArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * Filter which User to delete.
  **/
  where: UserWhereUniqueInput
}

export type UserDeleteArgsRequired = {
  /**
   * Select specific fields to fetch from the User
  **/
  select: UserSelect
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: UserInclude
  /**
   * Filter which User to delete.
  **/
  where: UserWhereUniqueInput
}

export type UserSelectDeleteArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select: UserSelect
  /**
   * Filter which User to delete.
  **/
  where: UserWhereUniqueInput
}

export type UserSelectDeleteArgsOptional = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Filter which User to delete.
  **/
  where: UserWhereUniqueInput
}

export type UserIncludeDeleteArgs = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: UserInclude
  /**
   * Filter which User to delete.
  **/
  where: UserWhereUniqueInput
}

export type UserIncludeDeleteArgsOptional = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * Filter which User to delete.
  **/
  where: UserWhereUniqueInput
}

export type ExtractUserSelectDeleteArgs<S extends undefined | boolean | UserSelectDeleteArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends UserSelectDeleteArgs
  ? S['select']
  : true

export type ExtractUserIncludeDeleteArgs<S extends undefined | boolean | UserIncludeDeleteArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends UserIncludeDeleteArgs
  ? S['include']
  : true



/**
 * User deleteMany
 */
export type UserDeleteManyArgs = {
  where?: UserWhereInput | null
}


/**
 * User without action
 */
export type UserArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
}

export type UserArgsRequired = {
  /**
   * Select specific fields to fetch from the User
  **/
  select: UserSelect
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: UserInclude
}

export type UserSelectArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select: UserSelect
}

export type UserSelectArgsOptional = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
}

export type UserIncludeArgs = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: UserInclude
}

export type UserIncludeArgsOptional = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
}

export type ExtractUserSelectArgs<S extends undefined | boolean | UserSelectArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends UserSelectArgs
  ? S['select']
  : true

export type ExtractUserIncludeArgs<S extends undefined | boolean | UserIncludeArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends UserIncludeArgs
  ? S['include']
  : true




/**
 * Model Post
 */

export type Post = {
  id: number
  rating: number
  status: PostStatus
}

export type PostScalars = 'id' | 'rating' | 'status'
  

export type PostSelect = {
  id?: boolean
  authors?: boolean | FindManyUserSelectArgsOptional
  rating?: boolean
  status?: boolean
}

export type PostInclude = {
  authors?: boolean | FindManyUserIncludeArgsOptional
}

type PostDefault = {
  id: true
  rating: true
  status: true
}


export type PostGetSelectPayload<S extends boolean | PostSelect> = S extends true
  ? Post
  : S extends PostSelect
  ? {
      [P in CleanupNever<MergeTruthyValues<{}, S>>]: P extends PostScalars
        ? Post[P]
        : P extends 'authors'
        ? Array<UserGetSelectPayload<ExtractFindManyUserSelectArgs<S[P]>>>
        : never
    }
   : never

export type PostGetIncludePayload<S extends boolean | PostInclude> = S extends true
  ? Post
  : S extends PostInclude
  ? {
      [P in CleanupNever<MergeTruthyValues<PostDefault, S>>]: P extends PostScalars
        ? Post[P]
        : P extends 'authors'
        ? Array<UserGetIncludePayload<ExtractFindManyUserIncludeArgs<S[P]>>>
        : never
    }
   : never

export interface PostDelegate {
  /**
   * Find zero or one Post.
   * @param {FindOnePostArgs} args - Arguments to find a Post
   * @example
   * // Get one Post
   * const post = await prisma.post.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOnePostArgs>(
    args: Subset<T, FindOnePostArgs>
  ): T extends FindOnePostArgsRequired ? 'Please either choose \`select\` or \`include\`' : T extends FindOnePostSelectArgs ? Promise<PostGetSelectPayload<ExtractFindOnePostSelectArgs<T>> | null>
  : T extends FindOnePostIncludeArgs ? Promise<PostGetIncludePayload<ExtractFindOnePostIncludeArgs<T>> | null> : PostClient<Post | null>
  /**
   * Find zero or more Posts.
   * @param {FindManyPostArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Posts
   * const posts = await prisma.post.findMany()
   * 
   * // Get first 10 Posts
   * const posts = await prisma.post.findMany({ first: 10 })
   * 
   * // Only select the \`id\`
   * const postWithIdOnly = await prisma.post.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyPostArgs>(
    args?: Subset<T, FindManyPostArgs>
  ): T extends FindManyPostArgsRequired ? 'Please either choose \`select\` or \`include\`' : T extends FindManyPostSelectArgs
  ? Promise<Array<PostGetSelectPayload<ExtractFindManyPostSelectArgs<T>>>> : T extends FindManyPostIncludeArgs
  ? Promise<Array<PostGetIncludePayload<ExtractFindManyPostIncludeArgs<T>>>> : Promise<Array<Post>>
  /**
   * Create a Post.
   * @param {PostCreateArgs} args - Arguments to create a Post.
   * @example
   * // Create one Post
   * const user = await prisma.post.create({
   *   data: {
   *     // ... data to create a Post
   *   }
   * })
   * 
  **/
  create<T extends PostCreateArgs>(
    args: Subset<T, PostCreateArgs>
  ): T extends PostCreateArgsRequired ? 'Please either choose \`select\` or \`include\`' : T extends PostSelectCreateArgs ? Promise<PostGetSelectPayload<ExtractPostSelectCreateArgs<T>>>
  : T extends PostIncludeCreateArgs ? Promise<PostGetIncludePayload<ExtractPostIncludeCreateArgs<T>>> : PostClient<Post>
  /**
   * Delete a Post.
   * @param {PostDeleteArgs} args - Arguments to delete one Post.
   * @example
   * // Delete one Post
   * const user = await prisma.post.delete({
   *   where: {
   *     // ... filter to delete one Post
   *   }
   * })
   * 
  **/
  delete<T extends PostDeleteArgs>(
    args: Subset<T, PostDeleteArgs>
  ): T extends PostDeleteArgsRequired ? 'Please either choose \`select\` or \`include\`' : T extends PostSelectDeleteArgs ? Promise<PostGetSelectPayload<ExtractPostSelectDeleteArgs<T>>>
  : T extends PostIncludeDeleteArgs ? Promise<PostGetIncludePayload<ExtractPostIncludeDeleteArgs<T>>> : PostClient<Post>
  /**
   * Update one Post.
   * @param {PostUpdateArgs} args - Arguments to update one Post.
   * @example
   * // Update one Post
   * const post = await prisma.post.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provider data here
   *   }
   * })
   * 
  **/
  update<T extends PostUpdateArgs>(
    args: Subset<T, PostUpdateArgs>
  ): T extends PostUpdateArgsRequired ? 'Please either choose \`select\` or \`include\`' : T extends PostSelectUpdateArgs ? Promise<PostGetSelectPayload<ExtractPostSelectUpdateArgs<T>>>
  : T extends PostIncludeUpdateArgs ? Promise<PostGetIncludePayload<ExtractPostIncludeUpdateArgs<T>>> : PostClient<Post>
  /**
   * Delete zero or more Posts.
   * @param {PostDeleteManyArgs} args - Arguments to filter Posts to delete.
   * @example
   * // Delete a few Posts
   * const { count } = await prisma.post.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends PostDeleteManyArgs>(
    args: Subset<T, PostDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Posts.
   * @param {PostUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Posts
   * const post = await prisma.post.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provider data here
   *   }
   * })
   * 
  **/
  updateMany<T extends PostUpdateManyArgs>(
    args: Subset<T, PostUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Post.
   * @param {PostUpsertArgs} args - Arguments to update or create a Post.
   * @example
   * // Update or create a Post
   * const post = await prisma.post.upsert({
   *   create: {
   *     // ... data to create a Post
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Post we want to update
   *   }
   * })
  **/
  upsert<T extends PostUpsertArgs>(
    args: Subset<T, PostUpsertArgs>
  ): T extends PostUpsertArgsRequired ? 'Please either choose \`select\` or \`include\`' : T extends PostSelectUpsertArgs ? Promise<PostGetSelectPayload<ExtractPostSelectUpsertArgs<T>>>
  : T extends PostIncludeUpsertArgs ? Promise<PostGetIncludePayload<ExtractPostIncludeUpsertArgs<T>>> : PostClient<Post>
  /**
   * 
   */
  count(): Promise<number>
}

export declare class PostClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  private _collectTimestamps?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  authors<T extends FindManyUserArgs = {}>(args?: Subset<T, FindManyUserArgs>): T extends FindManyUserArgsRequired ? 'Please either choose \`select\` or \`include\`' : T extends FindManyUserSelectArgs
  ? Promise<Array<UserGetSelectPayload<ExtractFindManyUserSelectArgs<T>>>> : T extends FindManyUserIncludeArgs
  ? Promise<Array<UserGetIncludePayload<ExtractFindManyUserIncludeArgs<T>>>> : Promise<Array<User>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Post findOne
 */
export type FindOnePostArgs = {
  /**
   * Select specific fields to fetch from the Post
  **/
  select?: PostSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: PostInclude | null
  /**
   * Filter, which Post to fetch.
  **/
  where: PostWhereUniqueInput
}

export type FindOnePostArgsRequired = {
  /**
   * Select specific fields to fetch from the Post
  **/
  select: PostSelect
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: PostInclude
  /**
   * Filter, which Post to fetch.
  **/
  where: PostWhereUniqueInput
}

export type FindOnePostSelectArgs = {
  /**
   * Select specific fields to fetch from the Post
  **/
  select: PostSelect
  /**
   * Filter, which Post to fetch.
  **/
  where: PostWhereUniqueInput
}

export type FindOnePostSelectArgsOptional = {
  /**
   * Select specific fields to fetch from the Post
  **/
  select?: PostSelect | null
  /**
   * Filter, which Post to fetch.
  **/
  where: PostWhereUniqueInput
}

export type FindOnePostIncludeArgs = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: PostInclude
  /**
   * Filter, which Post to fetch.
  **/
  where: PostWhereUniqueInput
}

export type FindOnePostIncludeArgsOptional = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: PostInclude | null
  /**
   * Filter, which Post to fetch.
  **/
  where: PostWhereUniqueInput
}

export type ExtractFindOnePostSelectArgs<S extends undefined | boolean | FindOnePostSelectArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends FindOnePostSelectArgs
  ? S['select']
  : true

export type ExtractFindOnePostIncludeArgs<S extends undefined | boolean | FindOnePostIncludeArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends FindOnePostIncludeArgs
  ? S['include']
  : true



/**
 * Post findMany
 */
export type FindManyPostArgs = {
  /**
   * Select specific fields to fetch from the Post
  **/
  select?: PostSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: PostInclude | null
  /**
   * Filter, which Posts to fetch.
  **/
  where?: PostWhereInput | null
  /**
   * Determine the order of the Posts to fetch.
  **/
  orderBy?: PostOrderByInput | null
  /**
   * Skip the first \`n\` Posts.
  **/
  skip?: number | null
  /**
   * Get all Posts that come after the Post you provide with the current order.
  **/
  after?: PostWhereUniqueInput | null
  /**
   * Get all Posts that come before the Post you provide with the current order.
  **/
  before?: PostWhereUniqueInput | null
  /**
   * Get the first \`n\` Posts.
  **/
  first?: number | null
  /**
   * Get the last \`n\` Posts.
  **/
  last?: number | null
}

export type FindManyPostArgsRequired = {
  /**
   * Select specific fields to fetch from the Post
  **/
  select: PostSelect
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: PostInclude
  /**
   * Filter, which Posts to fetch.
  **/
  where?: PostWhereInput | null
  /**
   * Determine the order of the Posts to fetch.
  **/
  orderBy?: PostOrderByInput | null
  /**
   * Skip the first \`n\` Posts.
  **/
  skip?: number | null
  /**
   * Get all Posts that come after the Post you provide with the current order.
  **/
  after?: PostWhereUniqueInput | null
  /**
   * Get all Posts that come before the Post you provide with the current order.
  **/
  before?: PostWhereUniqueInput | null
  /**
   * Get the first \`n\` Posts.
  **/
  first?: number | null
  /**
   * Get the last \`n\` Posts.
  **/
  last?: number | null
}

export type FindManyPostSelectArgs = {
  /**
   * Select specific fields to fetch from the Post
  **/
  select: PostSelect
  /**
   * Filter, which Posts to fetch.
  **/
  where?: PostWhereInput | null
  /**
   * Determine the order of the Posts to fetch.
  **/
  orderBy?: PostOrderByInput | null
  /**
   * Skip the first \`n\` Posts.
  **/
  skip?: number | null
  /**
   * Get all Posts that come after the Post you provide with the current order.
  **/
  after?: PostWhereUniqueInput | null
  /**
   * Get all Posts that come before the Post you provide with the current order.
  **/
  before?: PostWhereUniqueInput | null
  /**
   * Get the first \`n\` Posts.
  **/
  first?: number | null
  /**
   * Get the last \`n\` Posts.
  **/
  last?: number | null
}

export type FindManyPostSelectArgsOptional = {
  /**
   * Select specific fields to fetch from the Post
  **/
  select?: PostSelect | null
  /**
   * Filter, which Posts to fetch.
  **/
  where?: PostWhereInput | null
  /**
   * Determine the order of the Posts to fetch.
  **/
  orderBy?: PostOrderByInput | null
  /**
   * Skip the first \`n\` Posts.
  **/
  skip?: number | null
  /**
   * Get all Posts that come after the Post you provide with the current order.
  **/
  after?: PostWhereUniqueInput | null
  /**
   * Get all Posts that come before the Post you provide with the current order.
  **/
  before?: PostWhereUniqueInput | null
  /**
   * Get the first \`n\` Posts.
  **/
  first?: number | null
  /**
   * Get the last \`n\` Posts.
  **/
  last?: number | null
}

export type FindManyPostIncludeArgs = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: PostInclude
  /**
   * Filter, which Posts to fetch.
  **/
  where?: PostWhereInput | null
  /**
   * Determine the order of the Posts to fetch.
  **/
  orderBy?: PostOrderByInput | null
  /**
   * Skip the first \`n\` Posts.
  **/
  skip?: number | null
  /**
   * Get all Posts that come after the Post you provide with the current order.
  **/
  after?: PostWhereUniqueInput | null
  /**
   * Get all Posts that come before the Post you provide with the current order.
  **/
  before?: PostWhereUniqueInput | null
  /**
   * Get the first \`n\` Posts.
  **/
  first?: number | null
  /**
   * Get the last \`n\` Posts.
  **/
  last?: number | null
}

export type FindManyPostIncludeArgsOptional = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: PostInclude | null
  /**
   * Filter, which Posts to fetch.
  **/
  where?: PostWhereInput | null
  /**
   * Determine the order of the Posts to fetch.
  **/
  orderBy?: PostOrderByInput | null
  /**
   * Skip the first \`n\` Posts.
  **/
  skip?: number | null
  /**
   * Get all Posts that come after the Post you provide with the current order.
  **/
  after?: PostWhereUniqueInput | null
  /**
   * Get all Posts that come before the Post you provide with the current order.
  **/
  before?: PostWhereUniqueInput | null
  /**
   * Get the first \`n\` Posts.
  **/
  first?: number | null
  /**
   * Get the last \`n\` Posts.
  **/
  last?: number | null
}

export type ExtractFindManyPostSelectArgs<S extends undefined | boolean | FindManyPostSelectArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends FindManyPostSelectArgs
  ? S['select']
  : true

export type ExtractFindManyPostIncludeArgs<S extends undefined | boolean | FindManyPostIncludeArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends FindManyPostIncludeArgs
  ? S['include']
  : true



/**
 * Post create
 */
export type PostCreateArgs = {
  /**
   * Select specific fields to fetch from the Post
  **/
  select?: PostSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: PostInclude | null
  /**
   * The data needed to create a Post.
  **/
  data: PostCreateInput
}

export type PostCreateArgsRequired = {
  /**
   * Select specific fields to fetch from the Post
  **/
  select: PostSelect
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: PostInclude
  /**
   * The data needed to create a Post.
  **/
  data: PostCreateInput
}

export type PostSelectCreateArgs = {
  /**
   * Select specific fields to fetch from the Post
  **/
  select: PostSelect
  /**
   * The data needed to create a Post.
  **/
  data: PostCreateInput
}

export type PostSelectCreateArgsOptional = {
  /**
   * Select specific fields to fetch from the Post
  **/
  select?: PostSelect | null
  /**
   * The data needed to create a Post.
  **/
  data: PostCreateInput
}

export type PostIncludeCreateArgs = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: PostInclude
  /**
   * The data needed to create a Post.
  **/
  data: PostCreateInput
}

export type PostIncludeCreateArgsOptional = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: PostInclude | null
  /**
   * The data needed to create a Post.
  **/
  data: PostCreateInput
}

export type ExtractPostSelectCreateArgs<S extends undefined | boolean | PostSelectCreateArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends PostSelectCreateArgs
  ? S['select']
  : true

export type ExtractPostIncludeCreateArgs<S extends undefined | boolean | PostIncludeCreateArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends PostIncludeCreateArgs
  ? S['include']
  : true



/**
 * Post update
 */
export type PostUpdateArgs = {
  /**
   * Select specific fields to fetch from the Post
  **/
  select?: PostSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: PostInclude | null
  /**
   * The data needed to update a Post.
  **/
  data: PostUpdateInput
  /**
   * Choose, which Post to update.
  **/
  where: PostWhereUniqueInput
}

export type PostUpdateArgsRequired = {
  /**
   * Select specific fields to fetch from the Post
  **/
  select: PostSelect
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: PostInclude
  /**
   * The data needed to update a Post.
  **/
  data: PostUpdateInput
  /**
   * Choose, which Post to update.
  **/
  where: PostWhereUniqueInput
}

export type PostSelectUpdateArgs = {
  /**
   * Select specific fields to fetch from the Post
  **/
  select: PostSelect
  /**
   * The data needed to update a Post.
  **/
  data: PostUpdateInput
  /**
   * Choose, which Post to update.
  **/
  where: PostWhereUniqueInput
}

export type PostSelectUpdateArgsOptional = {
  /**
   * Select specific fields to fetch from the Post
  **/
  select?: PostSelect | null
  /**
   * The data needed to update a Post.
  **/
  data: PostUpdateInput
  /**
   * Choose, which Post to update.
  **/
  where: PostWhereUniqueInput
}

export type PostIncludeUpdateArgs = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: PostInclude
  /**
   * The data needed to update a Post.
  **/
  data: PostUpdateInput
  /**
   * Choose, which Post to update.
  **/
  where: PostWhereUniqueInput
}

export type PostIncludeUpdateArgsOptional = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: PostInclude | null
  /**
   * The data needed to update a Post.
  **/
  data: PostUpdateInput
  /**
   * Choose, which Post to update.
  **/
  where: PostWhereUniqueInput
}

export type ExtractPostSelectUpdateArgs<S extends undefined | boolean | PostSelectUpdateArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends PostSelectUpdateArgs
  ? S['select']
  : true

export type ExtractPostIncludeUpdateArgs<S extends undefined | boolean | PostIncludeUpdateArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends PostIncludeUpdateArgs
  ? S['include']
  : true



/**
 * Post updateMany
 */
export type PostUpdateManyArgs = {
  data: PostUpdateManyMutationInput
  where?: PostWhereInput | null
}


/**
 * Post upsert
 */
export type PostUpsertArgs = {
  /**
   * Select specific fields to fetch from the Post
  **/
  select?: PostSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: PostInclude | null
  /**
   * The filter to search for the Post to update in case it exists.
  **/
  where: PostWhereUniqueInput
  /**
   * In case the Post found by the \`where\` argument doesn't exist, create a new Post with this data.
  **/
  create: PostCreateInput
  /**
   * In case the Post was found with the provided \`where\` argument, update it with this data.
  **/
  update: PostUpdateInput
}

export type PostUpsertArgsRequired = {
  /**
   * Select specific fields to fetch from the Post
  **/
  select: PostSelect
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: PostInclude
  /**
   * The filter to search for the Post to update in case it exists.
  **/
  where: PostWhereUniqueInput
  /**
   * In case the Post found by the \`where\` argument doesn't exist, create a new Post with this data.
  **/
  create: PostCreateInput
  /**
   * In case the Post was found with the provided \`where\` argument, update it with this data.
  **/
  update: PostUpdateInput
}

export type PostSelectUpsertArgs = {
  /**
   * Select specific fields to fetch from the Post
  **/
  select: PostSelect
  /**
   * The filter to search for the Post to update in case it exists.
  **/
  where: PostWhereUniqueInput
  /**
   * In case the Post found by the \`where\` argument doesn't exist, create a new Post with this data.
  **/
  create: PostCreateInput
  /**
   * In case the Post was found with the provided \`where\` argument, update it with this data.
  **/
  update: PostUpdateInput
}

export type PostSelectUpsertArgsOptional = {
  /**
   * Select specific fields to fetch from the Post
  **/
  select?: PostSelect | null
  /**
   * The filter to search for the Post to update in case it exists.
  **/
  where: PostWhereUniqueInput
  /**
   * In case the Post found by the \`where\` argument doesn't exist, create a new Post with this data.
  **/
  create: PostCreateInput
  /**
   * In case the Post was found with the provided \`where\` argument, update it with this data.
  **/
  update: PostUpdateInput
}

export type PostIncludeUpsertArgs = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: PostInclude
  /**
   * The filter to search for the Post to update in case it exists.
  **/
  where: PostWhereUniqueInput
  /**
   * In case the Post found by the \`where\` argument doesn't exist, create a new Post with this data.
  **/
  create: PostCreateInput
  /**
   * In case the Post was found with the provided \`where\` argument, update it with this data.
  **/
  update: PostUpdateInput
}

export type PostIncludeUpsertArgsOptional = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: PostInclude | null
  /**
   * The filter to search for the Post to update in case it exists.
  **/
  where: PostWhereUniqueInput
  /**
   * In case the Post found by the \`where\` argument doesn't exist, create a new Post with this data.
  **/
  create: PostCreateInput
  /**
   * In case the Post was found with the provided \`where\` argument, update it with this data.
  **/
  update: PostUpdateInput
}

export type ExtractPostSelectUpsertArgs<S extends undefined | boolean | PostSelectUpsertArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends PostSelectUpsertArgs
  ? S['select']
  : true

export type ExtractPostIncludeUpsertArgs<S extends undefined | boolean | PostIncludeUpsertArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends PostIncludeUpsertArgs
  ? S['include']
  : true



/**
 * Post delete
 */
export type PostDeleteArgs = {
  /**
   * Select specific fields to fetch from the Post
  **/
  select?: PostSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: PostInclude | null
  /**
   * Filter which Post to delete.
  **/
  where: PostWhereUniqueInput
}

export type PostDeleteArgsRequired = {
  /**
   * Select specific fields to fetch from the Post
  **/
  select: PostSelect
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: PostInclude
  /**
   * Filter which Post to delete.
  **/
  where: PostWhereUniqueInput
}

export type PostSelectDeleteArgs = {
  /**
   * Select specific fields to fetch from the Post
  **/
  select: PostSelect
  /**
   * Filter which Post to delete.
  **/
  where: PostWhereUniqueInput
}

export type PostSelectDeleteArgsOptional = {
  /**
   * Select specific fields to fetch from the Post
  **/
  select?: PostSelect | null
  /**
   * Filter which Post to delete.
  **/
  where: PostWhereUniqueInput
}

export type PostIncludeDeleteArgs = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: PostInclude
  /**
   * Filter which Post to delete.
  **/
  where: PostWhereUniqueInput
}

export type PostIncludeDeleteArgsOptional = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: PostInclude | null
  /**
   * Filter which Post to delete.
  **/
  where: PostWhereUniqueInput
}

export type ExtractPostSelectDeleteArgs<S extends undefined | boolean | PostSelectDeleteArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends PostSelectDeleteArgs
  ? S['select']
  : true

export type ExtractPostIncludeDeleteArgs<S extends undefined | boolean | PostIncludeDeleteArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends PostIncludeDeleteArgs
  ? S['include']
  : true



/**
 * Post deleteMany
 */
export type PostDeleteManyArgs = {
  where?: PostWhereInput | null
}


/**
 * Post without action
 */
export type PostArgs = {
  /**
   * Select specific fields to fetch from the Post
  **/
  select?: PostSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: PostInclude | null
}

export type PostArgsRequired = {
  /**
   * Select specific fields to fetch from the Post
  **/
  select: PostSelect
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: PostInclude
}

export type PostSelectArgs = {
  /**
   * Select specific fields to fetch from the Post
  **/
  select: PostSelect
}

export type PostSelectArgsOptional = {
  /**
   * Select specific fields to fetch from the Post
  **/
  select?: PostSelect | null
}

export type PostIncludeArgs = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: PostInclude
}

export type PostIncludeArgsOptional = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: PostInclude | null
}

export type ExtractPostSelectArgs<S extends undefined | boolean | PostSelectArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends PostSelectArgs
  ? S['select']
  : true

export type ExtractPostIncludeArgs<S extends undefined | boolean | PostIncludeArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends PostIncludeArgs
  ? S['include']
  : true




/**
 * Deep Input Types
 */


export type PostWhereInput = {
  id?: number | IntFilter | null
  authors?: UserFilter | null
  rating?: number | FloatFilter | null
  status?: PostStatus | PostStatusFilter | null
  AND?: Enumerable<PostWhereInput> | null
  OR?: Enumerable<PostWhereInput> | null
  NOT?: Enumerable<PostWhereInput> | null
}

export type UserWhereInput = {
  id?: string | StringFilter | null
  posts?: PostFilter | null
  firstName?: string | StringFilter | null
  lastName?: string | StringFilter | null
  AND?: Enumerable<UserWhereInput> | null
  OR?: Enumerable<UserWhereInput> | null
  NOT?: Enumerable<UserWhereInput> | null
  bubble?: BubbleWhereInput | null
}

export type BubbleWhereInput = {
  id?: string | UUIDFilter | null
  createdAt?: Date | string | DateTimeFilter | null
  members?: UserFilter | null
  AND?: Enumerable<BubbleWhereInput> | null
  OR?: Enumerable<BubbleWhereInput> | null
  NOT?: Enumerable<BubbleWhereInput> | null
}

export type IdCompoundUniqueInput = {
  id: string
}

export type BubbleWhereUniqueInput = {
  id?: string | null
}

export type UserWhereUniqueInput = {
  id?: string | null
}

export type PostWhereUniqueInput = {
  id?: number | null
}

export type PostCreateWithoutAuthorsInput = {
  rating: number
  status: PostStatus
}

export type PostCreateManyWithoutAuthorsInput = {
  create?: Enumerable<PostCreateWithoutAuthorsInput> | null
  connect?: Enumerable<PostWhereUniqueInput> | null
}

export type UserCreateWithoutBubbleInput = {
  id?: string | null
  firstName: string
  lastName: string
  posts?: PostCreateManyWithoutAuthorsInput | null
}

export type UserCreateManyWithoutBubbleInput = {
  create?: Enumerable<UserCreateWithoutBubbleInput> | null
  connect?: Enumerable<UserWhereUniqueInput> | null
}

export type BubbleCreateInput = {
  id?: string | null
  createdAt?: Date | string | null
  members?: UserCreateManyWithoutBubbleInput | null
}

export type PostUpdateWithoutAuthorsDataInput = {
  id?: number | null
  rating?: number | null
  status?: PostStatus | null
}

export type PostUpdateWithWhereUniqueWithoutAuthorsInput = {
  where: PostWhereUniqueInput
  data: PostUpdateWithoutAuthorsDataInput
}

export type PostScalarWhereInput = {
  id?: number | IntFilter | null
  authors?: UserFilter | null
  rating?: number | FloatFilter | null
  status?: PostStatus | PostStatusFilter | null
  AND?: Enumerable<PostScalarWhereInput> | null
  OR?: Enumerable<PostScalarWhereInput> | null
  NOT?: Enumerable<PostScalarWhereInput> | null
}

export type PostUpdateManyDataInput = {
  id?: number | null
  rating?: number | null
  status?: PostStatus | null
}

export type PostUpdateManyWithWhereNestedInput = {
  where: PostScalarWhereInput
  data: PostUpdateManyDataInput
}

export type PostUpsertWithWhereUniqueWithoutAuthorsInput = {
  where: PostWhereUniqueInput
  update: PostUpdateWithoutAuthorsDataInput
  create: PostCreateWithoutAuthorsInput
}

export type PostUpdateManyWithoutAuthorsInput = {
  create?: Enumerable<PostCreateWithoutAuthorsInput> | null
  connect?: Enumerable<PostWhereUniqueInput> | null
  set?: Enumerable<PostWhereUniqueInput> | null
  disconnect?: Enumerable<PostWhereUniqueInput> | null
  delete?: Enumerable<PostWhereUniqueInput> | null
  update?: Enumerable<PostUpdateWithWhereUniqueWithoutAuthorsInput> | null
  updateMany?: Enumerable<PostUpdateManyWithWhereNestedInput> | null
  deleteMany?: Enumerable<PostScalarWhereInput> | null
  upsert?: Enumerable<PostUpsertWithWhereUniqueWithoutAuthorsInput> | null
}

export type UserUpdateWithoutBubbleDataInput = {
  id?: string | null
  firstName?: string | null
  lastName?: string | null
  posts?: PostUpdateManyWithoutAuthorsInput | null
}

export type UserUpdateWithWhereUniqueWithoutBubbleInput = {
  where: UserWhereUniqueInput
  data: UserUpdateWithoutBubbleDataInput
}

export type UserScalarWhereInput = {
  id?: string | StringFilter | null
  posts?: PostFilter | null
  firstName?: string | StringFilter | null
  lastName?: string | StringFilter | null
  AND?: Enumerable<UserScalarWhereInput> | null
  OR?: Enumerable<UserScalarWhereInput> | null
  NOT?: Enumerable<UserScalarWhereInput> | null
}

export type UserUpdateManyDataInput = {
  id?: string | null
  firstName?: string | null
  lastName?: string | null
}

export type UserUpdateManyWithWhereNestedInput = {
  where: UserScalarWhereInput
  data: UserUpdateManyDataInput
}

export type UserUpsertWithWhereUniqueWithoutBubbleInput = {
  where: UserWhereUniqueInput
  update: UserUpdateWithoutBubbleDataInput
  create: UserCreateWithoutBubbleInput
}

export type UserUpdateManyWithoutBubbleInput = {
  create?: Enumerable<UserCreateWithoutBubbleInput> | null
  connect?: Enumerable<UserWhereUniqueInput> | null
  set?: Enumerable<UserWhereUniqueInput> | null
  disconnect?: Enumerable<UserWhereUniqueInput> | null
  delete?: Enumerable<UserWhereUniqueInput> | null
  update?: Enumerable<UserUpdateWithWhereUniqueWithoutBubbleInput> | null
  updateMany?: Enumerable<UserUpdateManyWithWhereNestedInput> | null
  deleteMany?: Enumerable<UserScalarWhereInput> | null
  upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutBubbleInput> | null
}

export type BubbleUpdateInput = {
  id?: string | null
  createdAt?: Date | string | null
  members?: UserUpdateManyWithoutBubbleInput | null
}

export type BubbleUpdateManyMutationInput = {
  id?: string | null
  createdAt?: Date | string | null
}

export type BubbleCreateWithoutMembersInput = {
  id?: string | null
  createdAt?: Date | string | null
}

export type BubbleCreateOneWithoutMembersInput = {
  create?: BubbleCreateWithoutMembersInput | null
  connect?: BubbleWhereUniqueInput | null
}

export type UserCreateInput = {
  id?: string | null
  firstName: string
  lastName: string
  posts?: PostCreateManyWithoutAuthorsInput | null
  bubble?: BubbleCreateOneWithoutMembersInput | null
}

export type BubbleUpdateWithoutMembersDataInput = {
  id?: string | null
  createdAt?: Date | string | null
}

export type BubbleUpsertWithoutMembersInput = {
  update: BubbleUpdateWithoutMembersDataInput
  create: BubbleCreateWithoutMembersInput
}

export type BubbleUpdateOneWithoutMembersInput = {
  create?: BubbleCreateWithoutMembersInput | null
  connect?: BubbleWhereUniqueInput | null
  disconnect?: boolean | null
  delete?: boolean | null
  update?: BubbleUpdateWithoutMembersDataInput | null
  upsert?: BubbleUpsertWithoutMembersInput | null
}

export type UserUpdateInput = {
  id?: string | null
  firstName?: string | null
  lastName?: string | null
  posts?: PostUpdateManyWithoutAuthorsInput | null
  bubble?: BubbleUpdateOneWithoutMembersInput | null
}

export type UserUpdateManyMutationInput = {
  id?: string | null
  firstName?: string | null
  lastName?: string | null
}

export type UserCreateWithoutPostsInput = {
  id?: string | null
  firstName: string
  lastName: string
  bubble?: BubbleCreateOneWithoutMembersInput | null
}

export type UserCreateManyWithoutPostsInput = {
  create?: Enumerable<UserCreateWithoutPostsInput> | null
  connect?: Enumerable<UserWhereUniqueInput> | null
}

export type PostCreateInput = {
  rating: number
  status: PostStatus
  authors?: UserCreateManyWithoutPostsInput | null
}

export type UserUpdateWithoutPostsDataInput = {
  id?: string | null
  firstName?: string | null
  lastName?: string | null
  bubble?: BubbleUpdateOneWithoutMembersInput | null
}

export type UserUpdateWithWhereUniqueWithoutPostsInput = {
  where: UserWhereUniqueInput
  data: UserUpdateWithoutPostsDataInput
}

export type UserUpsertWithWhereUniqueWithoutPostsInput = {
  where: UserWhereUniqueInput
  update: UserUpdateWithoutPostsDataInput
  create: UserCreateWithoutPostsInput
}

export type UserUpdateManyWithoutPostsInput = {
  create?: Enumerable<UserCreateWithoutPostsInput> | null
  connect?: Enumerable<UserWhereUniqueInput> | null
  set?: Enumerable<UserWhereUniqueInput> | null
  disconnect?: Enumerable<UserWhereUniqueInput> | null
  delete?: Enumerable<UserWhereUniqueInput> | null
  update?: Enumerable<UserUpdateWithWhereUniqueWithoutPostsInput> | null
  updateMany?: Enumerable<UserUpdateManyWithWhereNestedInput> | null
  deleteMany?: Enumerable<UserScalarWhereInput> | null
  upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutPostsInput> | null
}

export type PostUpdateInput = {
  id?: number | null
  rating?: number | null
  status?: PostStatus | null
  authors?: UserUpdateManyWithoutPostsInput | null
}

export type PostUpdateManyMutationInput = {
  id?: number | null
  rating?: number | null
  status?: PostStatus | null
}

export type IntFilter = {
  equals?: number | null
  not?: number | IntFilter | null
  in?: Enumerable<number> | null
  notIn?: Enumerable<number> | null
  lt?: number | null
  lte?: number | null
  gt?: number | null
  gte?: number | null
}

export type UserFilter = {
  every?: UserWhereInput | null
  some?: UserWhereInput | null
  none?: UserWhereInput | null
}

export type FloatFilter = {
  equals?: number | null
  not?: number | FloatFilter | null
  in?: Enumerable<number> | null
  notIn?: Enumerable<number> | null
  lt?: number | null
  lte?: number | null
  gt?: number | null
  gte?: number | null
}

export type PostStatusFilter = {
  equals?: PostStatus | null
  not?: PostStatus | PostStatusFilter | null
  in?: Enumerable<PostStatus> | null
  notIn?: Enumerable<PostStatus> | null
}

export type StringFilter = {
  equals?: string | null
  not?: string | StringFilter | null
  in?: Enumerable<string> | null
  notIn?: Enumerable<string> | null
  lt?: string | null
  lte?: string | null
  gt?: string | null
  gte?: string | null
  contains?: string | null
  startsWith?: string | null
  endsWith?: string | null
}

export type PostFilter = {
  every?: PostWhereInput | null
  some?: PostWhereInput | null
  none?: PostWhereInput | null
}

export type UUIDFilter = {
  equals?: string | null
  not?: string | UUIDFilter | null
  in?: Enumerable<string> | null
  notIn?: Enumerable<string> | null
  lt?: string | null
  lte?: string | null
  gt?: string | null
  gte?: string | null
  contains?: string | null
  startsWith?: string | null
  endsWith?: string | null
}

export type DateTimeFilter = {
  equals?: Date | string | null
  not?: Date | string | DateTimeFilter | null
  in?: Enumerable<Date | string> | null
  notIn?: Enumerable<Date | string> | null
  lt?: Date | string | null
  lte?: Date | string | null
  gt?: Date | string | null
  gte?: Date | string | null
}

export type BubbleOrderByInput = {
  id?: OrderByArg | null
  createdAt?: OrderByArg | null
}

export type UserOrderByInput = {
  id?: OrderByArg | null
  firstName?: OrderByArg | null
  lastName?: OrderByArg | null
}

export type PostOrderByInput = {
  id?: OrderByArg | null
  rating?: OrderByArg | null
  status?: OrderByArg | null
}

/**
 * Batch Payload for updateMany & deleteMany
 */

export type BatchPayload = {
  count: number
}

/**
 * DMMF
 */
export declare const dmmf: DMMF.Document;
export {};
"
`;

exports[`integrates together: prisma client dmmf 1`] = `
Object {
  "datamodel": Object {
    "enums": Array [
      Object {
        "dbName": null,
        "name": "PostStatus",
        "values": Array [
          "DRAFT",
          "PUBLISHED",
        ],
      },
    ],
    "models": Array [
      Object {
        "dbName": null,
        "fields": Array [
          Object {
            "dbNames": Array [],
            "default": Object {
              "args": Array [],
              "name": "uuid",
              "returnType": "String",
            },
            "isGenerated": false,
            "isId": true,
            "isList": false,
            "isRequired": true,
            "isUnique": false,
            "isUpdatedAt": false,
            "kind": "scalar",
            "name": "id",
            "type": "String",
          },
          Object {
            "dbNames": Array [],
            "default": Object {
              "args": Array [],
              "name": "now",
              "returnType": "DateTime",
            },
            "isGenerated": false,
            "isId": false,
            "isList": false,
            "isRequired": true,
            "isUnique": false,
            "isUpdatedAt": false,
            "kind": "scalar",
            "name": "createdAt",
            "type": "DateTime",
          },
          Object {
            "dbNames": Array [],
            "isGenerated": false,
            "isId": false,
            "isList": true,
            "isRequired": false,
            "isUnique": false,
            "isUpdatedAt": false,
            "kind": "object",
            "name": "members",
            "relationName": "BubbleToUser",
            "relationOnDelete": "NONE",
            "relationToFields": Array [],
            "type": "User",
          },
        ],
        "idFields": Array [],
        "isEmbedded": false,
        "isGenerated": false,
        "name": "Bubble",
        "uniqueFields": Array [],
      },
      Object {
        "dbName": null,
        "fields": Array [
          Object {
            "dbNames": Array [],
            "default": Object {
              "args": Array [],
              "name": "cuid",
              "returnType": "String",
            },
            "isGenerated": false,
            "isId": true,
            "isList": false,
            "isRequired": true,
            "isUnique": false,
            "isUpdatedAt": false,
            "kind": "scalar",
            "name": "id",
            "type": "String",
          },
          Object {
            "dbNames": Array [],
            "isGenerated": false,
            "isId": false,
            "isList": true,
            "isRequired": false,
            "isUnique": false,
            "isUpdatedAt": false,
            "kind": "object",
            "name": "posts",
            "relationName": "PostToUser",
            "relationOnDelete": "NONE",
            "relationToFields": Array [
              "id",
            ],
            "type": "Post",
          },
          Object {
            "dbNames": Array [],
            "isGenerated": false,
            "isId": false,
            "isList": false,
            "isRequired": true,
            "isUnique": false,
            "isUpdatedAt": false,
            "kind": "scalar",
            "name": "firstName",
            "type": "String",
          },
          Object {
            "dbNames": Array [],
            "isGenerated": false,
            "isId": false,
            "isList": false,
            "isRequired": true,
            "isUnique": false,
            "isUpdatedAt": false,
            "kind": "scalar",
            "name": "lastName",
            "type": "String",
          },
          Object {
            "dbNames": Array [],
            "isGenerated": true,
            "isId": false,
            "isList": false,
            "isRequired": false,
            "isUnique": false,
            "isUpdatedAt": false,
            "kind": "object",
            "name": "bubble",
            "relationName": "BubbleToUser",
            "relationOnDelete": "NONE",
            "relationToFields": Array [
              "id",
            ],
            "type": "Bubble",
          },
        ],
        "idFields": Array [],
        "isEmbedded": false,
        "isGenerated": false,
        "name": "User",
        "uniqueFields": Array [],
      },
      Object {
        "dbName": null,
        "fields": Array [
          Object {
            "dbNames": Array [],
            "default": Object {
              "args": Array [],
              "name": "autoincrement",
              "returnType": "Int",
            },
            "isGenerated": false,
            "isId": true,
            "isList": false,
            "isRequired": true,
            "isUnique": false,
            "isUpdatedAt": false,
            "kind": "scalar",
            "name": "id",
            "type": "Int",
          },
          Object {
            "dbNames": Array [],
            "isGenerated": false,
            "isId": false,
            "isList": true,
            "isRequired": false,
            "isUnique": false,
            "isUpdatedAt": false,
            "kind": "object",
            "name": "authors",
            "relationName": "PostToUser",
            "relationOnDelete": "NONE",
            "relationToFields": Array [
              "id",
            ],
            "type": "User",
          },
          Object {
            "dbNames": Array [],
            "isGenerated": false,
            "isId": false,
            "isList": false,
            "isRequired": true,
            "isUnique": false,
            "isUpdatedAt": false,
            "kind": "scalar",
            "name": "rating",
            "type": "Float",
          },
          Object {
            "dbNames": Array [],
            "isGenerated": false,
            "isId": false,
            "isList": false,
            "isRequired": true,
            "isUnique": false,
            "isUpdatedAt": false,
            "kind": "enum",
            "name": "status",
            "type": "PostStatus",
          },
        ],
        "idFields": Array [],
        "isEmbedded": false,
        "isGenerated": false,
        "name": "Post",
        "uniqueFields": Array [],
      },
    ],
  },
  "mappings": Array [
    Object {
      "aggregate": "aggregateBubble",
      "create": "createOneBubble",
      "delete": "deleteOneBubble",
      "deleteMany": "deleteManyBubble",
      "findMany": "findManyBubble",
      "findOne": "findOneBubble",
      "model": "Bubble",
      "plural": "bubbles",
      "update": "updateOneBubble",
      "updateMany": "updateManyBubble",
      "upsert": "upsertOneBubble",
    },
    Object {
      "aggregate": "aggregateUser",
      "create": "createOneUser",
      "delete": "deleteOneUser",
      "deleteMany": "deleteManyUser",
      "findMany": "findManyUser",
      "findOne": "findOneUser",
      "model": "User",
      "plural": "users",
      "update": "updateOneUser",
      "updateMany": "updateManyUser",
      "upsert": "upsertOneUser",
    },
    Object {
      "aggregate": "aggregatePost",
      "create": "createOnePost",
      "delete": "deleteOnePost",
      "deleteMany": "deleteManyPost",
      "findMany": "findManyPost",
      "findOne": "findOnePost",
      "model": "Post",
      "plural": "posts",
      "update": "updateOnePost",
      "updateMany": "updateManyPost",
      "upsert": "upsertOnePost",
    },
  ],
  "schema": Object {
    "enums": Array [
      Object {
        "name": "OrderByArg",
        "values": Array [
          "asc",
          "desc",
        ],
      },
      Object {
        "name": "PostStatus",
        "values": Array [
          "DRAFT",
          "PUBLISHED",
        ],
      },
    ],
    "inputTypes": Array [
      Object {
        "atLeastOne": false,
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Int",
              },
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "IntFilter",
              },
            ],
            "isRelationFilter": false,
            "name": "id",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "UserFilter",
              },
            ],
            "isRelationFilter": false,
            "name": "authors",
            "nullEqualsUndefined": true,
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Float",
              },
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "FloatFilter",
              },
            ],
            "isRelationFilter": false,
            "name": "rating",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "enum",
                "type": "PostStatus",
              },
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "PostStatusFilter",
              },
            ],
            "isRelationFilter": false,
            "name": "status",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "PostWhereInput",
              },
            ],
            "isRelationFilter": true,
            "name": "AND",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "PostWhereInput",
              },
            ],
            "isRelationFilter": true,
            "name": "OR",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "PostWhereInput",
              },
            ],
            "isRelationFilter": true,
            "name": "NOT",
          },
        ],
        "isWhereType": true,
        "name": "PostWhereInput",
      },
      Object {
        "atLeastOne": false,
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "StringFilter",
              },
            ],
            "isRelationFilter": false,
            "name": "id",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "PostFilter",
              },
            ],
            "isRelationFilter": false,
            "name": "posts",
            "nullEqualsUndefined": true,
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "StringFilter",
              },
            ],
            "isRelationFilter": false,
            "name": "firstName",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "StringFilter",
              },
            ],
            "isRelationFilter": false,
            "name": "lastName",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserWhereInput",
              },
            ],
            "isRelationFilter": true,
            "name": "AND",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserWhereInput",
              },
            ],
            "isRelationFilter": true,
            "name": "OR",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserWhereInput",
              },
            ],
            "isRelationFilter": true,
            "name": "NOT",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "BubbleWhereInput",
              },
            ],
            "isRelationFilter": true,
            "name": "bubble",
          },
        ],
        "isWhereType": true,
        "name": "UserWhereInput",
      },
      Object {
        "atLeastOne": false,
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "UUID",
              },
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "UUIDFilter",
              },
            ],
            "isRelationFilter": false,
            "name": "id",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "DateTime",
              },
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "DateTimeFilter",
              },
            ],
            "isRelationFilter": false,
            "name": "createdAt",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "UserFilter",
              },
            ],
            "isRelationFilter": false,
            "name": "members",
            "nullEqualsUndefined": true,
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "BubbleWhereInput",
              },
            ],
            "isRelationFilter": true,
            "name": "AND",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "BubbleWhereInput",
              },
            ],
            "isRelationFilter": true,
            "name": "OR",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "BubbleWhereInput",
              },
            ],
            "isRelationFilter": true,
            "name": "NOT",
          },
        ],
        "isWhereType": true,
        "name": "BubbleWhereInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "id",
          },
        ],
        "name": "IdCompoundUniqueInput",
      },
      Object {
        "atLeastOne": true,
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "id",
          },
        ],
        "name": "BubbleWhereUniqueInput",
      },
      Object {
        "atLeastOne": true,
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "id",
          },
        ],
        "name": "UserWhereUniqueInput",
      },
      Object {
        "atLeastOne": true,
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Int",
              },
            ],
            "name": "id",
          },
        ],
        "name": "PostWhereUniqueInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "scalar",
                "type": "Float",
              },
            ],
            "name": "rating",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "enum",
                "type": "PostStatus",
              },
            ],
            "name": "status",
          },
        ],
        "name": "PostCreateWithoutAuthorsInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "PostCreateWithoutAuthorsInput",
              },
            ],
            "name": "create",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "PostWhereUniqueInput",
              },
            ],
            "name": "connect",
          },
        ],
        "name": "PostCreateManyWithoutAuthorsInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "id",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "firstName",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "lastName",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "PostCreateManyWithoutAuthorsInput",
              },
            ],
            "name": "posts",
          },
        ],
        "name": "UserCreateWithoutBubbleInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserCreateWithoutBubbleInput",
              },
            ],
            "name": "create",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserWhereUniqueInput",
              },
            ],
            "name": "connect",
          },
        ],
        "name": "UserCreateManyWithoutBubbleInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "id",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "DateTime",
              },
            ],
            "name": "createdAt",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "UserCreateManyWithoutBubbleInput",
              },
            ],
            "name": "members",
          },
        ],
        "name": "BubbleCreateInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Int",
              },
            ],
            "name": "id",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Float",
              },
            ],
            "name": "rating",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "enum",
                "type": "PostStatus",
              },
            ],
            "name": "status",
          },
        ],
        "name": "PostUpdateWithoutAuthorsDataInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "object",
                "type": "PostWhereUniqueInput",
              },
            ],
            "name": "where",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "object",
                "type": "PostUpdateWithoutAuthorsDataInput",
              },
            ],
            "name": "data",
          },
        ],
        "name": "PostUpdateWithWhereUniqueWithoutAuthorsInput",
      },
      Object {
        "atLeastOne": false,
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Int",
              },
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "IntFilter",
              },
            ],
            "isRelationFilter": false,
            "name": "id",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "UserFilter",
              },
            ],
            "isRelationFilter": false,
            "name": "authors",
            "nullEqualsUndefined": true,
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Float",
              },
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "FloatFilter",
              },
            ],
            "isRelationFilter": false,
            "name": "rating",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "enum",
                "type": "PostStatus",
              },
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "PostStatusFilter",
              },
            ],
            "isRelationFilter": false,
            "name": "status",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "PostScalarWhereInput",
              },
            ],
            "isRelationFilter": true,
            "name": "AND",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "PostScalarWhereInput",
              },
            ],
            "isRelationFilter": true,
            "name": "OR",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "PostScalarWhereInput",
              },
            ],
            "isRelationFilter": true,
            "name": "NOT",
          },
        ],
        "isWhereType": true,
        "name": "PostScalarWhereInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Int",
              },
            ],
            "name": "id",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Float",
              },
            ],
            "name": "rating",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "enum",
                "type": "PostStatus",
              },
            ],
            "name": "status",
          },
        ],
        "name": "PostUpdateManyDataInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "object",
                "type": "PostScalarWhereInput",
              },
            ],
            "name": "where",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "object",
                "type": "PostUpdateManyDataInput",
              },
            ],
            "name": "data",
          },
        ],
        "name": "PostUpdateManyWithWhereNestedInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "object",
                "type": "PostWhereUniqueInput",
              },
            ],
            "name": "where",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "object",
                "type": "PostUpdateWithoutAuthorsDataInput",
              },
            ],
            "name": "update",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "object",
                "type": "PostCreateWithoutAuthorsInput",
              },
            ],
            "name": "create",
          },
        ],
        "name": "PostUpsertWithWhereUniqueWithoutAuthorsInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "PostCreateWithoutAuthorsInput",
              },
            ],
            "name": "create",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "PostWhereUniqueInput",
              },
            ],
            "name": "connect",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "PostWhereUniqueInput",
              },
            ],
            "name": "set",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "PostWhereUniqueInput",
              },
            ],
            "name": "disconnect",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "PostWhereUniqueInput",
              },
            ],
            "name": "delete",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "PostUpdateWithWhereUniqueWithoutAuthorsInput",
              },
            ],
            "name": "update",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "PostUpdateManyWithWhereNestedInput",
              },
            ],
            "name": "updateMany",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "PostScalarWhereInput",
              },
            ],
            "name": "deleteMany",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "PostUpsertWithWhereUniqueWithoutAuthorsInput",
              },
            ],
            "name": "upsert",
          },
        ],
        "name": "PostUpdateManyWithoutAuthorsInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "id",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "firstName",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "lastName",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "PostUpdateManyWithoutAuthorsInput",
              },
            ],
            "name": "posts",
          },
        ],
        "name": "UserUpdateWithoutBubbleDataInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "object",
                "type": "UserWhereUniqueInput",
              },
            ],
            "name": "where",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "object",
                "type": "UserUpdateWithoutBubbleDataInput",
              },
            ],
            "name": "data",
          },
        ],
        "name": "UserUpdateWithWhereUniqueWithoutBubbleInput",
      },
      Object {
        "atLeastOne": false,
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "StringFilter",
              },
            ],
            "isRelationFilter": false,
            "name": "id",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "PostFilter",
              },
            ],
            "isRelationFilter": false,
            "name": "posts",
            "nullEqualsUndefined": true,
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "StringFilter",
              },
            ],
            "isRelationFilter": false,
            "name": "firstName",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "StringFilter",
              },
            ],
            "isRelationFilter": false,
            "name": "lastName",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserScalarWhereInput",
              },
            ],
            "isRelationFilter": true,
            "name": "AND",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserScalarWhereInput",
              },
            ],
            "isRelationFilter": true,
            "name": "OR",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserScalarWhereInput",
              },
            ],
            "isRelationFilter": true,
            "name": "NOT",
          },
        ],
        "isWhereType": true,
        "name": "UserScalarWhereInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "id",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "firstName",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "lastName",
          },
        ],
        "name": "UserUpdateManyDataInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "object",
                "type": "UserScalarWhereInput",
              },
            ],
            "name": "where",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "object",
                "type": "UserUpdateManyDataInput",
              },
            ],
            "name": "data",
          },
        ],
        "name": "UserUpdateManyWithWhereNestedInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "object",
                "type": "UserWhereUniqueInput",
              },
            ],
            "name": "where",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "object",
                "type": "UserUpdateWithoutBubbleDataInput",
              },
            ],
            "name": "update",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "object",
                "type": "UserCreateWithoutBubbleInput",
              },
            ],
            "name": "create",
          },
        ],
        "name": "UserUpsertWithWhereUniqueWithoutBubbleInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserCreateWithoutBubbleInput",
              },
            ],
            "name": "create",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserWhereUniqueInput",
              },
            ],
            "name": "connect",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserWhereUniqueInput",
              },
            ],
            "name": "set",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserWhereUniqueInput",
              },
            ],
            "name": "disconnect",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserWhereUniqueInput",
              },
            ],
            "name": "delete",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserUpdateWithWhereUniqueWithoutBubbleInput",
              },
            ],
            "name": "update",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserUpdateManyWithWhereNestedInput",
              },
            ],
            "name": "updateMany",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserScalarWhereInput",
              },
            ],
            "name": "deleteMany",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserUpsertWithWhereUniqueWithoutBubbleInput",
              },
            ],
            "name": "upsert",
          },
        ],
        "name": "UserUpdateManyWithoutBubbleInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "id",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "DateTime",
              },
            ],
            "name": "createdAt",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "UserUpdateManyWithoutBubbleInput",
              },
            ],
            "name": "members",
          },
        ],
        "name": "BubbleUpdateInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "id",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "DateTime",
              },
            ],
            "name": "createdAt",
          },
        ],
        "name": "BubbleUpdateManyMutationInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "id",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "DateTime",
              },
            ],
            "name": "createdAt",
          },
        ],
        "name": "BubbleCreateWithoutMembersInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "BubbleCreateWithoutMembersInput",
              },
            ],
            "name": "create",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "BubbleWhereUniqueInput",
              },
            ],
            "name": "connect",
          },
        ],
        "name": "BubbleCreateOneWithoutMembersInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "id",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "firstName",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "lastName",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "PostCreateManyWithoutAuthorsInput",
              },
            ],
            "name": "posts",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "BubbleCreateOneWithoutMembersInput",
              },
            ],
            "name": "bubble",
          },
        ],
        "name": "UserCreateInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "id",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "DateTime",
              },
            ],
            "name": "createdAt",
          },
        ],
        "name": "BubbleUpdateWithoutMembersDataInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "object",
                "type": "BubbleUpdateWithoutMembersDataInput",
              },
            ],
            "name": "update",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "object",
                "type": "BubbleCreateWithoutMembersInput",
              },
            ],
            "name": "create",
          },
        ],
        "name": "BubbleUpsertWithoutMembersInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "BubbleCreateWithoutMembersInput",
              },
            ],
            "name": "create",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "BubbleWhereUniqueInput",
              },
            ],
            "name": "connect",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Boolean",
              },
            ],
            "name": "disconnect",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Boolean",
              },
            ],
            "name": "delete",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "BubbleUpdateWithoutMembersDataInput",
              },
            ],
            "name": "update",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "BubbleUpsertWithoutMembersInput",
              },
            ],
            "name": "upsert",
          },
        ],
        "name": "BubbleUpdateOneWithoutMembersInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "id",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "firstName",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "lastName",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "PostUpdateManyWithoutAuthorsInput",
              },
            ],
            "name": "posts",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "BubbleUpdateOneWithoutMembersInput",
              },
            ],
            "name": "bubble",
          },
        ],
        "name": "UserUpdateInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "id",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "firstName",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "lastName",
          },
        ],
        "name": "UserUpdateManyMutationInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "id",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "firstName",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "lastName",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "BubbleCreateOneWithoutMembersInput",
              },
            ],
            "name": "bubble",
          },
        ],
        "name": "UserCreateWithoutPostsInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserCreateWithoutPostsInput",
              },
            ],
            "name": "create",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserWhereUniqueInput",
              },
            ],
            "name": "connect",
          },
        ],
        "name": "UserCreateManyWithoutPostsInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "scalar",
                "type": "Float",
              },
            ],
            "name": "rating",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "enum",
                "type": "PostStatus",
              },
            ],
            "name": "status",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "UserCreateManyWithoutPostsInput",
              },
            ],
            "name": "authors",
          },
        ],
        "name": "PostCreateInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "id",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "firstName",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "name": "lastName",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "BubbleUpdateOneWithoutMembersInput",
              },
            ],
            "name": "bubble",
          },
        ],
        "name": "UserUpdateWithoutPostsDataInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "object",
                "type": "UserWhereUniqueInput",
              },
            ],
            "name": "where",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "object",
                "type": "UserUpdateWithoutPostsDataInput",
              },
            ],
            "name": "data",
          },
        ],
        "name": "UserUpdateWithWhereUniqueWithoutPostsInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "object",
                "type": "UserWhereUniqueInput",
              },
            ],
            "name": "where",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "object",
                "type": "UserUpdateWithoutPostsDataInput",
              },
            ],
            "name": "update",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": true,
                "kind": "object",
                "type": "UserCreateWithoutPostsInput",
              },
            ],
            "name": "create",
          },
        ],
        "name": "UserUpsertWithWhereUniqueWithoutPostsInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserCreateWithoutPostsInput",
              },
            ],
            "name": "create",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserWhereUniqueInput",
              },
            ],
            "name": "connect",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserWhereUniqueInput",
              },
            ],
            "name": "set",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserWhereUniqueInput",
              },
            ],
            "name": "disconnect",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserWhereUniqueInput",
              },
            ],
            "name": "delete",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserUpdateWithWhereUniqueWithoutPostsInput",
              },
            ],
            "name": "update",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserUpdateManyWithWhereNestedInput",
              },
            ],
            "name": "updateMany",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserScalarWhereInput",
              },
            ],
            "name": "deleteMany",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "object",
                "type": "UserUpsertWithWhereUniqueWithoutPostsInput",
              },
            ],
            "name": "upsert",
          },
        ],
        "name": "UserUpdateManyWithoutPostsInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Int",
              },
            ],
            "name": "id",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Float",
              },
            ],
            "name": "rating",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "enum",
                "type": "PostStatus",
              },
            ],
            "name": "status",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "UserUpdateManyWithoutPostsInput",
              },
            ],
            "name": "authors",
          },
        ],
        "name": "PostUpdateInput",
      },
      Object {
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Int",
              },
            ],
            "name": "id",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Float",
              },
            ],
            "name": "rating",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "enum",
                "type": "PostStatus",
              },
            ],
            "name": "status",
          },
        ],
        "name": "PostUpdateManyMutationInput",
      },
      Object {
        "atLeastOne": false,
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Int",
              },
            ],
            "isRelationFilter": false,
            "name": "equals",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Int",
              },
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "IntFilter",
              },
            ],
            "isRelationFilter": false,
            "name": "not",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "scalar",
                "type": "Int",
              },
            ],
            "isRelationFilter": false,
            "name": "in",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "scalar",
                "type": "Int",
              },
            ],
            "isRelationFilter": false,
            "name": "notIn",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Int",
              },
            ],
            "isRelationFilter": false,
            "name": "lt",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Int",
              },
            ],
            "isRelationFilter": false,
            "name": "lte",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Int",
              },
            ],
            "isRelationFilter": false,
            "name": "gt",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Int",
              },
            ],
            "isRelationFilter": false,
            "name": "gte",
          },
        ],
        "name": "IntFilter",
      },
      Object {
        "atLeastOne": false,
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "UserWhereInput",
              },
            ],
            "isRelationFilter": true,
            "name": "every",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "UserWhereInput",
              },
            ],
            "isRelationFilter": true,
            "name": "some",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "UserWhereInput",
              },
            ],
            "isRelationFilter": true,
            "name": "none",
          },
        ],
        "name": "UserFilter",
      },
      Object {
        "atLeastOne": false,
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Float",
              },
            ],
            "isRelationFilter": false,
            "name": "equals",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Float",
              },
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "FloatFilter",
              },
            ],
            "isRelationFilter": false,
            "name": "not",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "scalar",
                "type": "Float",
              },
            ],
            "isRelationFilter": false,
            "name": "in",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "scalar",
                "type": "Float",
              },
            ],
            "isRelationFilter": false,
            "name": "notIn",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Float",
              },
            ],
            "isRelationFilter": false,
            "name": "lt",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Float",
              },
            ],
            "isRelationFilter": false,
            "name": "lte",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Float",
              },
            ],
            "isRelationFilter": false,
            "name": "gt",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "Float",
              },
            ],
            "isRelationFilter": false,
            "name": "gte",
          },
        ],
        "name": "FloatFilter",
      },
      Object {
        "atLeastOne": false,
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "enum",
                "type": "PostStatus",
              },
            ],
            "isRelationFilter": false,
            "name": "equals",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "enum",
                "type": "PostStatus",
              },
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "enum",
                "type": "PostStatusFilter",
              },
            ],
            "isRelationFilter": false,
            "name": "not",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "enum",
                "type": "PostStatus",
              },
            ],
            "isRelationFilter": false,
            "name": "in",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "enum",
                "type": "PostStatus",
              },
            ],
            "isRelationFilter": false,
            "name": "notIn",
          },
        ],
        "name": "PostStatusFilter",
      },
      Object {
        "atLeastOne": false,
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "isRelationFilter": false,
            "name": "equals",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "StringFilter",
              },
            ],
            "isRelationFilter": false,
            "name": "not",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "isRelationFilter": false,
            "name": "in",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "isRelationFilter": false,
            "name": "notIn",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "isRelationFilter": false,
            "name": "lt",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "isRelationFilter": false,
            "name": "lte",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "isRelationFilter": false,
            "name": "gt",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "isRelationFilter": false,
            "name": "gte",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "isRelationFilter": false,
            "name": "contains",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "isRelationFilter": false,
            "name": "startsWith",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "String",
              },
            ],
            "isRelationFilter": false,
            "name": "endsWith",
          },
        ],
        "name": "StringFilter",
      },
      Object {
        "atLeastOne": false,
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "PostWhereInput",
              },
            ],
            "isRelationFilter": true,
            "name": "every",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "PostWhereInput",
              },
            ],
            "isRelationFilter": true,
            "name": "some",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "object",
                "type": "PostWhereInput",
              },
            ],
            "isRelationFilter": true,
            "name": "none",
          },
        ],
        "name": "PostFilter",
      },
      Object {
        "atLeastOne": false,
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "UUID",
              },
            ],
            "isRelationFilter": false,
            "name": "equals",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "UUID",
              },
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "UUIDFilter",
              },
            ],
            "isRelationFilter": false,
            "name": "not",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "scalar",
                "type": "UUID",
              },
            ],
            "isRelationFilter": false,
            "name": "in",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "scalar",
                "type": "UUID",
              },
            ],
            "isRelationFilter": false,
            "name": "notIn",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "UUID",
              },
            ],
            "isRelationFilter": false,
            "name": "lt",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "UUID",
              },
            ],
            "isRelationFilter": false,
            "name": "lte",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "UUID",
              },
            ],
            "isRelationFilter": false,
            "name": "gt",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "UUID",
              },
            ],
            "isRelationFilter": false,
            "name": "gte",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "UUID",
              },
            ],
            "isRelationFilter": false,
            "name": "contains",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "UUID",
              },
            ],
            "isRelationFilter": false,
            "name": "startsWith",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "UUID",
              },
            ],
            "isRelationFilter": false,
            "name": "endsWith",
          },
        ],
        "name": "UUIDFilter",
      },
      Object {
        "atLeastOne": false,
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "DateTime",
              },
            ],
            "isRelationFilter": false,
            "name": "equals",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "DateTime",
              },
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "DateTimeFilter",
              },
            ],
            "isRelationFilter": false,
            "name": "not",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "scalar",
                "type": "DateTime",
              },
            ],
            "isRelationFilter": false,
            "name": "in",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": true,
                "isRequired": false,
                "kind": "scalar",
                "type": "DateTime",
              },
            ],
            "isRelationFilter": false,
            "name": "notIn",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "DateTime",
              },
            ],
            "isRelationFilter": false,
            "name": "lt",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "DateTime",
              },
            ],
            "isRelationFilter": false,
            "name": "lte",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "DateTime",
              },
            ],
            "isRelationFilter": false,
            "name": "gt",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "scalar",
                "type": "DateTime",
              },
            ],
            "isRelationFilter": false,
            "name": "gte",
          },
        ],
        "name": "DateTimeFilter",
      },
      Object {
        "atLeastOne": true,
        "atMostOne": true,
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "enum",
                "type": "OrderByArg",
              },
            ],
            "isRelationFilter": false,
            "name": "id",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "enum",
                "type": "OrderByArg",
              },
            ],
            "isRelationFilter": false,
            "name": "createdAt",
          },
        ],
        "isOrderType": true,
        "name": "BubbleOrderByInput",
      },
      Object {
        "atLeastOne": true,
        "atMostOne": true,
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "enum",
                "type": "OrderByArg",
              },
            ],
            "isRelationFilter": false,
            "name": "id",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "enum",
                "type": "OrderByArg",
              },
            ],
            "isRelationFilter": false,
            "name": "firstName",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "enum",
                "type": "OrderByArg",
              },
            ],
            "isRelationFilter": false,
            "name": "lastName",
          },
        ],
        "isOrderType": true,
        "name": "UserOrderByInput",
      },
      Object {
        "atLeastOne": true,
        "atMostOne": true,
        "fields": Array [
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "enum",
                "type": "OrderByArg",
              },
            ],
            "isRelationFilter": false,
            "name": "id",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "enum",
                "type": "OrderByArg",
              },
            ],
            "isRelationFilter": false,
            "name": "rating",
          },
          Object {
            "inputType": Array [
              Object {
                "isList": false,
                "isRequired": false,
                "kind": "enum",
                "type": "OrderByArg",
              },
            ],
            "isRelationFilter": false,
            "name": "status",
          },
        ],
        "isOrderType": true,
        "name": "PostOrderByInput",
      },
    ],
    "outputTypes": Array [
      Object {
        "fields": Array [
          Object {
            "args": Array [],
            "name": "id",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "scalar",
              "type": "Int",
            },
          },
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "object",
                    "type": "UserWhereInput",
                  },
                ],
                "name": "where",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "object",
                    "type": "UserOrderByInput",
                  },
                ],
                "name": "orderBy",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "scalar",
                    "type": "Int",
                  },
                ],
                "name": "skip",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "object",
                    "type": "UserWhereUniqueInput",
                  },
                ],
                "name": "after",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "object",
                    "type": "UserWhereUniqueInput",
                  },
                ],
                "name": "before",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "scalar",
                    "type": "Int",
                  },
                ],
                "name": "first",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "scalar",
                    "type": "Int",
                  },
                ],
                "name": "last",
              },
            ],
            "name": "authors",
            "outputType": Object {
              "isList": true,
              "isRequired": false,
              "kind": "object",
              "type": "User",
            },
          },
          Object {
            "args": Array [],
            "name": "rating",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "scalar",
              "type": "Float",
            },
          },
          Object {
            "args": Array [],
            "name": "status",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "enum",
              "type": "PostStatus",
            },
          },
        ],
        "name": "Post",
      },
      Object {
        "fields": Array [
          Object {
            "args": Array [],
            "name": "id",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "scalar",
              "type": "String",
            },
          },
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "object",
                    "type": "PostWhereInput",
                  },
                ],
                "name": "where",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "object",
                    "type": "PostOrderByInput",
                  },
                ],
                "name": "orderBy",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "scalar",
                    "type": "Int",
                  },
                ],
                "name": "skip",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "object",
                    "type": "PostWhereUniqueInput",
                  },
                ],
                "name": "after",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "object",
                    "type": "PostWhereUniqueInput",
                  },
                ],
                "name": "before",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "scalar",
                    "type": "Int",
                  },
                ],
                "name": "first",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "scalar",
                    "type": "Int",
                  },
                ],
                "name": "last",
              },
            ],
            "name": "posts",
            "outputType": Object {
              "isList": true,
              "isRequired": false,
              "kind": "object",
              "type": "Post",
            },
          },
          Object {
            "args": Array [],
            "name": "firstName",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "scalar",
              "type": "String",
            },
          },
          Object {
            "args": Array [],
            "name": "lastName",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "scalar",
              "type": "String",
            },
          },
          Object {
            "args": Array [],
            "name": "bubble",
            "outputType": Object {
              "isList": false,
              "isRequired": false,
              "kind": "object",
              "type": "Bubble",
            },
          },
        ],
        "name": "User",
      },
      Object {
        "fields": Array [
          Object {
            "args": Array [],
            "name": "id",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "scalar",
              "type": "String",
            },
          },
          Object {
            "args": Array [],
            "name": "createdAt",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "scalar",
              "type": "DateTime",
            },
          },
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "object",
                    "type": "UserWhereInput",
                  },
                ],
                "name": "where",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "object",
                    "type": "UserOrderByInput",
                  },
                ],
                "name": "orderBy",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "scalar",
                    "type": "Int",
                  },
                ],
                "name": "skip",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "object",
                    "type": "UserWhereUniqueInput",
                  },
                ],
                "name": "after",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "object",
                    "type": "UserWhereUniqueInput",
                  },
                ],
                "name": "before",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "scalar",
                    "type": "Int",
                  },
                ],
                "name": "first",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "scalar",
                    "type": "Int",
                  },
                ],
                "name": "last",
              },
            ],
            "name": "members",
            "outputType": Object {
              "isList": true,
              "isRequired": false,
              "kind": "object",
              "type": "User",
            },
          },
        ],
        "name": "Bubble",
      },
      Object {
        "fields": Array [
          Object {
            "args": Array [],
            "name": "count",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "scalar",
              "type": "Int",
            },
          },
        ],
        "name": "AggregateBubble",
      },
      Object {
        "fields": Array [
          Object {
            "args": Array [],
            "name": "count",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "scalar",
              "type": "Int",
            },
          },
        ],
        "name": "AggregateUser",
      },
      Object {
        "fields": Array [
          Object {
            "args": Array [],
            "name": "count",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "scalar",
              "type": "Int",
            },
          },
        ],
        "name": "AggregatePost",
      },
      Object {
        "fields": Array [
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "object",
                    "type": "BubbleWhereInput",
                  },
                ],
                "name": "where",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "object",
                    "type": "BubbleOrderByInput",
                  },
                ],
                "name": "orderBy",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "scalar",
                    "type": "Int",
                  },
                ],
                "name": "skip",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "object",
                    "type": "BubbleWhereUniqueInput",
                  },
                ],
                "name": "after",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "object",
                    "type": "BubbleWhereUniqueInput",
                  },
                ],
                "name": "before",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "scalar",
                    "type": "Int",
                  },
                ],
                "name": "first",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "scalar",
                    "type": "Int",
                  },
                ],
                "name": "last",
              },
            ],
            "name": "findManyBubble",
            "outputType": Object {
              "isList": true,
              "isRequired": true,
              "kind": "object",
              "type": "Bubble",
            },
          },
          Object {
            "args": Array [],
            "name": "aggregateBubble",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "object",
              "type": "AggregateBubble",
            },
          },
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "BubbleWhereUniqueInput",
                  },
                ],
                "name": "where",
              },
            ],
            "name": "findOneBubble",
            "outputType": Object {
              "isList": false,
              "isRequired": false,
              "kind": "object",
              "type": "Bubble",
            },
          },
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "object",
                    "type": "UserWhereInput",
                  },
                ],
                "name": "where",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "object",
                    "type": "UserOrderByInput",
                  },
                ],
                "name": "orderBy",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "scalar",
                    "type": "Int",
                  },
                ],
                "name": "skip",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "object",
                    "type": "UserWhereUniqueInput",
                  },
                ],
                "name": "after",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "object",
                    "type": "UserWhereUniqueInput",
                  },
                ],
                "name": "before",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "scalar",
                    "type": "Int",
                  },
                ],
                "name": "first",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "scalar",
                    "type": "Int",
                  },
                ],
                "name": "last",
              },
            ],
            "name": "findManyUser",
            "outputType": Object {
              "isList": true,
              "isRequired": true,
              "kind": "object",
              "type": "User",
            },
          },
          Object {
            "args": Array [],
            "name": "aggregateUser",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "object",
              "type": "AggregateUser",
            },
          },
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "UserWhereUniqueInput",
                  },
                ],
                "name": "where",
              },
            ],
            "name": "findOneUser",
            "outputType": Object {
              "isList": false,
              "isRequired": false,
              "kind": "object",
              "type": "User",
            },
          },
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "object",
                    "type": "PostWhereInput",
                  },
                ],
                "name": "where",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "object",
                    "type": "PostOrderByInput",
                  },
                ],
                "name": "orderBy",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "scalar",
                    "type": "Int",
                  },
                ],
                "name": "skip",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "object",
                    "type": "PostWhereUniqueInput",
                  },
                ],
                "name": "after",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "object",
                    "type": "PostWhereUniqueInput",
                  },
                ],
                "name": "before",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "scalar",
                    "type": "Int",
                  },
                ],
                "name": "first",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "scalar",
                    "type": "Int",
                  },
                ],
                "name": "last",
              },
            ],
            "name": "findManyPost",
            "outputType": Object {
              "isList": true,
              "isRequired": true,
              "kind": "object",
              "type": "Post",
            },
          },
          Object {
            "args": Array [],
            "name": "aggregatePost",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "object",
              "type": "AggregatePost",
            },
          },
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "PostWhereUniqueInput",
                  },
                ],
                "name": "where",
              },
            ],
            "name": "findOnePost",
            "outputType": Object {
              "isList": false,
              "isRequired": false,
              "kind": "object",
              "type": "Post",
            },
          },
        ],
        "name": "Query",
      },
      Object {
        "fields": Array [
          Object {
            "args": Array [],
            "name": "count",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "scalar",
              "type": "Int",
            },
          },
        ],
        "name": "BatchPayload",
      },
      Object {
        "fields": Array [
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "BubbleCreateInput",
                  },
                ],
                "name": "data",
              },
            ],
            "name": "createOneBubble",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "object",
              "type": "Bubble",
            },
          },
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "BubbleWhereUniqueInput",
                  },
                ],
                "name": "where",
              },
            ],
            "name": "deleteOneBubble",
            "outputType": Object {
              "isList": false,
              "isRequired": false,
              "kind": "object",
              "type": "Bubble",
            },
          },
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "BubbleUpdateInput",
                  },
                ],
                "name": "data",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "BubbleWhereUniqueInput",
                  },
                ],
                "name": "where",
              },
            ],
            "name": "updateOneBubble",
            "outputType": Object {
              "isList": false,
              "isRequired": false,
              "kind": "object",
              "type": "Bubble",
            },
          },
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "BubbleWhereUniqueInput",
                  },
                ],
                "name": "where",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "BubbleCreateInput",
                  },
                ],
                "name": "create",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "BubbleUpdateInput",
                  },
                ],
                "name": "update",
              },
            ],
            "name": "upsertOneBubble",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "object",
              "type": "Bubble",
            },
          },
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "BubbleUpdateManyMutationInput",
                  },
                ],
                "name": "data",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "object",
                    "type": "BubbleWhereInput",
                  },
                ],
                "name": "where",
              },
            ],
            "name": "updateManyBubble",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "object",
              "type": "BatchPayload",
            },
          },
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "object",
                    "type": "BubbleWhereInput",
                  },
                ],
                "name": "where",
              },
            ],
            "name": "deleteManyBubble",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "object",
              "type": "BatchPayload",
            },
          },
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "UserCreateInput",
                  },
                ],
                "name": "data",
              },
            ],
            "name": "createOneUser",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "object",
              "type": "User",
            },
          },
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "UserWhereUniqueInput",
                  },
                ],
                "name": "where",
              },
            ],
            "name": "deleteOneUser",
            "outputType": Object {
              "isList": false,
              "isRequired": false,
              "kind": "object",
              "type": "User",
            },
          },
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "UserUpdateInput",
                  },
                ],
                "name": "data",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "UserWhereUniqueInput",
                  },
                ],
                "name": "where",
              },
            ],
            "name": "updateOneUser",
            "outputType": Object {
              "isList": false,
              "isRequired": false,
              "kind": "object",
              "type": "User",
            },
          },
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "UserWhereUniqueInput",
                  },
                ],
                "name": "where",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "UserCreateInput",
                  },
                ],
                "name": "create",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "UserUpdateInput",
                  },
                ],
                "name": "update",
              },
            ],
            "name": "upsertOneUser",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "object",
              "type": "User",
            },
          },
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "UserUpdateManyMutationInput",
                  },
                ],
                "name": "data",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "object",
                    "type": "UserWhereInput",
                  },
                ],
                "name": "where",
              },
            ],
            "name": "updateManyUser",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "object",
              "type": "BatchPayload",
            },
          },
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "object",
                    "type": "UserWhereInput",
                  },
                ],
                "name": "where",
              },
            ],
            "name": "deleteManyUser",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "object",
              "type": "BatchPayload",
            },
          },
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "PostCreateInput",
                  },
                ],
                "name": "data",
              },
            ],
            "name": "createOnePost",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "object",
              "type": "Post",
            },
          },
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "PostWhereUniqueInput",
                  },
                ],
                "name": "where",
              },
            ],
            "name": "deleteOnePost",
            "outputType": Object {
              "isList": false,
              "isRequired": false,
              "kind": "object",
              "type": "Post",
            },
          },
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "PostUpdateInput",
                  },
                ],
                "name": "data",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "PostWhereUniqueInput",
                  },
                ],
                "name": "where",
              },
            ],
            "name": "updateOnePost",
            "outputType": Object {
              "isList": false,
              "isRequired": false,
              "kind": "object",
              "type": "Post",
            },
          },
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "PostWhereUniqueInput",
                  },
                ],
                "name": "where",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "PostCreateInput",
                  },
                ],
                "name": "create",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "PostUpdateInput",
                  },
                ],
                "name": "update",
              },
            ],
            "name": "upsertOnePost",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "object",
              "type": "Post",
            },
          },
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "object",
                    "type": "PostUpdateManyMutationInput",
                  },
                ],
                "name": "data",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "object",
                    "type": "PostWhereInput",
                  },
                ],
                "name": "where",
              },
            ],
            "name": "updateManyPost",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "object",
              "type": "BatchPayload",
            },
          },
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "object",
                    "type": "PostWhereInput",
                  },
                ],
                "name": "where",
              },
            ],
            "name": "deleteManyPost",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "object",
              "type": "BatchPayload",
            },
          },
          Object {
            "args": Array [
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": true,
                    "kind": "scalar",
                    "type": "String",
                  },
                ],
                "name": "query",
              },
              Object {
                "inputType": Array [
                  Object {
                    "isList": false,
                    "isRequired": false,
                    "kind": "scalar",
                    "type": "Json",
                  },
                ],
                "name": "parameters",
              },
            ],
            "name": "executeRaw",
            "outputType": Object {
              "isList": false,
              "isRequired": true,
              "kind": "scalar",
              "type": "Json",
            },
          },
        ],
        "name": "Mutation",
      },
    ],
  },
}
`;
