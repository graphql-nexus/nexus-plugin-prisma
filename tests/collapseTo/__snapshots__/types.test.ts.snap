// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`collapseTo typegen avoids collapsing required fields: avoid-required-schema 1`] = `
"scalar DateTime

type Mutation {
  createOneUser(data: UserCreateInput!): User!
  createOneNest(data: NestCreateInput!): Nest!
}

type Nest {
  id: Int!
  createdWithBrowser: String!
  name: String!
}

input NestCreateInput {
  name: String!
  createdWithBrowser: String!
  user: UserCreateOneWithoutNestsInput
}

input NestCreateManyWithoutUserInput {
  create: [NestCreateWithoutUserInput!]
  connect: [NestWhereUniqueInput!]
}

input NestCreateWithoutUserInput {
  name: String!
  createdWithBrowser: String!
}

input NestWhereUniqueInput {
  id: Int
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: StringFilter, skip: Int, after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

input StringFilter {
  equals: String
  not: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
}

type User {
  id: Int!
  name: String!
  nests(skip: Int, after: NestWhereUniqueInput, before: NestWhereUniqueInput, first: Int, last: Int): [Nest!]!
  createdWithBrowser: String!
}

input UserCreateInput {
  createdAt: DateTime
  name: String!
  createdWithBrowser: String!
  nests: NestCreateManyWithoutUserInput
}

input UserCreateOneWithoutNestsInput {
  create: UserCreateWithoutNestsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutNestsInput {
  createdAt: DateTime
  name: String!
  createdWithBrowser: String!
}

input UserWhereUniqueInput {
  id: Int
}
"
`;

exports[`collapseTo typegen avoids collapsing required fields: avoid-required-typegen 1`] = `
"
interface ModelTypes {
  User: prisma.User
  Nest: prisma.Nest
}
  
interface NexusPrismaInputs {
  Query: {
    users: {
  filtering: 'id' | 'createdAt' | 'name' | 'nests' | 'createdWithBrowser' | 'AND' | 'OR' | 'NOT'
  ordering: 'id' | 'createdAt' | 'name' | 'createdWithBrowser'
}
    nests: {
  filtering: 'id' | 'name' | 'createdWithBrowser' | 'AND' | 'OR' | 'NOT' | 'user'
  ordering: 'id' | 'name' | 'createdWithBrowser'
}

  },
    User: {
    nests: {
  filtering: 'id' | 'name' | 'createdWithBrowser' | 'AND' | 'OR' | 'NOT' | 'user'
  ordering: 'id' | 'name' | 'createdWithBrowser'
}

  },  Nest: {


  }
}

interface NexusPrismaTypes {
  Query: {
    user: 'User'
    users: 'User'
    nest: 'Nest'
    nests: 'Nest'

  },
  Mutation: {
    createOneUser: 'User'
    updateOneUser: 'User'
    updateManyUser: 'BatchPayload'
    deleteOneUser: 'User'
    deleteManyUser: 'BatchPayload'
    upsertOneUser: 'User'
    createOneNest: 'Nest'
    updateOneNest: 'Nest'
    updateManyNest: 'BatchPayload'
    deleteOneNest: 'Nest'
    deleteManyNest: 'BatchPayload'
    upsertOneNest: 'Nest'

  },
  User: {
    id: 'Int'
    createdAt: 'DateTime'
    name: 'String'
    nests: 'Nest'
    createdWithBrowser: 'String'

},  Nest: {
    id: 'Int'
    name: 'String'
    createdWithBrowser: 'String'
    user: 'User'

}
}

interface NexusPrismaMethods {
  User: NexusPrismaFields<'User'>
  Nest: NexusPrismaFields<'Nest'>
  Query: NexusPrismaFields<'Query'>
  Mutation: NexusPrismaFields<'Mutation'>
}
  

declare global {
  type NexusPrisma<
    TypeName extends string,
    ModelOrCrud extends 'model' | 'crud'
  > = GetNexusPrisma<TypeName, ModelOrCrud>;

  // Pre-transform inputs
  interface PrismaInputs {
  
    NestWhereInput: prisma.NestWhereInput
    UserWhereInput: prisma.UserWhereInput
    IdCompoundUniqueInput: prisma.IdCompoundUniqueInput
    UserWhereUniqueInput: prisma.UserWhereUniqueInput
    NestWhereUniqueInput: prisma.NestWhereUniqueInput
    NestCreateWithoutUserInput: prisma.NestCreateWithoutUserInput
    NestCreateManyWithoutUserInput: prisma.NestCreateManyWithoutUserInput
    UserCreateInput: prisma.UserCreateInput
    NestUpdateWithoutUserDataInput: prisma.NestUpdateWithoutUserDataInput
    NestUpdateWithWhereUniqueWithoutUserInput: prisma.NestUpdateWithWhereUniqueWithoutUserInput
    NestScalarWhereInput: prisma.NestScalarWhereInput
    NestUpdateManyDataInput: prisma.NestUpdateManyDataInput
    NestUpdateManyWithWhereNestedInput: prisma.NestUpdateManyWithWhereNestedInput
    NestUpsertWithWhereUniqueWithoutUserInput: prisma.NestUpsertWithWhereUniqueWithoutUserInput
    NestUpdateManyWithoutUserInput: prisma.NestUpdateManyWithoutUserInput
    UserUpdateInput: prisma.UserUpdateInput
    UserUpdateManyMutationInput: prisma.UserUpdateManyMutationInput
    UserCreateWithoutNestsInput: prisma.UserCreateWithoutNestsInput
    UserCreateOneWithoutNestsInput: prisma.UserCreateOneWithoutNestsInput
    NestCreateInput: prisma.NestCreateInput
    UserUpdateWithoutNestsDataInput: prisma.UserUpdateWithoutNestsDataInput
    UserUpsertWithoutNestsInput: prisma.UserUpsertWithoutNestsInput
    UserUpdateOneWithoutNestsInput: prisma.UserUpdateOneWithoutNestsInput
    NestUpdateInput: prisma.NestUpdateInput
    NestUpdateManyMutationInput: prisma.NestUpdateManyMutationInput
    IntFilter: prisma.IntFilter
    StringFilter: prisma.StringFilter
    DateTimeFilter: prisma.DateTimeFilter
    NestFilter: prisma.NestFilter
    UserOrderByInput: prisma.UserOrderByInput
    NestOrderByInput: prisma.NestOrderByInput
  }
}
  "
`;

exports[`collapseTo typegen works at plugin-level: plugin-level-schema 1`] = `
"scalar DateTime

input DateTimeFilter {
  equals: DateTime
  not: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
}

input IntFilter {
  equals: Int
  not: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
}

type Mutation {
  createOneUser(data: UserCreateInput!): User!
  createOneNest(data: NestCreateInput!): Nest!
}

type Nest {
  id: Int!
  createdWithBrowser: String!
  name: String!
}

input NestCreateInput {
  name: String!
  createdWithBrowser: String!
  user: UserCreateOneWithoutNestsInput
}

input NestCreateWithoutUserInput {
  name: String!
  createdWithBrowser: String!
}

input NestFilter {
  every: NestWhereInput
  some: NestWhereInput
  none: NestWhereInput
}

input NestWhereInput {
  id: IntFilter
  name: StringFilter
  createdWithBrowser: StringFilter
  AND: [NestWhereInput!]
  OR: [NestWhereInput!]
  NOT: [NestWhereInput!]
  user: UserWhereInput
}

input NestWhereUniqueInput {
  id: Int
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, skip: Int, after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

input StringFilter {
  equals: String
  not: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
}

type User {
  id: Int!
  name: String!
  nests(skip: Int, after: NestWhereUniqueInput, before: NestWhereUniqueInput, first: Int, last: Int): [Nest!]!
  createdWithBrowser: String!
}

input UserCreateInput {
  createdAt: DateTime
  name: String!
  createdWithBrowser: String!
  nests: NestCreateWithoutUserInput
}

input UserCreateOneWithoutNestsInput {
  create: UserCreateWithoutNestsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutNestsInput {
  createdAt: DateTime
  name: String!
  createdWithBrowser: String!
}

input UserWhereInput {
  id: IntFilter
  createdAt: DateTimeFilter
  name: StringFilter
  nests: NestFilter
  createdWithBrowser: StringFilter
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: Int
}
"
`;

exports[`collapseTo typegen works at plugin-level: plugin-level-typegen 1`] = `
"
interface ModelTypes {
  User: prisma.User
  Nest: prisma.Nest
}
  
interface NexusPrismaInputs {
  Query: {
    users: {
  filtering: 'id' | 'createdAt' | 'name' | 'nests' | 'createdWithBrowser' | 'AND' | 'OR' | 'NOT'
  ordering: 'id' | 'createdAt' | 'name' | 'createdWithBrowser'
}
    nests: {
  filtering: 'id' | 'name' | 'createdWithBrowser' | 'AND' | 'OR' | 'NOT' | 'user'
  ordering: 'id' | 'name' | 'createdWithBrowser'
}

  },
    User: {
    nests: {
  filtering: 'id' | 'name' | 'createdWithBrowser' | 'AND' | 'OR' | 'NOT' | 'user'
  ordering: 'id' | 'name' | 'createdWithBrowser'
}

  },  Nest: {


  }
}

interface NexusPrismaTypes {
  Query: {
    user: 'User'
    users: 'User'
    nest: 'Nest'
    nests: 'Nest'

  },
  Mutation: {
    createOneUser: 'User'
    updateOneUser: 'User'
    updateManyUser: 'BatchPayload'
    deleteOneUser: 'User'
    deleteManyUser: 'BatchPayload'
    upsertOneUser: 'User'
    createOneNest: 'Nest'
    updateOneNest: 'Nest'
    updateManyNest: 'BatchPayload'
    deleteOneNest: 'Nest'
    deleteManyNest: 'BatchPayload'
    upsertOneNest: 'Nest'

  },
  User: {
    id: 'Int'
    createdAt: 'DateTime'
    name: 'String'
    nests: 'Nest'
    createdWithBrowser: 'String'

},  Nest: {
    id: 'Int'
    name: 'String'
    createdWithBrowser: 'String'
    user: 'User'

}
}

interface NexusPrismaMethods {
  User: NexusPrismaFields<'User'>
  Nest: NexusPrismaFields<'Nest'>
  Query: NexusPrismaFields<'Query'>
  Mutation: NexusPrismaFields<'Mutation'>
}
  

declare global {
  type NexusPrisma<
    TypeName extends string,
    ModelOrCrud extends 'model' | 'crud'
  > = GetNexusPrisma<TypeName, ModelOrCrud>;

  // Pre-transform inputs
  interface PrismaInputs {
  
    NestWhereInput: prisma.NestWhereInput
    UserWhereInput: prisma.UserWhereInput
    IdCompoundUniqueInput: prisma.IdCompoundUniqueInput
    UserWhereUniqueInput: prisma.UserWhereUniqueInput
    NestWhereUniqueInput: prisma.NestWhereUniqueInput
    NestCreateWithoutUserInput: prisma.NestCreateWithoutUserInput
    NestCreateManyWithoutUserInput: prisma.NestCreateManyWithoutUserInput
    UserCreateInput: prisma.UserCreateInput
    NestUpdateWithoutUserDataInput: prisma.NestUpdateWithoutUserDataInput
    NestUpdateWithWhereUniqueWithoutUserInput: prisma.NestUpdateWithWhereUniqueWithoutUserInput
    NestScalarWhereInput: prisma.NestScalarWhereInput
    NestUpdateManyDataInput: prisma.NestUpdateManyDataInput
    NestUpdateManyWithWhereNestedInput: prisma.NestUpdateManyWithWhereNestedInput
    NestUpsertWithWhereUniqueWithoutUserInput: prisma.NestUpsertWithWhereUniqueWithoutUserInput
    NestUpdateManyWithoutUserInput: prisma.NestUpdateManyWithoutUserInput
    UserUpdateInput: prisma.UserUpdateInput
    UserUpdateManyMutationInput: prisma.UserUpdateManyMutationInput
    UserCreateWithoutNestsInput: prisma.UserCreateWithoutNestsInput
    UserCreateOneWithoutNestsInput: prisma.UserCreateOneWithoutNestsInput
    NestCreateInput: prisma.NestCreateInput
    UserUpdateWithoutNestsDataInput: prisma.UserUpdateWithoutNestsDataInput
    UserUpsertWithoutNestsInput: prisma.UserUpsertWithoutNestsInput
    UserUpdateOneWithoutNestsInput: prisma.UserUpdateOneWithoutNestsInput
    NestUpdateInput: prisma.NestUpdateInput
    NestUpdateManyMutationInput: prisma.NestUpdateManyMutationInput
    IntFilter: prisma.IntFilter
    StringFilter: prisma.StringFilter
    DateTimeFilter: prisma.DateTimeFilter
    NestFilter: prisma.NestFilter
    UserOrderByInput: prisma.UserOrderByInput
    NestOrderByInput: prisma.NestOrderByInput
  }
}
  "
`;

exports[`collapseTo typegen works at resolver-level: resolver-level-schema 1`] = `
"scalar DateTime

input DateTimeFilter {
  equals: DateTime
  not: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
}

input IntFilter {
  equals: Int
  not: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
}

type Mutation {
  createOneUser(data: UserCreateCollapseNestsToCreateInput!): User!
  createOneNest(data: NestCreateInput!): Nest!
}

type Nest {
  id: Int!
  createdWithBrowser: String!
  name: String!
}

input NestCreateInput {
  name: String!
  createdWithBrowser: String!
  user: UserCreateOneWithoutNestsInput
}

input NestCreateWithoutUserCollapseNestsToCreateInput {
  name: String!
  createdWithBrowser: String!
}

input NestFilter {
  every: NestWhereInput
  some: NestWhereInput
  none: NestWhereInput
}

input NestWhereInput {
  id: IntFilter
  name: StringFilter
  createdWithBrowser: StringFilter
  AND: [NestWhereInput!]
  OR: [NestWhereInput!]
  NOT: [NestWhereInput!]
  user: UserWhereInput
}

input NestWhereUniqueInput {
  id: Int
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, skip: Int, after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

input StringFilter {
  equals: String
  not: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
}

type User {
  id: Int!
  name: String!
  nests(skip: Int, after: NestWhereUniqueInput, before: NestWhereUniqueInput, first: Int, last: Int): [Nest!]!
  createdWithBrowser: String!
}

input UserCreateCollapseNestsToCreateInput {
  createdAt: DateTime
  name: String!
  createdWithBrowser: String!
  nests: NestCreateWithoutUserCollapseNestsToCreateInput
}

input UserCreateOneWithoutNestsInput {
  create: UserCreateWithoutNestsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutNestsInput {
  createdAt: DateTime
  name: String!
  createdWithBrowser: String!
}

input UserWhereInput {
  id: IntFilter
  createdAt: DateTimeFilter
  name: StringFilter
  nests: NestFilter
  createdWithBrowser: StringFilter
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: Int
}
"
`;

exports[`collapseTo typegen works at resolver-level: resolver-level-typegen 1`] = `
"
interface ModelTypes {
  User: prisma.User
  Nest: prisma.Nest
}
  
interface NexusPrismaInputs {
  Query: {
    users: {
  filtering: 'id' | 'createdAt' | 'name' | 'nests' | 'createdWithBrowser' | 'AND' | 'OR' | 'NOT'
  ordering: 'id' | 'createdAt' | 'name' | 'createdWithBrowser'
}
    nests: {
  filtering: 'id' | 'name' | 'createdWithBrowser' | 'AND' | 'OR' | 'NOT' | 'user'
  ordering: 'id' | 'name' | 'createdWithBrowser'
}

  },
    User: {
    nests: {
  filtering: 'id' | 'name' | 'createdWithBrowser' | 'AND' | 'OR' | 'NOT' | 'user'
  ordering: 'id' | 'name' | 'createdWithBrowser'
}

  },  Nest: {


  }
}

interface NexusPrismaTypes {
  Query: {
    user: 'User'
    users: 'User'
    nest: 'Nest'
    nests: 'Nest'

  },
  Mutation: {
    createOneUser: 'User'
    updateOneUser: 'User'
    updateManyUser: 'BatchPayload'
    deleteOneUser: 'User'
    deleteManyUser: 'BatchPayload'
    upsertOneUser: 'User'
    createOneNest: 'Nest'
    updateOneNest: 'Nest'
    updateManyNest: 'BatchPayload'
    deleteOneNest: 'Nest'
    deleteManyNest: 'BatchPayload'
    upsertOneNest: 'Nest'

  },
  User: {
    id: 'Int'
    createdAt: 'DateTime'
    name: 'String'
    nests: 'Nest'
    createdWithBrowser: 'String'

},  Nest: {
    id: 'Int'
    name: 'String'
    createdWithBrowser: 'String'
    user: 'User'

}
}

interface NexusPrismaMethods {
  User: NexusPrismaFields<'User'>
  Nest: NexusPrismaFields<'Nest'>
  Query: NexusPrismaFields<'Query'>
  Mutation: NexusPrismaFields<'Mutation'>
}
  

declare global {
  type NexusPrisma<
    TypeName extends string,
    ModelOrCrud extends 'model' | 'crud'
  > = GetNexusPrisma<TypeName, ModelOrCrud>;

  // Pre-transform inputs
  interface PrismaInputs {
  
    NestWhereInput: prisma.NestWhereInput
    UserWhereInput: prisma.UserWhereInput
    IdCompoundUniqueInput: prisma.IdCompoundUniqueInput
    UserWhereUniqueInput: prisma.UserWhereUniqueInput
    NestWhereUniqueInput: prisma.NestWhereUniqueInput
    NestCreateWithoutUserInput: prisma.NestCreateWithoutUserInput
    NestCreateManyWithoutUserInput: prisma.NestCreateManyWithoutUserInput
    UserCreateInput: prisma.UserCreateInput
    NestUpdateWithoutUserDataInput: prisma.NestUpdateWithoutUserDataInput
    NestUpdateWithWhereUniqueWithoutUserInput: prisma.NestUpdateWithWhereUniqueWithoutUserInput
    NestScalarWhereInput: prisma.NestScalarWhereInput
    NestUpdateManyDataInput: prisma.NestUpdateManyDataInput
    NestUpdateManyWithWhereNestedInput: prisma.NestUpdateManyWithWhereNestedInput
    NestUpsertWithWhereUniqueWithoutUserInput: prisma.NestUpsertWithWhereUniqueWithoutUserInput
    NestUpdateManyWithoutUserInput: prisma.NestUpdateManyWithoutUserInput
    UserUpdateInput: prisma.UserUpdateInput
    UserUpdateManyMutationInput: prisma.UserUpdateManyMutationInput
    UserCreateWithoutNestsInput: prisma.UserCreateWithoutNestsInput
    UserCreateOneWithoutNestsInput: prisma.UserCreateOneWithoutNestsInput
    NestCreateInput: prisma.NestCreateInput
    UserUpdateWithoutNestsDataInput: prisma.UserUpdateWithoutNestsDataInput
    UserUpsertWithoutNestsInput: prisma.UserUpsertWithoutNestsInput
    UserUpdateOneWithoutNestsInput: prisma.UserUpdateOneWithoutNestsInput
    NestUpdateInput: prisma.NestUpdateInput
    NestUpdateManyMutationInput: prisma.NestUpdateManyMutationInput
    IntFilter: prisma.IntFilter
    StringFilter: prisma.StringFilter
    DateTimeFilter: prisma.DateTimeFilter
    NestFilter: prisma.NestFilter
    UserOrderByInput: prisma.UserOrderByInput
    NestOrderByInput: prisma.NestOrderByInput
  }
}
  "
`;

exports[`collapseTo typegen works for queries: query-schema 1`] = `
"input DateTime

input IntFilter {
  equals: Int
  not: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
}

type Mutation {
  createOneUser(data: UserCreateInput!): User!
  createOneNest(data: NestCreateInput!): Nest!
}

type Nest {
  id: Int!
  createdWithBrowser: String!
  name: String!
}

input NestCreateInput {
  name: String!
  createdWithBrowser: String!
  user: UserCreateOneWithoutNestsInput
}

input NestCreateManyWithoutUserInput {
  create: [NestCreateWithoutUserInput!]
  connect: [NestWhereUniqueInput!]
}

input NestCreateWithoutUserInput {
  name: String!
  createdWithBrowser: String!
}

input NestFilter {
  every: NestWhereInput
  some: NestWhereInput
  none: NestWhereInput
}

input NestWhereInput {
  id: IntFilter
  name: StringFilter
  createdWithBrowser: StringFilter
  AND: [NestWhereInput!]
  OR: [NestWhereInput!]
  NOT: [NestWhereInput!]
  user: UserWhereInput
}

input NestWhereUniqueInput {
  id: Int
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, skip: Int, after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

input StringFilter {
  equals: String
  not: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
}

type User {
  id: Int!
  name: String!
  nests(skip: Int, after: NestWhereUniqueInput, before: NestWhereUniqueInput, first: Int, last: Int): [Nest!]!
  createdWithBrowser: String!
}

input UserCreateInput {
  createdAt: DateTime
  name: String!
  createdWithBrowser: String!
  nests: NestCreateManyWithoutUserInput
}

input UserCreateOneWithoutNestsInput {
  create: UserCreateWithoutNestsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutNestsInput {
  createdAt: DateTime
  name: String!
  createdWithBrowser: String!
}

input UserWhereInput {
  id: IntFilter
  createdAt: DateTime
  name: StringFilter
  nests: NestFilter
  createdWithBrowser: StringFilter
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: Int
}
"
`;

exports[`collapseTo typegen works for queries: query-typegen 1`] = `
"
interface ModelTypes {
  User: prisma.User
  Nest: prisma.Nest
}
  
interface NexusPrismaInputs {
  Query: {
    users: {
  filtering: 'id' | 'createdAt' | 'name' | 'nests' | 'createdWithBrowser' | 'AND' | 'OR' | 'NOT'
  ordering: 'id' | 'createdAt' | 'name' | 'createdWithBrowser'
}
    nests: {
  filtering: 'id' | 'name' | 'createdWithBrowser' | 'AND' | 'OR' | 'NOT' | 'user'
  ordering: 'id' | 'name' | 'createdWithBrowser'
}

  },
    User: {
    nests: {
  filtering: 'id' | 'name' | 'createdWithBrowser' | 'AND' | 'OR' | 'NOT' | 'user'
  ordering: 'id' | 'name' | 'createdWithBrowser'
}

  },  Nest: {


  }
}

interface NexusPrismaTypes {
  Query: {
    user: 'User'
    users: 'User'
    nest: 'Nest'
    nests: 'Nest'

  },
  Mutation: {
    createOneUser: 'User'
    updateOneUser: 'User'
    updateManyUser: 'BatchPayload'
    deleteOneUser: 'User'
    deleteManyUser: 'BatchPayload'
    upsertOneUser: 'User'
    createOneNest: 'Nest'
    updateOneNest: 'Nest'
    updateManyNest: 'BatchPayload'
    deleteOneNest: 'Nest'
    deleteManyNest: 'BatchPayload'
    upsertOneNest: 'Nest'

  },
  User: {
    id: 'Int'
    createdAt: 'DateTime'
    name: 'String'
    nests: 'Nest'
    createdWithBrowser: 'String'

},  Nest: {
    id: 'Int'
    name: 'String'
    createdWithBrowser: 'String'
    user: 'User'

}
}

interface NexusPrismaMethods {
  User: NexusPrismaFields<'User'>
  Nest: NexusPrismaFields<'Nest'>
  Query: NexusPrismaFields<'Query'>
  Mutation: NexusPrismaFields<'Mutation'>
}
  

declare global {
  type NexusPrisma<
    TypeName extends string,
    ModelOrCrud extends 'model' | 'crud'
  > = GetNexusPrisma<TypeName, ModelOrCrud>;

  // Pre-transform inputs
  interface PrismaInputs {
  
    NestWhereInput: prisma.NestWhereInput
    UserWhereInput: prisma.UserWhereInput
    IdCompoundUniqueInput: prisma.IdCompoundUniqueInput
    UserWhereUniqueInput: prisma.UserWhereUniqueInput
    NestWhereUniqueInput: prisma.NestWhereUniqueInput
    NestCreateWithoutUserInput: prisma.NestCreateWithoutUserInput
    NestCreateManyWithoutUserInput: prisma.NestCreateManyWithoutUserInput
    UserCreateInput: prisma.UserCreateInput
    NestUpdateWithoutUserDataInput: prisma.NestUpdateWithoutUserDataInput
    NestUpdateWithWhereUniqueWithoutUserInput: prisma.NestUpdateWithWhereUniqueWithoutUserInput
    NestScalarWhereInput: prisma.NestScalarWhereInput
    NestUpdateManyDataInput: prisma.NestUpdateManyDataInput
    NestUpdateManyWithWhereNestedInput: prisma.NestUpdateManyWithWhereNestedInput
    NestUpsertWithWhereUniqueWithoutUserInput: prisma.NestUpsertWithWhereUniqueWithoutUserInput
    NestUpdateManyWithoutUserInput: prisma.NestUpdateManyWithoutUserInput
    UserUpdateInput: prisma.UserUpdateInput
    UserUpdateManyMutationInput: prisma.UserUpdateManyMutationInput
    UserCreateWithoutNestsInput: prisma.UserCreateWithoutNestsInput
    UserCreateOneWithoutNestsInput: prisma.UserCreateOneWithoutNestsInput
    NestCreateInput: prisma.NestCreateInput
    UserUpdateWithoutNestsDataInput: prisma.UserUpdateWithoutNestsDataInput
    UserUpsertWithoutNestsInput: prisma.UserUpsertWithoutNestsInput
    UserUpdateOneWithoutNestsInput: prisma.UserUpdateOneWithoutNestsInput
    NestUpdateInput: prisma.NestUpdateInput
    NestUpdateManyMutationInput: prisma.NestUpdateManyMutationInput
    IntFilter: prisma.IntFilter
    StringFilter: prisma.StringFilter
    DateTimeFilter: prisma.DateTimeFilter
    NestFilter: prisma.NestFilter
    UserOrderByInput: prisma.UserOrderByInput
    NestOrderByInput: prisma.NestOrderByInput
  }
}
  "
`;
