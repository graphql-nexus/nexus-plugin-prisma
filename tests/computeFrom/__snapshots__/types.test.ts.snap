// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`computeFrom typegen works at plugin-level: plugin-level-schema 1`] = `
"type Mutation {
  createOneUser(data: UserCreateInput!): User!
  createOneNest(data: NestCreateInput!): Nest!
}

type Nest {
  id: Int!
  createdWithBrowser: String!
  name: String!
}

input NestCreateInput {
  name: String!
  user: UserCreateOneWithoutNestsInput
}

input NestCreateManyWithoutUserInput {
  create: [NestCreateWithoutUserInput!]
  connect: [NestWhereUniqueInput!]
}

input NestCreateWithoutUserInput {
  name: String!
}

input NestWhereUniqueInput {
  id: Int
}

type Query {
  user(where: UserWhereUniqueInput!): User
}

type User {
  id: Int!
  name: String!
  nests(skip: Int, after: NestWhereUniqueInput, before: NestWhereUniqueInput, first: Int, last: Int): [Nest!]!
  createdWithBrowser: String!
}

input UserCreateInput {
  name: String!
  nests: NestCreateManyWithoutUserInput
}

input UserCreateOneWithoutNestsInput {
  create: UserCreateWithoutNestsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutNestsInput {
  name: String!
}

input UserWhereUniqueInput {
  id: Int
}
"
`;

exports[`computeFrom typegen works at plugin-level: plugin-level-typegen 1`] = `
"
interface ModelTypes {
  User: prisma.User
  Nest: prisma.Nest
}
  
interface NexusPrismaInputs {
  Query: {
    users: {
  filtering: 'id' | 'name' | 'nests' | 'createdWithBrowser' | 'AND' | 'OR' | 'NOT'
  ordering: 'id' | 'name' | 'createdWithBrowser'
}
    nests: {
  filtering: 'id' | 'name' | 'createdWithBrowser' | 'AND' | 'OR' | 'NOT' | 'user'
  ordering: 'id' | 'name' | 'createdWithBrowser'
}

  },
    User: {
    nests: {
  filtering: 'id' | 'name' | 'createdWithBrowser' | 'AND' | 'OR' | 'NOT' | 'user'
  ordering: 'id' | 'name' | 'createdWithBrowser'
}

  },  Nest: {


  }
}

interface NexusPrismaTypes {
  Query: {
    user: 'User'
    users: 'User'
    nest: 'Nest'
    nests: 'Nest'

  },
  Mutation: {
    createOneUser: 'User'
    updateOneUser: 'User'
    updateManyUser: 'BatchPayload'
    deleteOneUser: 'User'
    deleteManyUser: 'BatchPayload'
    upsertOneUser: 'User'
    createOneNest: 'Nest'
    updateOneNest: 'Nest'
    updateManyNest: 'BatchPayload'
    deleteOneNest: 'Nest'
    deleteManyNest: 'BatchPayload'
    upsertOneNest: 'Nest'

  },
  User: {
    id: 'Int'
    name: 'String'
    nests: 'Nest'
    createdWithBrowser: 'String'

},  Nest: {
    id: 'Int'
    name: 'String'
    createdWithBrowser: 'String'
    user: 'User'

}
}

interface NexusPrismaMethods {
  User: NexusPrismaFields<'User'>
  Nest: NexusPrismaFields<'Nest'>
  Query: NexusPrismaFields<'Query'>
  Mutation: NexusPrismaFields<'Mutation'>
}
  

declare global {
  type NexusPrisma<
    TypeName extends string,
    ModelOrCrud extends 'model' | 'crud'
  > = GetNexusPrisma<TypeName, ModelOrCrud>;
}
  "
`;

exports[`computeFrom typegen works at resolver-level: resolver-level-schema 1`] = `
"type Mutation {
  createOneUser(data: UserCreateComputeCreatedWithBrowserInput!): User!
  createOneNest(data: NestCreateInput!): Nest!
}

type Nest {
  id: Int!
  createdWithBrowser: String!
  name: String!
}

input NestCreateInput {
  name: String!
  createdWithBrowser: String!
  user: UserCreateOneWithoutNestsInput
}

input NestCreateManyWithoutUserComputeCreatedWithBrowserInput {
  create: [NestCreateWithoutUserComputeCreatedWithBrowserInput!]
  connect: [NestWhereUniqueComputeCreatedWithBrowserInput!]
}

input NestCreateWithoutUserComputeCreatedWithBrowserInput {
  name: String!
}

input NestWhereUniqueComputeCreatedWithBrowserInput {
  id: Int
}

input NestWhereUniqueInput {
  id: Int
}

type Query {
  user(where: UserWhereUniqueInput!): User
}

type User {
  id: Int!
  name: String!
  nests(skip: Int, after: NestWhereUniqueInput, before: NestWhereUniqueInput, first: Int, last: Int): [Nest!]!
  createdWithBrowser: String!
}

input UserCreateComputeCreatedWithBrowserInput {
  name: String!
  nests: NestCreateManyWithoutUserComputeCreatedWithBrowserInput
}

input UserCreateOneWithoutNestsInput {
  create: UserCreateWithoutNestsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutNestsInput {
  name: String!
  createdWithBrowser: String!
}

input UserWhereUniqueInput {
  id: Int
}
"
`;

exports[`computeFrom typegen works at resolver-level: resolver-level-typegen 1`] = `
"
interface ModelTypes {
  User: prisma.User
  Nest: prisma.Nest
}
  
interface NexusPrismaInputs {
  Query: {
    users: {
  filtering: 'id' | 'name' | 'nests' | 'createdWithBrowser' | 'AND' | 'OR' | 'NOT'
  ordering: 'id' | 'name' | 'createdWithBrowser'
}
    nests: {
  filtering: 'id' | 'name' | 'createdWithBrowser' | 'AND' | 'OR' | 'NOT' | 'user'
  ordering: 'id' | 'name' | 'createdWithBrowser'
}

  },
    User: {
    nests: {
  filtering: 'id' | 'name' | 'createdWithBrowser' | 'AND' | 'OR' | 'NOT' | 'user'
  ordering: 'id' | 'name' | 'createdWithBrowser'
}

  },  Nest: {


  }
}

interface NexusPrismaTypes {
  Query: {
    user: 'User'
    users: 'User'
    nest: 'Nest'
    nests: 'Nest'

  },
  Mutation: {
    createOneUser: 'User'
    updateOneUser: 'User'
    updateManyUser: 'BatchPayload'
    deleteOneUser: 'User'
    deleteManyUser: 'BatchPayload'
    upsertOneUser: 'User'
    createOneNest: 'Nest'
    updateOneNest: 'Nest'
    updateManyNest: 'BatchPayload'
    deleteOneNest: 'Nest'
    deleteManyNest: 'BatchPayload'
    upsertOneNest: 'Nest'

  },
  User: {
    id: 'Int'
    name: 'String'
    nests: 'Nest'
    createdWithBrowser: 'String'

},  Nest: {
    id: 'Int'
    name: 'String'
    createdWithBrowser: 'String'
    user: 'User'

}
}

interface NexusPrismaMethods {
  User: NexusPrismaFields<'User'>
  Nest: NexusPrismaFields<'Nest'>
  Query: NexusPrismaFields<'Query'>
  Mutation: NexusPrismaFields<'Mutation'>
}
  

declare global {
  type NexusPrisma<
    TypeName extends string,
    ModelOrCrud extends 'model' | 'crud'
  > = GetNexusPrisma<TypeName, ModelOrCrud>;
}
  "
`;
