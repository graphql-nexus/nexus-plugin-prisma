// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`it does not expose pagination 1`] = `
"type Query {
  users: [User!]
}

type User {
  id: Int!
}
"
`;

exports[`it exposes filtering only if filtering: true 1`] = `
"input IntFilter {
  equals: Int
  not: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
}

type Post {
  id: Int!
}

input PostFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input PostWhereInput {
  id: IntFilter
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  user: UserWhereInput
}

type Query {
  ok: Boolean!
}

type User {
  id: Int!
  posts(where: PostWhereInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
}

input UserWhereInput {
  id: IntFilter
  posts: PostFilter
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}
"
`;

exports[`it exposes findOne and findMany 1`] = `
"type Query {
  user(where: UserWhereUniqueInput!): User
  users(skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type User {
  id: Int!
}

input UserWhereUniqueInput {
  id: Int
}
"
`;

exports[`it exposes id ordering 1`] = `
"enum OrderByArg {
  asc
  desc
}

type Post {
  id: Int!
  name: String!
}

type Query {
  ok: Boolean!
}

type User {
  id: Int!
  posts(orderBy: UserPostsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
}

input UserPostsOrderByInput {
  id: OrderByArg
}
"
`;

exports[`it exposes only id filters 1`] = `
"input IntFilter {
  equals: Int
  not: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
}

type Post {
  id: Int!
  name: String!
}

type Query {
  ok: Boolean!
}

type User {
  id: Int!
  posts(where: UserPostsWhereInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
}

input UserPostsWhereInput {
  id: IntFilter
}
"
`;

exports[`it exposes only pagination on relations by default 1`] = `
"type Post {
  id: Int!
}

type Query {
  ok: Boolean!
}

type User {
  id: Int!
  posts(skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
}
"
`;

exports[`it exposes ordering only if ordering: true 1`] = `
"enum OrderByArg {
  asc
  desc
}

type Post {
  id: Int!
  name: String!
}

input PostOrderByInput {
  id: OrderByArg
  name: OrderByArg
}

type Query {
  ok: Boolean!
}

type User {
  id: Int!
  posts(orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
}
"
`;

exports[`it exposes prisma scalars 1`] = `
"type A {
  id: UUID!
  createdAt: DateTime!
}

type B {
  id: ID!
}

scalar DateTime

type Query {
  ok: Boolean!
}

scalar UUID
"
`;

exports[`it only exposes pagination 'first' parameter 1`] = `
"type Query {
  users(first: Int): [User!]
}

type User {
  id: Int!
}
"
`;

exports[`renames top-level input types that are customized 1`] = `
"input NullableStringFilter {
  equals: String
  not: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
}

type Post {
  id: ID!
  author: User
}

input PostFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input PostWhereInput {
  id: StringFilter
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  author: UserWhereInput
}

type Query {
  posts(where: QueryFindManyPostWhereInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
}

input QueryFindManyPostWhereInput {
  author: UserWhereInput
}

input StringFilter {
  equals: String
  not: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
}

type User {
  id: ID!
  name: String
  posts(where: PostWhereInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
}

input UserWhereInput {
  id: StringFilter
  name: NullableStringFilter
  posts: PostFilter
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}
"
`;

exports[`simple schema 1`] = `
"type Query {
  ok: Boolean!
}

type User {
  id: Int!
  name: String!
}
"
`;
