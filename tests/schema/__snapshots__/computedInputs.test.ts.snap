// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`removes global computedInputs from all input types: globallyComputedInputs 1`] = `
{
  "schema": "type Query {
  user(where: UserWhereUniqueInput!): User
}

type Mutation {
  createOneUser(data: UserCreateInput!): User!
  createOneNested(data: NestedCreateInput!): Nested!
}

type User {
  id: Int!
  name: String!
  nested(first: Int, last: Int, before: NestedWhereUniqueInput, after: NestedWhereUniqueInput): [Nested!]!
  createdWithBrowser: String!
}

type Nested {
  id: Int!
  createdWithBrowser: String!
  name: String!
}

input UserWhereUniqueInput {
  id: Int
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  name: StringFilter
  nested: NestedListRelationFilter
}

input UserCreateInput {
  name: String!
  nested: NestedCreateNestedManyWithoutUserInput
}

input NestedCreateInput {
  name: String!
  user: UserCreateNestedOneWithoutNestedInput!
}

input NestedWhereUniqueInput {
  id: Int
  AND: [NestedWhereInput!]
  OR: [NestedWhereInput!]
  NOT: [NestedWhereInput!]
  name: StringFilter
  userId: IntFilter
  user: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IntFilter
  name: StringFilter
  nested: NestedListRelationFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedListRelationFilter {
  every: NestedWhereInput
  some: NestedWhereInput
  none: NestedWhereInput
}

input NestedCreateNestedManyWithoutUserInput {
  create: [NestedCreateWithoutUserInput!]
  connectOrCreate: [NestedCreateOrConnectWithoutUserInput!]
  connect: [NestedWhereUniqueInput!]
}

input UserCreateNestedOneWithoutNestedInput {
  create: UserCreateWithoutNestedInput
  connectOrCreate: UserCreateOrConnectWithoutNestedInput
  connect: UserWhereUniqueInput
}

input NestedWhereInput {
  AND: [NestedWhereInput!]
  OR: [NestedWhereInput!]
  NOT: [NestedWhereInput!]
  id: IntFilter
  name: StringFilter
  userId: IntFilter
  user: UserWhereInput
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedCreateWithoutUserInput {
  name: String!
}

input NestedCreateOrConnectWithoutUserInput {
  where: NestedWhereUniqueInput!
  create: NestedCreateWithoutUserInput!
}

input UserCreateWithoutNestedInput {
  name: String!
}

input UserCreateOrConnectWithoutNestedInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutNestedInput!
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}",
  "typegen": "import * as Typegen from '@morgothulhu/nexus-plugin-prisma/typegen'
import * as Prisma from '@prisma/client';

// Pagination type
type Pagination = {
    first?: boolean
    last?: boolean
    before?: boolean
    after?: boolean
}

// Prisma custom scalar names
type CustomScalars = 'No custom scalars are used in your Prisma Schema.'

// Prisma model type definitions
interface PrismaModels {
  User: Prisma.User
  Nested: Prisma.Nested
}

// Prisma input types metadata
interface NexusPrismaInputs {
  Query: {
    users: {
      filtering: 'AND' | 'OR' | 'NOT' | 'id' | 'name' | 'nested'
      ordering: 'id' | 'name' | 'nested'
    }
    groupByUser: {
      filtering: 'AND' | 'OR' | 'NOT' | 'id' | 'name' | 'nested'
      ordering: 'id' | 'name' | '_count' | '_avg' | '_max' | '_min' | '_sum'
    }
    nesteds: {
      filtering: 'AND' | 'OR' | 'NOT' | 'id' | 'name' | 'userId' | 'user'
      ordering: 'id' | 'name' | 'userId' | 'user'
    }
    groupByNested: {
      filtering: 'AND' | 'OR' | 'NOT' | 'id' | 'name' | 'userId' | 'user'
      ordering: 'id' | 'name' | 'userId' | '_count' | '_avg' | '_max' | '_min' | '_sum'
    }
  },
  User: {
    nested: {
      filtering: 'AND' | 'OR' | 'NOT' | 'id' | 'name' | 'userId' | 'user'
      ordering: 'id' | 'name' | 'userId' | 'user'
    }
  }
  Nested: {

  }
}

// Prisma output types metadata
interface NexusPrismaOutputs {
  Query: {
    aggregateUser: 'AggregateUser'
    users: 'User'
    user: 'User'
    groupByUser: 'UserGroupByOutputType'
    aggregateNested: 'AggregateNested'
    nesteds: 'Nested'
    nested: 'Nested'
    groupByNested: 'NestedGroupByOutputType'
  },
  Mutation: {
    createOneUser: 'User'
    deleteOneUser: 'User'
    deleteManyUser: 'AffectedRowsOutput'
    updateOneUser: 'User'
    updateManyUser: 'AffectedRowsOutput'
    upsertOneUser: 'User'
    createOneNested: 'Nested'
    deleteOneNested: 'Nested'
    deleteManyNested: 'AffectedRowsOutput'
    updateOneNested: 'Nested'
    updateManyNested: 'AffectedRowsOutput'
    upsertOneNested: 'Nested'
  },
  User: {
    id: 'Int'
    name: 'String'
    nested: 'Nested'
    createdWithBrowser: 'String'
  }
  Nested: {
    id: 'Int'
    name: 'String'
    createdWithBrowser: 'String'
    userId: 'Int'
    user: 'User'
  }
}

// Helper to gather all methods relative to a model
interface NexusPrismaMethods {
  User: Typegen.NexusPrismaFields<'User'>
  Nested: Typegen.NexusPrismaFields<'Nested'>
  Query: Typegen.NexusPrismaFields<'Query'>
  Mutation: Typegen.NexusPrismaFields<'Mutation'>
}

interface NexusPrismaGenTypes {
  inputs: NexusPrismaInputs
  outputs: NexusPrismaOutputs
  methods: NexusPrismaMethods
  models: PrismaModels
  pagination: Pagination
  scalars: CustomScalars
}

declare global {
  interface NexusPrismaGen extends NexusPrismaGenTypes {}

  type NexusPrisma<
    TypeName extends string,
    ModelOrCrud extends 'model' | 'crud'
  > = Typegen.GetNexusPrisma<TypeName, ModelOrCrud>;
}
  ",
}
`;

exports[`removes resolver-level computedInputs from the corresponding input type: locallyComputedInputs 1`] = `
{
  "schema": "type Query {
  user(where: UserWhereUniqueInput!): User
}

type Mutation {
  createOneUser(data: UserCreateInput!): User!
}

type User {
  id: Int!
  name: String!
  createdWithBrowser: String!
}

input UserWhereUniqueInput {
  id: Int
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  name: StringFilter
  createdWithBrowser: StringFilter
}

input UserCreateInput {
  name: String!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IntFilter
  name: StringFilter
  createdWithBrowser: StringFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}",
  "typegen": "import * as Typegen from '@morgothulhu/nexus-plugin-prisma/typegen'
import * as Prisma from '@prisma/client';

// Pagination type
type Pagination = {
    first?: boolean
    last?: boolean
    before?: boolean
    after?: boolean
}

// Prisma custom scalar names
type CustomScalars = 'No custom scalars are used in your Prisma Schema.'

// Prisma model type definitions
interface PrismaModels {
  User: Prisma.User
}

// Prisma input types metadata
interface NexusPrismaInputs {
  Query: {
    users: {
      filtering: 'AND' | 'OR' | 'NOT' | 'id' | 'name' | 'createdWithBrowser'
      ordering: 'id' | 'name' | 'createdWithBrowser'
    }
    groupByUser: {
      filtering: 'AND' | 'OR' | 'NOT' | 'id' | 'name' | 'createdWithBrowser'
      ordering: 'id' | 'name' | 'createdWithBrowser' | '_count' | '_avg' | '_max' | '_min' | '_sum'
    }
  },
  User: {

  }
}

// Prisma output types metadata
interface NexusPrismaOutputs {
  Query: {
    aggregateUser: 'AggregateUser'
    users: 'User'
    user: 'User'
    groupByUser: 'UserGroupByOutputType'
  },
  Mutation: {
    createOneUser: 'User'
    deleteOneUser: 'User'
    deleteManyUser: 'AffectedRowsOutput'
    updateOneUser: 'User'
    updateManyUser: 'AffectedRowsOutput'
    upsertOneUser: 'User'
  },
  User: {
    id: 'Int'
    name: 'String'
    createdWithBrowser: 'String'
  }
}

// Helper to gather all methods relative to a model
interface NexusPrismaMethods {
  User: Typegen.NexusPrismaFields<'User'>
  Query: Typegen.NexusPrismaFields<'Query'>
  Mutation: Typegen.NexusPrismaFields<'Mutation'>
}

interface NexusPrismaGenTypes {
  inputs: NexusPrismaInputs
  outputs: NexusPrismaOutputs
  methods: NexusPrismaMethods
  models: PrismaModels
  pagination: Pagination
  scalars: CustomScalars
}

declare global {
  interface NexusPrismaGen extends NexusPrismaGenTypes {}

  type NexusPrisma<
    TypeName extends string,
    ModelOrCrud extends 'model' | 'crud'
  > = Typegen.GetNexusPrisma<TypeName, ModelOrCrud>;
}
  ",
}
`;
