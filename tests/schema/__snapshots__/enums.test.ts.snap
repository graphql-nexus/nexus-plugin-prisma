// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`does not automatically publish input/enum type if already created by user: schema 1`] = `
"enum Color {
  Something
  Else
}

type Query {
  users(where: UserWhereInput, skip: Int, after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

type User {
  id: Int!
  favouriteColor: Color!
}

input UserWhereInput {
  customField: String
}

input UserWhereUniqueInput {
  id: Int
}
"
`;

exports[`does not automatically publish input/enum type if already created by user: typegen 1`] = `
"
interface ModelTypes {
  User: prisma.User
}
  
interface NexusPrismaInputs {
  Query: {
    users: {
  filtering: 'id' | 'favouriteColor' | 'AND' | 'OR' | 'NOT'
  ordering: 'id' | 'favouriteColor'
}

  },
    User: {


  }
}

interface NexusPrismaTypes {
  Query: {
    user: 'User'
    users: 'User'

  },
  Mutation: {
    createOneUser: 'User'
    updateOneUser: 'User'
    updateManyUser: 'BatchPayload'
    deleteOneUser: 'User'
    deleteManyUser: 'BatchPayload'
    upsertOneUser: 'User'

  },
  User: {
    id: 'Int'
    favouriteColor: 'Color'

}
}

interface NexusPrismaMethods {
  User: NexusPrismaFields<'User'>
  Query: NexusPrismaFields<'Query'>
  Mutation: NexusPrismaFields<'Mutation'>
}
  

declare global {
  type NexusPrisma<
    TypeName extends string,
    ModelOrCrud extends 'model' | 'crud'
  > = GetNexusPrisma<TypeName, ModelOrCrud>;
}
  "
`;

exports[`does not publish enum twice (from input/output type): schema 1`] = `
"enum Color {
  Red
  Green
  Blue
}

input IntFilter {
  equals: Int
  not: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
}

type Query {
  users(where: UserWhereInput, skip: Int, after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

type User {
  id: Int!
  favouriteColor: Color!
}

input UserWhereInput {
  id: IntFilter
  favouriteColor: Color
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: Int
}
"
`;

exports[`does not publish enum twice (from input/output type): typegen 1`] = `
"
interface ModelTypes {
  User: prisma.User
}
  
interface NexusPrismaInputs {
  Query: {
    users: {
  filtering: 'id' | 'favouriteColor' | 'AND' | 'OR' | 'NOT'
  ordering: 'id' | 'favouriteColor'
}

  },
    User: {


  }
}

interface NexusPrismaTypes {
  Query: {
    user: 'User'
    users: 'User'

  },
  Mutation: {
    createOneUser: 'User'
    updateOneUser: 'User'
    updateManyUser: 'BatchPayload'
    deleteOneUser: 'User'
    deleteManyUser: 'BatchPayload'
    upsertOneUser: 'User'

  },
  User: {
    id: 'Int'
    favouriteColor: 'Color'

}
}

interface NexusPrismaMethods {
  User: NexusPrismaFields<'User'>
  Query: NexusPrismaFields<'Query'>
  Mutation: NexusPrismaFields<'Mutation'>
}
  

declare global {
  type NexusPrisma<
    TypeName extends string,
    ModelOrCrud extends 'model' | 'crud'
  > = GetNexusPrisma<TypeName, ModelOrCrud>;
}
  "
`;

exports[`publishes enum even as output type: schema 1`] = `
"enum Color {
  Red
  Green
  Blue
}

type Query {
  ok: Boolean!
}

type User {
  id: Int!
  favouriteColor: Color!
}
"
`;

exports[`publishes enum even as output type: typegen 1`] = `
"
interface ModelTypes {
  User: prisma.User
}
  
interface NexusPrismaInputs {
  Query: {
    users: {
  filtering: 'id' | 'favouriteColor' | 'AND' | 'OR' | 'NOT'
  ordering: 'id' | 'favouriteColor'
}

  },
    User: {


  }
}

interface NexusPrismaTypes {
  Query: {
    user: 'User'
    users: 'User'

  },
  Mutation: {
    createOneUser: 'User'
    updateOneUser: 'User'
    updateManyUser: 'BatchPayload'
    deleteOneUser: 'User'
    deleteManyUser: 'BatchPayload'
    upsertOneUser: 'User'

  },
  User: {
    id: 'Int'
    favouriteColor: 'Color'

}
}

interface NexusPrismaMethods {
  User: NexusPrismaFields<'User'>
  Query: NexusPrismaFields<'Query'>
  Mutation: NexusPrismaFields<'Mutation'>
}
  

declare global {
  type NexusPrisma<
    TypeName extends string,
    ModelOrCrud extends 'model' | 'crud'
  > = GetNexusPrisma<TypeName, ModelOrCrud>;
}
  "
`;
