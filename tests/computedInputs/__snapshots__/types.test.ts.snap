// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`computedInputs typegen works at plugin-level: plugin-level-schema 1`] = `
"input IdCompoundUniqueInput {
  id: Int!
}

type Mutation {
  createOneUser(data: UserCreateInput!): User!
  createOneNested(data: NestedCreateInput!): Nested!
}

type Nested {
  id: Int!
  createdWithBrowser: String!
  name: String!
}

input NestedCreateInput {
  name: String!
  user: UserCreateOneWithoutNestedInput
}

input NestedCreateManyWithoutUserInput {
  create: [NestedCreateWithoutUserInput!]
  connect: [NestedWhereUniqueInput!]
}

input NestedCreateWithoutUserInput {
  name: String!
}

input NestedWhereUniqueInput {
  id: IdCompoundUniqueInput
}

type Query {
  user(where: UserWhereUniqueInput!): User
}

type User {
  id: Int!
  name: String!
  nested(skip: Int, after: NestedWhereUniqueInput, before: NestedWhereUniqueInput, first: Int, last: Int): [Nested!]!
  createdWithBrowser: String!
}

input UserCreateInput {
  name: String!
  nested: NestedCreateManyWithoutUserInput
}

input UserCreateOneWithoutNestedInput {
  create: UserCreateWithoutNestedInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutNestedInput {
  name: String!
}

input UserWhereUniqueInput {
  id: IdCompoundUniqueInput
}
"
`;

exports[`computedInputs typegen works at plugin-level: plugin-level-typegen 1`] = `
"
interface ModelTypes {
  User: prisma.User
  Nested: prisma.Nested
}
  
interface NexusPrismaInputs {
  Query: {
    users: {
  filtering: 'id' | 'name' | 'nested' | 'createdWithBrowser' | 'AND' | 'OR' | 'NOT'
  ordering: 'id' | 'name' | 'createdWithBrowser'
}
    nesteds: {
  filtering: 'id' | 'name' | 'createdWithBrowser' | 'AND' | 'OR' | 'NOT' | 'user'
  ordering: 'id' | 'name' | 'createdWithBrowser'
}

  },
    User: {
    nested: {
  filtering: 'id' | 'name' | 'createdWithBrowser' | 'AND' | 'OR' | 'NOT' | 'user'
  ordering: 'id' | 'name' | 'createdWithBrowser'
}

  },  Nested: {


  }
}

interface NexusPrismaTypes {
  Query: {
    user: 'User'
    users: 'User'
    nested: 'Nested'
    nesteds: 'Nested'

  },
  Mutation: {
    createOneUser: 'User'
    updateOneUser: 'User'
    updateManyUser: 'BatchPayload'
    deleteOneUser: 'User'
    deleteManyUser: 'BatchPayload'
    upsertOneUser: 'User'
    createOneNested: 'Nested'
    updateOneNested: 'Nested'
    updateManyNested: 'BatchPayload'
    deleteOneNested: 'Nested'
    deleteManyNested: 'BatchPayload'
    upsertOneNested: 'Nested'

  },
  User: {
    id: 'Int'
    name: 'String'
    nested: 'Nested'
    createdWithBrowser: 'String'

},  Nested: {
    id: 'Int'
    name: 'String'
    createdWithBrowser: 'String'
    user: 'User'

}
}

interface NexusPrismaMethods {
  User: NexusPrismaFields<'User'>
  Nested: NexusPrismaFields<'Nested'>
  Query: NexusPrismaFields<'Query'>
  Mutation: NexusPrismaFields<'Mutation'>
}
  

declare global {
  type NexusPrisma<
    TypeName extends string,
    ModelOrCrud extends 'model' | 'crud'
  > = GetNexusPrisma<TypeName, ModelOrCrud>;
}
  "
`;

exports[`computedInputs typegen works at resolver-level: resolver-level-schema 1`] = `
"input IdCompoundUniqueInput {
  id: Int!
}

input IdCompoundUniqueWithoutCreatedWithBrowserInput {
  id: Int!
}

type Mutation {
  createOneUser(data: UserCreateWithoutCreatedWithBrowserInput!): User!
  createOneNested(data: NestedCreateInput!): Nested!
}

type Nested {
  id: Int!
  createdWithBrowser: String!
  name: String!
}

input NestedCreateInput {
  name: String!
  createdWithBrowser: String!
  user: UserCreateOneWithoutNestedInput
}

input NestedCreateManyWithoutUserWithoutCreatedWithBrowserInput {
  create: [NestedCreateWithoutUserWithoutCreatedWithBrowserInput!]
  connect: [NestedWhereUniqueWithoutCreatedWithBrowserInput!]
}

input NestedCreateWithoutUserWithoutCreatedWithBrowserInput {
  name: String!
}

input NestedWhereUniqueInput

input NestedWhereUniqueWithoutCreatedWithBrowserInput {
  id: IdCompoundUniqueWithoutCreatedWithBrowserInput
}

type Query {
  user(where: UserWhereUniqueInput!): User
}

type User {
  id: Int!
  name: String!
  nested(skip: Int, after: NestedWhereUniqueInput, before: NestedWhereUniqueInput, first: Int, last: Int): [Nested!]!
  createdWithBrowser: String!
}

input UserCreateOneWithoutNestedInput {
  create: UserCreateWithoutNestedInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCreatedWithBrowserInput {
  name: String!
  nested: NestedCreateManyWithoutUserWithoutCreatedWithBrowserInput
}

input UserCreateWithoutNestedInput {
  name: String!
  createdWithBrowser: String!
}

input UserWhereUniqueInput {
  id: IdCompoundUniqueInput
}
"
`;

exports[`computedInputs typegen works at resolver-level: resolver-level-typegen 1`] = `
"
interface ModelTypes {
  User: prisma.User
  Nested: prisma.Nested
}
  
interface NexusPrismaInputs {
  Query: {
    users: {
  filtering: 'id' | 'name' | 'nested' | 'createdWithBrowser' | 'AND' | 'OR' | 'NOT'
  ordering: 'id' | 'name' | 'createdWithBrowser'
}
    nesteds: {
  filtering: 'id' | 'name' | 'createdWithBrowser' | 'AND' | 'OR' | 'NOT' | 'user'
  ordering: 'id' | 'name' | 'createdWithBrowser'
}

  },
    User: {
    nested: {
  filtering: 'id' | 'name' | 'createdWithBrowser' | 'AND' | 'OR' | 'NOT' | 'user'
  ordering: 'id' | 'name' | 'createdWithBrowser'
}

  },  Nested: {


  }
}

interface NexusPrismaTypes {
  Query: {
    user: 'User'
    users: 'User'
    nested: 'Nested'
    nesteds: 'Nested'

  },
  Mutation: {
    createOneUser: 'User'
    updateOneUser: 'User'
    updateManyUser: 'BatchPayload'
    deleteOneUser: 'User'
    deleteManyUser: 'BatchPayload'
    upsertOneUser: 'User'
    createOneNested: 'Nested'
    updateOneNested: 'Nested'
    updateManyNested: 'BatchPayload'
    deleteOneNested: 'Nested'
    deleteManyNested: 'BatchPayload'
    upsertOneNested: 'Nested'

  },
  User: {
    id: 'Int'
    name: 'String'
    nested: 'Nested'
    createdWithBrowser: 'String'

},  Nested: {
    id: 'Int'
    name: 'String'
    createdWithBrowser: 'String'
    user: 'User'

}
}

interface NexusPrismaMethods {
  User: NexusPrismaFields<'User'>
  Nested: NexusPrismaFields<'Nested'>
  Query: NexusPrismaFields<'Query'>
  Mutation: NexusPrismaFields<'Mutation'>
}
  

declare global {
  type NexusPrisma<
    TypeName extends string,
    ModelOrCrud extends 'model' | 'crud'
  > = GetNexusPrisma<TypeName, ModelOrCrud>;
}
  "
`;
