// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generates publishers findOne and findMany: schema 1`] = `
"type BatchPayload {
  count: Int!
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

type ModelName {
  id: Int!
}

input ModelNameCreateInput {
  name: String!
}

input ModelNameUpdateInput {
  name: String
}

input ModelNameUpdateManyMutationInput {
  name: String
}

input ModelNameWhereInput {
  AND: [ModelNameWhereInput!]
  OR: [ModelNameWhereInput!]
  NOT: [ModelNameWhereInput!]
  id: IntFilter
  name: StringFilter
}

input ModelNameWhereUniqueInput {
  id: Int
}

type Mutation {
  createOneModelName(data: ModelNameCreateInput!): ModelName!
  deleteOneModelName(where: ModelNameWhereUniqueInput!): ModelName
  updateOneModelName(data: ModelNameUpdateInput!, where: ModelNameWhereUniqueInput!): ModelName
  upsertOneModelName(where: ModelNameWhereUniqueInput!, create: ModelNameCreateInput!, update: ModelNameUpdateInput!): ModelName!
  updateManyModelName(data: ModelNameUpdateManyMutationInput!, where: ModelNameWhereInput): BatchPayload!
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

type Query {
  findOneModelName(where: ModelNameWhereUniqueInput!): ModelName
  findManyModelName(first: Int, last: Int, before: ModelNameWhereUniqueInput, after: ModelNameWhereUniqueInput): [ModelName!]!
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}
"
`;

exports[`generates publishers findOne and findMany: typegen 1`] = `
"import * as Typegen from 'nexus-plugin-prisma/typegen'
import * as Prisma from '@prisma/client';

// Pagination type
type Pagination = {
  first?: boolean
  last?: boolean
  before?: boolean
  after?: boolean
}

// Prisma custom scalar names
type CustomScalars = 'No custom scalars are used in your Prisma Schema.'

// Prisma model type definitions
interface PrismaModels {
  ModelName: Prisma.ModelName
}

// Prisma input types metadata
interface NexusPrismaInputs {
  Query: {
    findManyModelName: {
      filtering: 'AND' | 'OR' | 'NOT' | 'id' | 'name'
      ordering: 'id' | 'name'
    }
  },
  ModelName: {

  }
}

// Prisma output types metadata
interface NexusPrismaOutputs {
  Query: {
    findOneModelName: 'ModelName'
    findManyModelName: 'ModelName'
  },
  Mutation: {
    createOneModelName: 'ModelName'
    updateOneModelName: 'ModelName'
    updateManyModelName: 'BatchPayload'
    deleteOneModelName: 'ModelName'
    deleteManyModelName: 'BatchPayload'
    upsertOneModelName: 'ModelName'
  },
  ModelName: {
    id: 'Int'
    name: 'String'
  }
}

// Helper to gather all methods relative to a model
interface NexusPrismaMethods {
  ModelName: Typegen.NexusPrismaFields<'ModelName'>
  Query: Typegen.NexusPrismaFields<'Query'>
  Mutation: Typegen.NexusPrismaFields<'Mutation'>
}

interface NexusPrismaGenTypes {
  inputs: NexusPrismaInputs
  outputs: NexusPrismaOutputs
  methods: NexusPrismaMethods
  models: PrismaModels
  pagination: Pagination
  scalars: CustomScalars
}

declare global {
  interface NexusPrismaGen extends NexusPrismaGenTypes {}

  type NexusPrisma<
    TypeName extends string,
    ModelOrCrud extends 'model' | 'crud'
  > = Typegen.GetNexusPrisma<TypeName, ModelOrCrud>;
}
  "
`;
