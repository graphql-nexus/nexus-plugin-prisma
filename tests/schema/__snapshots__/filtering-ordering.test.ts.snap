// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`in dev stage, removes filtering or ordering entirely if no arg or wrong args are passed and log error: output 1`] = `
"
Warning: Your GraphQL \`Query\` object definition is projecting a relational field \`users\`. On it, you are declaring that clients be able to filter by Prisma \`User\` model field \`somethingWrong\`. However, your Prisma model \`User\` model has no such field \`somethingWrong\`

Warning: Your GraphQL \`Query\` object definition is projecting a relational field \`users\`. On it, you are declaring that clients be able to order by Prisma \`User\` model field \`somethingWrong\`. However, your Prisma model \`User\` model has no such field \`somethingWrong\`
"
`;

exports[`in dev stage, removes filtering or ordering entirely if no arg or wrong args are passed and log error: schema 1`] = `
"type Query {
  users(first: Int, last: Int, before: UserWhereUniqueInput, after: UserWhereUniqueInput): [User!]!
}

type User {
  id: Int!
  name: String!
}

input UserWhereUniqueInput {
  id: Int
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  name: StringFilter
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IntFilter
  name: StringFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}"
`;

exports[`in dev stage, removes filtering or ordering entirely if no arg or wrong args are passed and log error: typegen 1`] = `
"import * as Typegen from '@morgothulhu/nexus-plugin-prisma/typegen'
import * as Prisma from '@prisma/client';

// Pagination type
type Pagination = {
    first?: boolean
    last?: boolean
    before?: boolean
    after?: boolean
}

// Prisma custom scalar names
type CustomScalars = 'No custom scalars are used in your Prisma Schema.'

// Prisma model type definitions
interface PrismaModels {
  User: Prisma.User
}

// Prisma input types metadata
interface NexusPrismaInputs {
  Query: {
    users: {
      filtering: 'AND' | 'OR' | 'NOT' | 'id' | 'name'
      ordering: 'id' | 'name'
    }
    groupByUser: {
      filtering: 'AND' | 'OR' | 'NOT' | 'id' | 'name'
      ordering: 'id' | 'name' | '_count' | '_avg' | '_max' | '_min' | '_sum'
    }
  },
  User: {

  }
}

// Prisma output types metadata
interface NexusPrismaOutputs {
  Query: {
    aggregateUser: 'AggregateUser'
    users: 'User'
    user: 'User'
    groupByUser: 'UserGroupByOutputType'
  },
  Mutation: {
    createOneUser: 'User'
    deleteOneUser: 'User'
    deleteManyUser: 'AffectedRowsOutput'
    updateOneUser: 'User'
    updateManyUser: 'AffectedRowsOutput'
    upsertOneUser: 'User'
  },
  User: {
    id: 'Int'
    name: 'String'
  }
}

// Helper to gather all methods relative to a model
interface NexusPrismaMethods {
  User: Typegen.NexusPrismaFields<'User'>
  Query: Typegen.NexusPrismaFields<'Query'>
  Mutation: Typegen.NexusPrismaFields<'Mutation'>
}

interface NexusPrismaGenTypes {
  inputs: NexusPrismaInputs
  outputs: NexusPrismaOutputs
  methods: NexusPrismaMethods
  models: PrismaModels
  pagination: Pagination
  scalars: CustomScalars
}

declare global {
  interface NexusPrismaGen extends NexusPrismaGenTypes {}

  type NexusPrisma<
    TypeName extends string,
    ModelOrCrud extends 'model' | 'crud'
  > = Typegen.GetNexusPrisma<TypeName, ModelOrCrud>;
}
  "
`;

exports[`in prod stage, throw error if no arg or wrong args are passed: output 1`] = `"Your GraphQL \`Query\` object definition is projecting a relational field \`users\`. On it, you are declaring that clients be able to filter by Prisma \`User\` model field \`somethingWrong\`. However, your Prisma model \`User\` model has no such field \`somethingWrong\`"`;
