// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generates publishers pluralized & camel-cased: schema 1`] = `
"type BatchPayload {
  count: Int!
}

input IdCompoundUniqueInput {
  id: Int!
}

input IntFilter {
  equals: Int
  not: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
}

type ModelName {
  id: Int!
}

input ModelNameCreateInput {
  name: String!
}

input ModelNameUpdateInput {
  id: Int
  name: String
}

input ModelNameUpdateManyMutationInput {
  id: Int
  name: String
}

input ModelNameWhereInput {
  id: IntFilter
  name: StringFilter
  AND: [ModelNameWhereInput!]
  OR: [ModelNameWhereInput!]
  NOT: [ModelNameWhereInput!]
}

input ModelNameWhereUniqueInput {
  id: IdCompoundUniqueInput
}

type Mutation {
  createOneModelName(data: ModelNameCreateInput!): ModelName!
  deleteOneModelName(where: ModelNameWhereUniqueInput!): ModelName
  updateOneModelName(data: ModelNameUpdateInput!, where: ModelNameWhereUniqueInput!): ModelName
  upsertOneModelName(where: ModelNameWhereUniqueInput!, create: ModelNameCreateInput!, update: ModelNameUpdateInput!): ModelName!
  updateManyModelName(data: ModelNameUpdateManyMutationInput!, where: ModelNameWhereInput): BatchPayload!
}

type Query {
  modelName(where: ModelNameWhereUniqueInput!): ModelName
  modelNames(skip: Int, after: ModelNameWhereUniqueInput, before: ModelNameWhereUniqueInput, first: Int, last: Int): [ModelName!]!
}

input StringFilter {
  equals: String
  not: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
}
"
`;

exports[`generates publishers pluralized & camel-cased: typegen 1`] = `
"
interface ModelTypes {
  ModelName: prisma.ModelName
}
  
interface NexusPrismaInputs {
  Query: {
    modelNames: {
  filtering: 'id' | 'name' | 'AND' | 'OR' | 'NOT'
  ordering: 'id' | 'name'
}

  },
    ModelName: {


  }
}

interface NexusPrismaTypes {
  Query: {
    modelName: 'ModelName'
    modelNames: 'ModelName'

  },
  Mutation: {
    createOneModelName: 'ModelName'
    updateOneModelName: 'ModelName'
    updateManyModelName: 'BatchPayload'
    deleteOneModelName: 'ModelName'
    deleteManyModelName: 'BatchPayload'
    upsertOneModelName: 'ModelName'

  },
  ModelName: {
    id: 'Int'
    name: 'String'

}
}

interface NexusPrismaMethods {
  ModelName: NexusPrismaFields<'ModelName'>
  Query: NexusPrismaFields<'Query'>
  Mutation: NexusPrismaFields<'Mutation'>
}
  

declare global {
  type NexusPrisma<
    TypeName extends string,
    ModelOrCrud extends 'model' | 'crud'
  > = GetNexusPrisma<TypeName, ModelOrCrud>;
}
  "
`;
