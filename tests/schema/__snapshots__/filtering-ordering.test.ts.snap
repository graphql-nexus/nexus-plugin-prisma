// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`in dev stage, removes filtering or ordering entirely if no arg or wrong args are passed and log error: output 1`] = `
"
Warning: Your GraphQL \`Query\` object definition is projecting a relational field \`users\`. On it, you are declaring that clients be able to filter by Prisma \`User\` model field \`somethingWrong\`. However, your Prisma model \`User\` model has no such field \`somethingWrong\`

Warning: Your GraphQL \`Query\` object definition is projecting a relational field \`users\`. On it, you are declaring that clients be able to order by Prisma \`User\` model field \`somethingWrong\`. However, your Prisma model \`User\` model has no such field \`somethingWrong\`
"
`;

exports[`in dev stage, removes filtering or ordering entirely if no arg or wrong args are passed and log error: schema 1`] = `
"type Query {
  users(skip: Int, after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

type User {
  id: Int!
  name: String!
}

input UserWhereUniqueInput {
  id: Int
}
"
`;

exports[`in dev stage, removes filtering or ordering entirely if no arg or wrong args are passed and log error: typegen 1`] = `
"
interface ModelTypes {
  User: prisma.User
}
  
interface NexusPrismaInputs {
  Query: {
    users: {
  filtering: 'id' | 'name' | 'AND' | 'OR' | 'NOT'
  ordering: 'id' | 'name'
}

  },
    User: {


  }
}

interface NexusPrismaTypes {
  Query: {
    user: 'User'
    users: 'User'

  },
  Mutation: {
    createOneUser: 'User'
    updateOneUser: 'User'
    updateManyUser: 'BatchPayload'
    deleteOneUser: 'User'
    deleteManyUser: 'BatchPayload'
    upsertOneUser: 'User'

  },
  User: {
    id: 'Int'
    name: 'String'

}
}

interface NexusPrismaMethods {
  User: NexusPrismaFields<'User'>
  Query: NexusPrismaFields<'Query'>
  Mutation: NexusPrismaFields<'Mutation'>
}
  

declare global {
  type NexusPrisma<
    TypeName extends string,
    ModelOrCrud extends 'model' | 'crud'
  > = GetNexusPrisma<TypeName, ModelOrCrud>;

  // Pre-transform inputs
  interface PrismaInputs {
  
    UserWhereInput: prisma.UserWhereInput
    IdCompoundUniqueInput: prisma.IdCompoundUniqueInput
    UserWhereUniqueInput: prisma.UserWhereUniqueInput
    UserCreateInput: prisma.UserCreateInput
    UserUpdateInput: prisma.UserUpdateInput
    UserUpdateManyMutationInput: prisma.UserUpdateManyMutationInput
    IntFilter: prisma.IntFilter
    StringFilter: prisma.StringFilter
    UserOrderByInput: prisma.UserOrderByInput
  }
}
  "
`;

exports[`in prod stage, throw error if no arg or wrong args are passed: output 1`] = `"Your GraphQL \`Query\` object definition is projecting a relational field \`users\`. On it, you are declaring that clients be able to filter by Prisma \`User\` model field \`somethingWrong\`. However, your Prisma model \`User\` model has no such field \`somethingWrong\`"`;
